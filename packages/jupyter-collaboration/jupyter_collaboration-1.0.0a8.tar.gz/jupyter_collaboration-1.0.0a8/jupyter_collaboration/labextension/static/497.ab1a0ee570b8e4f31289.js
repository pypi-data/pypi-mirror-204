"use strict";(self.webpackChunk_jupyter_collaboration_extension=self.webpackChunk_jupyter_collaboration_extension||[]).push([[497],{9497:(e,t,r)=>{r.r(t),r.d(t,{default:()=>S});var o,n=r(2281),a=r(1371),i=r(726),s=r(5581),l=r(3e3),c=r(5996);!function(e){e.openPath="filebrowser:open-path"}(o||(o={}));const d={id:"@jupyter/collaboration-extension:drive",description:"The default collaborative drive provider",provides:c.ICollaborativeDrive,requires:[i.ITranslator],optional:[],activate:(e,t)=>{const r=t.load("jupyter_collaboration"),o=new c.YDrive(e.serviceManager.user,r);return e.serviceManager.contents.addDrive(o),o}},u={id:"@jupyter/collaboration-extension:yfile",description:"Plugin to register the shared model factory for the content type 'file'",autoStart:!0,requires:[c.ICollaborativeDrive],optional:[],activate:(e,t)=>{t.sharedModelFactory.registerDocumentFactory("file",(()=>new l.YFile))}},p={id:"@jupyter/collaboration-extension:ynotebook",description:"Plugin to register the shared model factory for the content type 'notebook'",autoStart:!0,requires:[c.ICollaborativeDrive],optional:[s.ISettingRegistry],activate:(e,t,r)=>{let o=!0;r&&r.load("@jupyterlab/notebook-extension:tracker").then((e=>{const t=e=>{var t;const r=null==e?void 0:e.get("experimentalEnableDocumentWideUndoRedo").composite;o=null===(t=!r)||void 0===t||t};t(e),e.changed.connect((e=>t(e)))})),t.sharedModelFactory.registerDocumentFactory("notebook",(()=>new l.YNotebook({disableDocumentWideUndoRedo:o})))}},v={id:"@jupyter/collaboration-extension:defaultFileBrowser",description:"The default file browser factory provider",provides:a.IDefaultFileBrowser,requires:[c.ICollaborativeDrive,a.IFileBrowserFactory],optional:[n.IRouter,n.JupyterFrontEnd.ITreeResolver,n.ILabShell,s.ISettingRegistry],activate:async(e,t,r,o,n,a)=>{const{commands:i}=e;e.serviceManager.contents.addDrive(t);const s=r.createFileBrowser("filebrowser",{auto:!1,restore:!1,driveName:t.name});return b.restoreBrowser(s,i,o,n,a),s}};var b;!function(e){e.restoreBrowser=async function(e,t,r,n,a){const i="jp-mod-restoring";if(e.addClass(i),!r)return await e.model.restore(e.id),await e.model.refresh(),void e.removeClass(i);const s=async()=>{r.routed.disconnect(s);const l=await(null==n?void 0:n.paths);(null==l?void 0:l.file)||(null==l?void 0:l.browser)?(await e.model.restore(e.id,!1),l.file&&await t.execute(o.openPath,{path:l.file,dontShowBrowser:!0}),l.browser&&await t.execute(o.openPath,{path:l.browser,dontShowBrowser:!0})):(await e.model.restore(e.id),await e.model.refresh()),e.removeClass(i),(null==a?void 0:a.isEmpty("main"))&&t.execute("launcher:create")};r.routed.connect(s)}}(b||(b={}));var w=r(60),y=r(7478),m=r(9041),h=r(9190),f=r(8778),g=r(4989),x=r(8256),I=r(1682),M=r(981),C=r(6493),j=r(7099);const S=[d,u,p,v,{id:"@jupyter/collaboration-extension:userMenu",description:"Provide connected user menu.",requires:[],provides:m.IUserMenu,activate:e=>{const{commands:t}=e,{user:r}=e.serviceManager;return new m.UserMenu({commands:t,user:r})}},{id:"@jupyter/collaboration-extension:userMenuBar",description:"Add user menu to the interface.",autoStart:!0,requires:[m.IUserMenu],activate:async(e,t)=>{const{shell:r}=e,{user:o}=e.serviceManager,n=new f.MenuBar({forceItemsPosition:{forceX:!1,forceY:!1},renderer:new m.RendererUserMenu(o)});n.id="jp-UserMenu",o.userChanged.connect((()=>n.update())),n.addMenu(t),r.add(n,"top",{rank:1e3})}},{id:"@jupyter/collaboration-extension:rtcGlobalAwareness",description:"Add global awareness to share working document of users.",requires:[I.IStateDB],provides:m.IGlobalAwareness,activate:(e,t)=>{const{user:r}=e.serviceManager,o=new M.Doc,n=new C.GL(o),a=x.ServerConnection.makeSettings(),i=g.URLExt.join(a.wsUrl,"api/collaboration/room");new j.WebsocketProvider(i,"JupyterLab:globalAwareness",o,{awareness:n});const s=()=>{n.setLocalStateField("user",r.identity)};return r.isReady&&s(),r.ready.then(s).catch((e=>console.error(e))),r.userChanged.connect(s),t.changed.connect((async()=>{var e,r;const o=(null===(r=null===(e=(await t.toJSON())["layout-restorer:data"])||void 0===e?void 0:e.main)||void 0===r?void 0:r.current)||"";o.startsWith("editor")||o.startsWith("notebook")?n.setLocalStateField("current",o):n.setLocalStateField("current",null)})),n}},{id:"@jupyter/collaboration-extension:rtcPanel",description:"Add side panel to display all currently connected users.",autoStart:!0,requires:[m.IGlobalAwareness],optional:[i.ITranslator],activate:(e,t,r)=>{const{user:o}=e.serviceManager,n=(null!=r?r:i.nullTranslator).load("jupyter_collaboration"),a=new h.SidePanel({alignment:"justify"});a.id=w.DOMUtils.createDomID(),a.title.icon=h.usersIcon,a.title.caption=n.__("Collaboration"),a.addClass("jp-RTCPanel"),e.shell.add(a,"left",{rank:300});const s=new m.UserInfoPanel(o);s.title.label=n.__("User info"),s.title.caption=n.__("User information"),a.addWidget(s);const l=new m.CollaboratorsPanel(o,t,(t=>{e.commands.execute("docmanager:open",{path:t})}));l.title.label=n.__("Online Collaborators"),a.addWidget(l)}},{id:"@jupyter/collaboration-extension:userEditorCursors",description:"Add CodeMirror extension to display remote user cursors and selections.",autoStart:!0,requires:[y.IEditorExtensionRegistry],activate:(e,t)=>{t.addExtension({name:"remote-user-cursors",factory(e){const{awareness:t,ysource:r}=e.model.sharedModel;return y.EditorExtensionRegistry.createImmutableExtension((0,m.remoteUserCursors)({awareness:t,ytext:r}))}})}}]}}]);