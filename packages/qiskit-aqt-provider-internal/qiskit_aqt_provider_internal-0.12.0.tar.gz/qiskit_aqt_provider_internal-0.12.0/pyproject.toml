[tool.poetry]
name = "qiskit-aqt-provider-internal"
version = "0.12.0"
description = "Qiskit provider for AQT backends"
authors = ["Qiskit Development Team", "Alpine Quantum Technologies GmbH"]
repository = "https://github.com/alpine-quantum-technologies/qiskit-aqt-provider-internal/"
readme = "README.md"
license = "Apache-2.0"
classifiers=[
        "Intended Audience :: Developers",
        "Intended Audience :: Science/Research",
        "Operating System :: Microsoft :: Windows",
        "Operating System :: MacOS",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Topic :: Scientific/Engineering",
    ]
keywords=["qiskit", "sdk", "quantum"]

packages = [
    { include = "qiskit_aqt_provider" },
    { include = "test", format = "sdist" }
]
include = [
    "CODE_OF_CONDUCT.md",
    "CONTRIBUTING.md",
    "LICENSE.txt",
    "README.md"
]

[tool.poetry.plugins."qiskit.transpiler.scheduling"]
aqt = "qiskit_aqt_provider.transpiler_plugin:AQTSchedulingPlugin"

[tool.poetry.plugins."qiskit.transpiler.translation"]
aqt = "qiskit_aqt_provider.transpiler_plugin:AQTTranslationPlugin"

[tool.poetry.plugins.pytest11]
pytest_qiskit_aqt = "qiskit_aqt_provider.test.fixtures"

[tool.poetry.dependencies]
python = "^3.8"

httpx = ">=0.24.0"
python-dotenv = ">=1"
qiskit-aer = ">=0.11"
qiskit-terra = ">=0.23.3"
tabulate = ">=0.9.0"
tweedledum = { version = ">=1", optional = true }
typing-extensions = ">=4.0.0"

[tool.poetry.group.dev.dependencies]
black = "^23.1.0"
coverage = "^7.2.1"
dirty-equals = "^0.5.0"
hypothesis = "^6.70.0"
ipykernel = "^6.22.0"
isort = "^5.12.0"
jupyter-sphinx = "^0.4.0"
mistletoe = "^1.0.1"
mypy = "=1.0.1"
poethepoet = "^0.18.1"
pre-commit = "^3.1.1"
pyproject-fmt = "^0.9.2"
pytest = ">=7"
pytest-httpx = "^0.22.0"
pytest-sugar = "^0.9.6"
qiskit-experiments = "^0.4.0"
qiskit-sphinx-theme = ">=1.7.0"
qiskit-terra = {version = ">=0.23.2", extras = ["visualization"]}
ruff = "^0.0.261"
sphinx = ">=5.3"
sympy = "^1.11.1"
typer = "^0.7.0"
types-requests = "^2.28.11"
types-setuptools = "^65.7.0"
types-tabulate = "^0.9.0.1"

[tool.poetry.extras]
examples = [
    "tweedledum"
]

[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core>=1",
]

[tool.black]
line-length = 100
target-version = ['py37', 'py38', 'py39', 'py310']
preview = true  # don't use implicit string concatenation

[tool.isort]
profile = "black"

[tool.pyright]
typeCheckingMode = "basic"
analyzeUnannotatedFunctions = false
reportMissingImports = false
reportMissingTypeStubs = false
reportImportCycles = false

reportDuplicateImport = "error"

pythonVersion = "3.8"
pythonPlatform = "Linux"

[tool.ruff]
select = [
    "ARG",  # flake8-unused-arguments
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90",  # mccabe
    "D",  # pydocstyle
    "E",  # pycodestyle errors
    "ERA",  # eradicate
    "F",  # pyflakes
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "NPY",  # numpy
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PT",  # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # ruff specials
    "S",  # flake8-bandit
    "SIM",  # flake8-simplify
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TID",  # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",  # pycodestyle warnings
]
ignore = [
    "D100",  # missing docstring in public module
    "D101",  # missing docstring in public class
    "D102",  # missing docstring in public method
    "D104",  # missing docstring in public package
    "D107",  # missing docstring in __init__
    "D211",  # no-blank-line-before-class (incompatible with D203)
    "D213",  # multiline-summary-second-line (incompatible with D212)
    "S311",  # suspicious-non-cryptographic-random-usage
    "SIM117",  # multiple-with-statements
]
line-length = 100
target-version = 'py38'

[tool.ruff.per-file-ignores]
"examples/*.py" = [
    "T201",  # allow prints
]
"scripts/*.py" = [
    "T201",  # allow prints
]
"test/**/*.py" = [
    "S101",  # allow assertions
    "D205",  # allow multiline docstring summaries
    "PT011",  # allow pytest.raises without match=
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.coverage.report]
fail_under = 96

[tool.poe.tasks.test]
shell = """
coverage run ${cov_opts} -m pytest
coverage report
"""

[[tool.poe.tasks.test.args]]
name = "cov_opts"
default = ""

[tool.poe.tasks.format]
shell = """
black .
pyproject-fmt .
"""

[tool.poe.tasks.format_check]
shell = """
black --check .
pyproject-fmt --check .
"""

[tool.poe.tasks]
ruff = "ruff check ."
mypy = "mypy ."
lint = ["mypy", "ruff"]
docs = "sphinx-build -b html -W docs docs/_build"
all = ["test", "lint", "docs"]
