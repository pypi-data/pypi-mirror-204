# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import audience_pb2 as audience__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class AudienceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAudience = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/GetAudience',
                request_serializer=audience__pb2.GetAudienceRequest.SerializeToString,
                response_deserializer=audience__pb2.Audience.FromString,
                )
        self.GetAudiences = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/GetAudiences',
                request_serializer=audience__pb2.GetAudiencesRequest.SerializeToString,
                response_deserializer=audience__pb2.GetAudiencesResponse.FromString,
                )
        self.CreateAudience = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/CreateAudience',
                request_serializer=audience__pb2.Audience.SerializeToString,
                response_deserializer=audience__pb2.Audience.FromString,
                )
        self.PutAudience = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/PutAudience',
                request_serializer=audience__pb2.Audience.SerializeToString,
                response_deserializer=audience__pb2.Audience.FromString,
                )
        self.DeleteAudience = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/DeleteAudience',
                request_serializer=audience__pb2.DeleteAudienceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class AudienceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAudience(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAudiences(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAudience(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutAudience(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAudience(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AudienceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAudience': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAudience,
                    request_deserializer=audience__pb2.GetAudienceRequest.FromString,
                    response_serializer=audience__pb2.Audience.SerializeToString,
            ),
            'GetAudiences': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAudiences,
                    request_deserializer=audience__pb2.GetAudiencesRequest.FromString,
                    response_serializer=audience__pb2.GetAudiencesResponse.SerializeToString,
            ),
            'CreateAudience': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAudience,
                    request_deserializer=audience__pb2.Audience.FromString,
                    response_serializer=audience__pb2.Audience.SerializeToString,
            ),
            'PutAudience': grpc.unary_unary_rpc_method_handler(
                    servicer.PutAudience,
                    request_deserializer=audience__pb2.Audience.FromString,
                    response_serializer=audience__pb2.Audience.SerializeToString,
            ),
            'DeleteAudience': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAudience,
                    request_deserializer=audience__pb2.DeleteAudienceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calixa.domain.audience.AudienceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AudienceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAudience(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/GetAudience',
            audience__pb2.GetAudienceRequest.SerializeToString,
            audience__pb2.Audience.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAudiences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/GetAudiences',
            audience__pb2.GetAudiencesRequest.SerializeToString,
            audience__pb2.GetAudiencesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAudience(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/CreateAudience',
            audience__pb2.Audience.SerializeToString,
            audience__pb2.Audience.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutAudience(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/PutAudience',
            audience__pb2.Audience.SerializeToString,
            audience__pb2.Audience.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAudience(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/DeleteAudience',
            audience__pb2.DeleteAudienceRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
