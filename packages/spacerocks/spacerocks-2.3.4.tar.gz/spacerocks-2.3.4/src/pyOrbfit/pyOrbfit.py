# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyOrbfit
else:
    import _pyOrbfit

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class OBSERVATION_ARRAY(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _pyOrbfit.OBSERVATION_ARRAY_swiginit(self, _pyOrbfit.new_OBSERVATION_ARRAY(nelements))
    __swig_destroy__ = _pyOrbfit.delete_OBSERVATION_ARRAY

    def __getitem__(self, index):
        return _pyOrbfit.OBSERVATION_ARRAY___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyOrbfit.OBSERVATION_ARRAY___setitem__(self, index, value)

    def cast(self):
        return _pyOrbfit.OBSERVATION_ARRAY_cast(self)

    @staticmethod
    def frompointer(t):
        return _pyOrbfit.OBSERVATION_ARRAY_frompointer(t)

# Register OBSERVATION_ARRAY in _pyOrbfit:
_pyOrbfit.OBSERVATION_ARRAY_swigregister(OBSERVATION_ARRAY)

def OBSERVATION_ARRAY_frompointer(t):
    return _pyOrbfit.OBSERVATION_ARRAY_frompointer(t)

class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _pyOrbfit.doubleArray_swiginit(self, _pyOrbfit.new_doubleArray(nelements))
    __swig_destroy__ = _pyOrbfit.delete_doubleArray

    def __getitem__(self, index):
        return _pyOrbfit.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyOrbfit.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _pyOrbfit.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _pyOrbfit.doubleArray_frompointer(t)

# Register doubleArray in _pyOrbfit:
_pyOrbfit.doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _pyOrbfit.doubleArray_frompointer(t)

MAXOBS = _pyOrbfit.MAXOBS
DEFAULT_EPHEM_FILE = _pyOrbfit.DEFAULT_EPHEM_FILE
EPHEM_ENVIRON = _pyOrbfit.EPHEM_ENVIRON
DEFAULT_OBSERVATORY_FILE = _pyOrbfit.DEFAULT_OBSERVATORY_FILE
OBS_ENVIRON = _pyOrbfit.OBS_ENVIRON
MAX_SITES = _pyOrbfit.MAX_SITES
OBSCODE_SSBARY = _pyOrbfit.OBSCODE_SSBARY
OBSCODE_GEOCENTER = _pyOrbfit.OBSCODE_GEOCENTER
OBSCODE_ORBITAL = _pyOrbfit.OBSCODE_ORBITAL
DEFAULT_DTHETA = _pyOrbfit.DEFAULT_DTHETA
PI = _pyOrbfit.PI
TPI = _pyOrbfit.TPI
DTOR = _pyOrbfit.DTOR
GM = _pyOrbfit.GM
SSMASS = _pyOrbfit.SSMASS
ARCSEC = _pyOrbfit.ARCSEC
DAY = _pyOrbfit.DAY
SPEED_OF_LIGHT = _pyOrbfit.SPEED_OF_LIGHT
ECL = _pyOrbfit.ECL
TSTEP = _pyOrbfit.TSTEP
EARTHMASS = _pyOrbfit.EARTHMASS
class PBASIS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_pyOrbfit.PBASIS_a_get, _pyOrbfit.PBASIS_a_set)
    adot = property(_pyOrbfit.PBASIS_adot_get, _pyOrbfit.PBASIS_adot_set)
    b = property(_pyOrbfit.PBASIS_b_get, _pyOrbfit.PBASIS_b_set)
    bdot = property(_pyOrbfit.PBASIS_bdot_get, _pyOrbfit.PBASIS_bdot_set)
    g = property(_pyOrbfit.PBASIS_g_get, _pyOrbfit.PBASIS_g_set)
    gdot = property(_pyOrbfit.PBASIS_gdot_get, _pyOrbfit.PBASIS_gdot_set)

    def __init__(self):
        _pyOrbfit.PBASIS_swiginit(self, _pyOrbfit.new_PBASIS())
    __swig_destroy__ = _pyOrbfit.delete_PBASIS

# Register PBASIS in _pyOrbfit:
_pyOrbfit.PBASIS_swigregister(PBASIS)

class XVBASIS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pyOrbfit.XVBASIS_x_get, _pyOrbfit.XVBASIS_x_set)
    y = property(_pyOrbfit.XVBASIS_y_get, _pyOrbfit.XVBASIS_y_set)
    z = property(_pyOrbfit.XVBASIS_z_get, _pyOrbfit.XVBASIS_z_set)
    xdot = property(_pyOrbfit.XVBASIS_xdot_get, _pyOrbfit.XVBASIS_xdot_set)
    ydot = property(_pyOrbfit.XVBASIS_ydot_get, _pyOrbfit.XVBASIS_ydot_set)
    zdot = property(_pyOrbfit.XVBASIS_zdot_get, _pyOrbfit.XVBASIS_zdot_set)
    jd0 = property(_pyOrbfit.XVBASIS_jd0_get, _pyOrbfit.XVBASIS_jd0_set)

    def __init__(self):
        _pyOrbfit.XVBASIS_swiginit(self, _pyOrbfit.new_XVBASIS())
    __swig_destroy__ = _pyOrbfit.delete_XVBASIS

# Register XVBASIS in _pyOrbfit:
_pyOrbfit.XVBASIS_swigregister(XVBASIS)

class ORBIT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_pyOrbfit.ORBIT_a_get, _pyOrbfit.ORBIT_a_set)
    e = property(_pyOrbfit.ORBIT_e_get, _pyOrbfit.ORBIT_e_set)
    i = property(_pyOrbfit.ORBIT_i_get, _pyOrbfit.ORBIT_i_set)
    lan = property(_pyOrbfit.ORBIT_lan_get, _pyOrbfit.ORBIT_lan_set)
    aop = property(_pyOrbfit.ORBIT_aop_get, _pyOrbfit.ORBIT_aop_set)
    T = property(_pyOrbfit.ORBIT_T_get, _pyOrbfit.ORBIT_T_set)
    ma = property(_pyOrbfit.ORBIT_ma_get, _pyOrbfit.ORBIT_ma_set)

    def __init__(self):
        _pyOrbfit.ORBIT_swiginit(self, _pyOrbfit.new_ORBIT())
    __swig_destroy__ = _pyOrbfit.delete_ORBIT

# Register ORBIT in _pyOrbfit:
_pyOrbfit.ORBIT_swigregister(ORBIT)

class date_time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    y = property(_pyOrbfit.date_time_y_get, _pyOrbfit.date_time_y_set)
    mo = property(_pyOrbfit.date_time_mo_get, _pyOrbfit.date_time_mo_set)
    d = property(_pyOrbfit.date_time_d_get, _pyOrbfit.date_time_d_set)
    h = property(_pyOrbfit.date_time_h_get, _pyOrbfit.date_time_h_set)
    mn = property(_pyOrbfit.date_time_mn_get, _pyOrbfit.date_time_mn_set)
    s = property(_pyOrbfit.date_time_s_get, _pyOrbfit.date_time_s_set)

    def __init__(self):
        _pyOrbfit.date_time_swiginit(self, _pyOrbfit.new_date_time())
    __swig_destroy__ = _pyOrbfit.delete_date_time

# Register date_time in _pyOrbfit:
_pyOrbfit.date_time_swigregister(date_time)

class OBSERVATION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    thetax = property(_pyOrbfit.OBSERVATION_thetax_get, _pyOrbfit.OBSERVATION_thetax_set)
    dthetax = property(_pyOrbfit.OBSERVATION_dthetax_get, _pyOrbfit.OBSERVATION_dthetax_set)
    thetay = property(_pyOrbfit.OBSERVATION_thetay_get, _pyOrbfit.OBSERVATION_thetay_set)
    dthetay = property(_pyOrbfit.OBSERVATION_dthetay_get, _pyOrbfit.OBSERVATION_dthetay_set)
    obstime = property(_pyOrbfit.OBSERVATION_obstime_get, _pyOrbfit.OBSERVATION_obstime_set)
    obscode = property(_pyOrbfit.OBSERVATION_obscode_get, _pyOrbfit.OBSERVATION_obscode_set)
    xe = property(_pyOrbfit.OBSERVATION_xe_get, _pyOrbfit.OBSERVATION_xe_set)
    ye = property(_pyOrbfit.OBSERVATION_ye_get, _pyOrbfit.OBSERVATION_ye_set)
    ze = property(_pyOrbfit.OBSERVATION_ze_get, _pyOrbfit.OBSERVATION_ze_set)

    def __init__(self):
        _pyOrbfit.OBSERVATION_swiginit(self, _pyOrbfit.new_OBSERVATION())
    __swig_destroy__ = _pyOrbfit.delete_OBSERVATION

# Register OBSERVATION in _pyOrbfit:
_pyOrbfit.OBSERVATION_swigregister(OBSERVATION)


def kbo3d(pin, t, xout, yout, dx, dy, dz):
    return _pyOrbfit.kbo3d(pin, t, xout, yout, dx, dy, dz)

def earth3d(t, obscode, z):
    return _pyOrbfit.earth3d(t, obscode, z)

def earth_ssbary(jd, obscode, z):
    return _pyOrbfit.earth_ssbary(jd, obscode, z)

def body3d(t, body, z, vxyz):
    return _pyOrbfit.body3d(t, body, z, vxyz)

def bodycenter_ssbary(jd, xyz, body, vxyz):
    return _pyOrbfit.bodycenter_ssbary(jd, xyz, body, vxyz)

def geocenter_ssbary(jd, xyz):
    return _pyOrbfit.geocenter_ssbary(jd, xyz)

def observatory_geocenter(jd, obscode, xobs, yobs, zobs):
    return _pyOrbfit.observatory_geocenter(jd, obscode, xobs, yobs, zobs)

def read_observatories(fname):
    return _pyOrbfit.read_observatories(fname)

def print_help(h):
    return _pyOrbfit.print_help(h)

def zenith_horizon(obscode):
    return _pyOrbfit.zenith_horizon(obscode)

def zenith_angle(o):
    return _pyOrbfit.zenith_angle(o)

def is_visible(o):
    return _pyOrbfit.is_visible(o)

def kbo2d(pin, obs, dx, dy):
    return _pyOrbfit.kbo2d(pin, obs, dx, dy)

def kbo2d_linear(pin, obs, dx, dy):
    return _pyOrbfit.kbo2d_linear(pin, obs, dx, dy)

def scan_observation(inbuff, obs):
    return _pyOrbfit.scan_observation(inbuff, obs)

def fit_radec(fname, pbasis, orb):
    return _pyOrbfit.fit_radec(fname, pbasis, orb)

def set_mpc_dtheta(d):
    return _pyOrbfit.set_mpc_dtheta(d)

def set_ephem_file(fname):
    return _pyOrbfit.set_ephem_file(fname)

def set_observatory_file(fname):
    return _pyOrbfit.set_observatory_file(fname)

def read_options(iarg, argc, argv):
    return _pyOrbfit.read_options(iarg, argc, argv)

def prelim_fit(obsarray, nobs, pout, covar):
    return _pyOrbfit.prelim_fit(obsarray, nobs, pout, covar)

def predict_posn(pin, covar, obs, sigxy):
    return _pyOrbfit.predict_posn(pin, covar, obs, sigxy)

def print_matrix(fptr, matrix, xdim, ydim):
    return _pyOrbfit.print_matrix(fptr, matrix, xdim, ydim)

def fgets_nocomment(buffer, length, fptr, fpout):
    return _pyOrbfit.fgets_nocomment(buffer, length, fptr, fpout)

def eq_to_ec(ra_eq, dec_eq, partials):
    return _pyOrbfit.eq_to_ec(ra_eq, dec_eq, partials)

def xyz_eq_to_ec(x_eq, y_eq, z_eq, x_ec, y_ec, z_ec, partials):
    return _pyOrbfit.xyz_eq_to_ec(x_eq, y_eq, z_eq, x_ec, y_ec, z_ec, partials)

def ec_to_eq(lat_ec, lon_ec, partials):
    return _pyOrbfit.ec_to_eq(lat_ec, lon_ec, partials)

def xyz_ec_to_eq(x_ec, y_ec, z_ec, x_eq, y_eq, z_eq, partials):
    return _pyOrbfit.xyz_ec_to_eq(x_ec, y_ec, z_ec, x_eq, y_eq, z_eq, partials)

def ec_to_proj(lat_ec, lon_ec, x_proj, y_proj, lat0, lon0, partials):
    return _pyOrbfit.ec_to_proj(lat_ec, lon_ec, x_proj, y_proj, lat0, lon0, partials)

def proj_to_ec(x_proj, y_proj, lat0, lon0, partials):
    return _pyOrbfit.proj_to_ec(x_proj, y_proj, lat0, lon0, partials)

def xyz_ec_to_proj(x_ec, y_ec, z_ec, x_p, y_p, z_p, lat0, lon0, partials):
    return _pyOrbfit.xyz_ec_to_proj(x_ec, y_ec, z_ec, x_p, y_p, z_p, lat0, lon0, partials)

def xyz_proj_to_ec(x_p, y_p, z_p, x_ec, y_ec, z_ec, lat0, lon0, partials):
    return _pyOrbfit.xyz_proj_to_ec(x_p, y_p, z_p, x_ec, y_ec, z_ec, lat0, lon0, partials)

def pbasis_to_bary(p, xv, partials):
    return _pyOrbfit.pbasis_to_bary(p, xv, partials)

def matrix_multiply(m1, m2, mout, x1, y1, x2, y2):
    return _pyOrbfit.matrix_multiply(m1, m2, mout, x1, y1, x2, y2)

def orbitElements(xv, orb):
    return _pyOrbfit.orbitElements(xv, orb)

def elements_to_xv(o, jd, xv):
    return _pyOrbfit.elements_to_xv(o, jd, xv)

def elements_to_pbasis(o, jd, obscode, p):
    return _pyOrbfit.elements_to_pbasis(o, jd, obscode, p)

def covar_map(covar_in, derivs, covar_out, kin, kout):
    return _pyOrbfit.covar_map(covar_in, derivs, covar_out, kin, kout)

def date_to_jd(date):
    return _pyOrbfit.date_to_jd(date)

def aei_derivs(xv, daei_dxv):
    return _pyOrbfit.aei_derivs(xv, daei_dxv)

def elongation(obs):
    return _pyOrbfit.elongation(obs)

def opposition_angle(obs):
    return _pyOrbfit.opposition_angle(obs)

def fake_observation(p, obs):
    return _pyOrbfit.fake_observation(p, obs)

def flatten_cov(cov, ndim, cov1d):
    return _pyOrbfit.flatten_cov(cov, ndim, cov1d)

def unflatten_cov(cov1d, ndim, cov):
    return _pyOrbfit.unflatten_cov(cov1d, ndim, cov)

def dmatrix(nrl, nrh, ncl, nch):
    return _pyOrbfit.dmatrix(nrl, nrh, ncl, nch)

def dvector(nl, nh):
    return _pyOrbfit.dvector(nl, nh)

def read_radec(*args):
    return _pyOrbfit.read_radec(*args)

def fit_observations(obsarray, nobs, p, covar, logfile):
    return _pyOrbfit.fit_observations(obsarray, nobs, p, covar, logfile)

def add_to_obsarray(*args):
    return _pyOrbfit.add_to_obsarray(*args)

def deghms(degr):
    return _pyOrbfit.deghms(degr)

cvar = _pyOrbfit.cvar

