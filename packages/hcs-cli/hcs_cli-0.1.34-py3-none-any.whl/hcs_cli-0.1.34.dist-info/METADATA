Metadata-Version: 2.1
Name: hcs-cli
Version: 0.1.34
Summary: Horizon Cloud Service CLI
Author-email: Nanw1103 <nanw1103@gmail.com>
Project-URL: Homepage, https://github.com/nanw1103/hcs-cli
Project-URL: Bug Tracker, https://github.com/nanw1103/hcs-cli/issues
Project-URL: documentation, https://readthedocs.org
Project-URL: repository, https://github.com/nanw1103/hcs-cli
Project-URL: changelog, https://github.com/nanw1103/hcs-cli/blob/master/CHANGELOG.md
Keywords: Horizon,Horizon Cloud,Horizon Cloud Service,CLI
Classifier: Programming Language :: Python :: 3
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: click (>=8.1.3)
Requires-Dist: coloredlogs (>=15.0.1)
Requires-Dist: cryptography (>=38.0.0)
Requires-Dist: httpx (>=0.22.0)
Requires-Dist: packaging (>=21.3)
Requires-Dist: PyJWT (>=2.6.0)
Requires-Dist: pyOpenSSL (>=23.1.1)
Requires-Dist: PyYAML (>=6.0)

# hcs-cli

The hcs-cli is a CLI for Horizon Cloud Service, with the following considerations:
* Provides user-task oriented CLI, not API-CLI.
* Support multiple profiles.
* Based on [Context Programming](https://github.com/nanw1103/context-programming)

Confluence: https://confluence.eng.vmware.com/display/HCS/HCS+CLI

## Getting started
```
pip3 install hcs-cli
```

or if you already have hcs-cli installed, use the follow command to upgrade it:
```
hcs upgrade
```

Create a default profile:
```
hcs profile init
```


## Choose profile
List existing profiles
```
hcs profile list
```
Get details of a profile
```
hcs profile get <name>
```

Switch to a profile
```
hcs profile use <name>
```

You may directly edit a profile. The following command shows the profile file path:
```
hcs profile file <name>
```
### Auth related commands

Get the auth token that can be used as the bearer token for REST API call.
```
hcs auth
```

Get details of the configured auth token, e.g. permissions & orgs
```
hcs auth --details
```

### Examples

Each service has its own sub-command. Take PKI service as example, to request a resource certificate:
```
hcs pki sign-resource-cert my-res1
```

LCM command examples
```
hcs lcm template create < payload/lcm/zero.json
hcs lcm template wait --timeout=1m10s <template-id>
hcs lcm template list --type ZEROCLOUD | jq ".|map(.id)"
hcs lcm template get <template-id>
hcs lcm template delete <template-id>
hcs lcm provider list --type ZEROCLOUD
```
