Metadata-Version: 2.1
Name: abilian-devtools
Version: 0.5.1
Summary: A curated set of dependencies for quality software development
Home-page: https://github.com/abilian/abilian-devtools
License: MIT
Keywords: qa,testing,linting,typechecking,security,supply chain
Author: Stefane Fermigier
Author-email: sf@abilian.com
Requires-Python: >=3.9,<4.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: black
Requires-Dist: cleez (>=0.1.8,<0.2.0)
Requires-Dist: deptry
Requires-Dist: docformatter
Requires-Dist: flake8 (>=6,<7)
Requires-Dist: flake8-assertive
Requires-Dist: flake8-bandit
Requires-Dist: flake8-breakpoint
Requires-Dist: flake8-cognitive-complexity
Requires-Dist: flake8-datetimez
Requires-Dist: flake8-functions
Requires-Dist: flake8-if-expr
Requires-Dist: flake8-isort
Requires-Dist: flake8-logging-format
Requires-Dist: flake8-mutable
Requires-Dist: flake8-no-pep420
Requires-Dist: flake8-pep3101
Requires-Dist: flake8-pep585
Requires-Dist: flake8-pep604
Requires-Dist: flake8-pytest
Requires-Dist: flake8-pytest-style
Requires-Dist: flake8-super
Requires-Dist: flake8-super-call
Requires-Dist: flake8-tidy-imports
Requires-Dist: flake8-tuple
Requires-Dist: invoke (>=2.0.0,<3.0.0)
Requires-Dist: isort
Requires-Dist: mypy
Requires-Dist: nox
Requires-Dist: pip
Requires-Dist: pip-audit
Requires-Dist: pre-commit
Requires-Dist: profilehooks
Requires-Dist: pyright
Requires-Dist: pytest (>=7,<8)
Requires-Dist: pytest-cov (>=4,<5)
Requires-Dist: pytest-random-order
Requires-Dist: pytest-xdist
Requires-Dist: reuse
Requires-Dist: ruff
Requires-Dist: safety
Requires-Dist: tomlkit (>=0.11.6,<0.12.0)
Requires-Dist: vulture
Project-URL: Repository, https://github.com/abilian/abilian-devtools
Description-Content-Type: text/markdown

Abilian Development Tools
=========================

What this is?
-------------

This is a curated, and opiniated, collection of best-of-breed Python development tools:

- Formatters (`black`, `isort`, `docformatter`)
- Testing frameworks (`pytest` and friends, `nox`)
- Style checkers (`ruff`, `flake8` and friends)
- Type checkers (`mypy`, `pyright`)
- Supply chain audit (`pip-audit`, `safety`, `reuse`, `vulture`, `deptry`)
- And more.

Usage
-----

Instead of having to track all the 40+ projects and plugins we have curated, you just need to add `abilian-devtools = '*'` in your project's `requirements.in` or `pyproject.toml`.

You still need to properly configure and call them in your own projects.

For example configuration, see, for instance, <https://github.com/abilian/nua> (`Makefile`, `pyproject.toml`, `setup.cfg`).


CLI helper
----------

As a bonus, we're providing a CLI called `adt` which can help you get started:

```
$ adt --help
Usage: adt [OPTIONS] COMMAND [ARGS]...

Abilian Dev Tool command-line runner.

╭─ Options ────────────────────────────────────────────────────────────────────╮
│ --install-completion        [bash|zsh|fish|powershe  Install completion for  │
│                             ll|pwsh]                 the specified shell.    │
│                                                      [default: None]         │
│ --show-completion           [bash|zsh|fish|powershe  Show completion for the │
│                             ll|pwsh]                 specified shell, to     │
│                                                      copy it or customize    │
│                                                      the installation.       │
│                                                      [default: None]         │
│ --help                                               Show this message and   │
│                                                      exit.                   │
╰──────────────────────────────────────────────────────────────────────────────╯
╭─ Commands ───────────────────────────────────────────────────────────────────╮
│ all               Run everything (linters and tests).                        │
│ audit             Run security audit.                                        │
│ bump-version      Bump version in pyproject.toml, commit & apply tag.        │
│ check             Run checker/linters on specified files or directories.     │
│ clean             Cleanup cruft.                                             │
│ security-check    Run security checks (deprecated, use 'audit' instead).     │
│ test              Run tests.                                                 │
╰──────────────────────────────────────────────────────────────────────────────╯
```

