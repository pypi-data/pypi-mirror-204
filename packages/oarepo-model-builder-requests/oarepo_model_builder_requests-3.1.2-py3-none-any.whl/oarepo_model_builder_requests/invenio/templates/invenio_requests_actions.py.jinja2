from invenio_records_resources.proxies import current_service_registry
from invenio_records_resources.services.uow import RecordCommitOp
from invenio_requests.resolvers.registry import ResolverRegistry
{% for request_data in requests.values() %}
{% if request_data.approve_action_generate %}
{% for approve_action_base in request_data.approve_action_bases %}
from {{ approve_action_base|package_name }} import {{ approve_action_base|base_name }}
{% endfor %}
{% endif %}
{% endfor %}

{% for request_data in requests.values() %}
{% if request_data.approve_action_generate %}
class {{ request_data.approve_action_class|base_name }}{% if request_data.approve_action_bases %}({% for approve_action_base in request_data.approve_action_bases%}{{ approve_action_base|base_name }}{{ ", " if not loop.last else "" }}{% endfor %}){% endif %}:

    def execute(self, identity, uow):
        topic = self.request.topic.resolve()
        ## todo - do something with the record
        # topic["status"] = "accepted"
        ##
        for resolver in ResolverRegistry.get_registered_resolvers():
            if resolver.matches_entity(topic):
                topic_service = current_service_registry.get(resolver._service_id)
                break
        else:
            raise KeyError(f"topic {topic} service not found")
        uow.register(RecordCommitOp(topic, topic_service.indexer))
        super().execute(identity, uow)
{% endif %}
{% endfor %}