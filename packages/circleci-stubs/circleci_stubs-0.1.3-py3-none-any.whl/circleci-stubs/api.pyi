from _typeshed import Incomplete
from circleci.error import BadKeyError as BadKeyError, BadVerbError as BadVerbError, InvalidFilterError as InvalidFilterError

class Api:
    token: Incomplete
    url: Incomplete
    def __init__(self, token, url: str = ...) -> None: ...
    def get_user_info(self): ...
    def get_projects(self): ...
    def follow_project(self, username, project, vcs_type: str = ...): ...
    def get_project_build_summary(self, username, project, limit: int = ..., offset: int = ..., status_filter: Incomplete | None = ..., branch: Incomplete | None = ..., vcs_type: str = ...): ...
    def get_recent_builds(self, limit: int = ..., offset: int = ...): ...
    def get_build_info(self, username, project, build_num, vcs_type: str = ...): ...
    def get_artifacts(self, username, project, build_num, vcs_type: str = ...): ...
    def get_latest_artifact(self, username, project, branch: Incomplete | None = ..., status_filter: str = ..., vcs_type: str = ...): ...
    def download_artifact(self, url, destdir: Incomplete | None = ..., filename: Incomplete | None = ...): ...
    def retry_build(self, username, project, build_num, ssh: bool = ..., vcs_type: str = ...): ...
    def cancel_build(self, username, project, build_num, vcs_type: str = ...): ...
    def add_ssh_user(self, username, project, build_num, vcs_type: str = ...): ...
    def trigger_build(self, username, project, branch: str = ..., revision: Incomplete | None = ..., tag: Incomplete | None = ..., parallel: Incomplete | None = ..., params: Incomplete | None = ..., vcs_type: str = ...): ...
    def add_ssh_key(self, username, project, ssh_key, vcs_type: str = ..., hostname: Incomplete | None = ...): ...
    def list_checkout_keys(self, username, project, vcs_type: str = ...): ...
    def create_checkout_key(self, username, project, key_type, vcs_type: str = ...): ...
    def get_checkout_key(self, username, project, fingerprint, vcs_type: str = ...): ...
    def delete_checkout_key(self, username, project, fingerprint, vcs_type: str = ...): ...
    def clear_cache(self, username, project, vcs_type: str = ...): ...
    def add_heroku_key(self, apikey): ...
    def get_test_metadata(self, username, project, build_num, vcs_type: str = ...): ...
    def list_envvars(self, username, project, vcs_type: str = ...): ...
    def add_envvar(self, username, project, name, value, vcs_type: str = ...): ...
    def get_envvar(self, username, project, name, vcs_type: str = ...): ...
    def delete_envvar(self, username, project, name, vcs_type: str = ...): ...
