import re


def get_html_data(element: str) -> str:
    # assuming there is no child element
    return element.split(">")[1].split("<")[0]


def parse_severity(severity):
    if not severity:
        return "", ""

    severity_numeric = float(severity.split()[0])
    severity_description = (
        f" ({' '.join(severity.split()[1:])})"
        if len(severity.split()) > 1
        else ""
    )
    new_severity = f"CVSS {severity_numeric} - "

    if severity_numeric == 0:
        return new_severity + "Informational", "severity-none"
    if severity_numeric < 3.9:
        return new_severity + "Low" + severity_description, "severity-low"
    if severity_numeric < 6.9:
        return (
            new_severity + "Medium" + severity_description,
            "severity-medium",
        )
    if severity_numeric < 8.9:
        return new_severity + "High" + severity_description, "severity-high"

    return (
        new_severity + "Critical" + severity_description,
        "severity-critical",
    )


def parse_appendix(html: str):
    lines = html.splitlines()
    for line in lines:
        m = re.search(r'<h[1,2] id="([^"]+)">([^<]+)</h[1,2]>', line)
        if m:
            return {
                "title": m.groups()[1],
                "slug": m.groups()[0],
                "html": html,
            }

    raise RuntimeError(
        "Heading level one or two not found in the appendix source file."
    )


def parse_html(html: str):
    lines = html.splitlines()
    vuln = {
        "name": [],
        "severity": [],
        "severity_class": [],
        "impact": [],
        "location": [],
        "role": [],
        "description": [],
        "evidence": [],
        "remedation": [],
        "references": [],
    }
    next_line = ""

    for line in lines:
        if line == "<h1>Vulnerability report</h1>":
            continue
        if line[:5] == "<!-- ":
            continue
        if line == "<h2>name</h2>":
            next_line = "name"
        elif line == "<h2>severity</h2>":
            next_line = "severity"
        elif line == "<h2>impact</h2>":
            next_line = "impact"
        elif line == "<h2>role</h2>":
            next_line = "role"
        elif line == "<h2>location</h2>":
            next_line = "location"
        elif line == "<h2>description</h2>":
            next_line = "description"
        elif line == "<h2>evidence</h2>":
            next_line = "evidence"
        elif line == "<h2>remedation</h2>":
            next_line = "remedation"
        elif line == "<h2>references</h2>":
            next_line = "references"
        else:
            if next_line == "name":
                line = get_html_data(line)  # move title out of the <p> block
            if next_line == "severity":
                line, css_class = parse_severity(get_html_data(line))
                line = f"<span class={css_class}>{line}</span>"
                vuln["severity_class"].append(css_class)
            vuln[next_line].append(line)

    for k, v in vuln.items():
        vuln[k] = "\n".join(v)

    return vuln
