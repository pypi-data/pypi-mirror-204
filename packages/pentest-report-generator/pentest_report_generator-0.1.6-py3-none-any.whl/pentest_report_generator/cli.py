import datetime
import json
import os
import pathlib
import shutil
from random import sample
from string import ascii_letters

import click
import jinja2
import markdown
import weasyprint
from slugify import slugify
from weasyprint.text.fonts import FontConfiguration

import pentest_report_generator.core as core

BASE_PATH = pathlib.Path(os.path.abspath(os.path.dirname(__file__)))
PROJECT_NAME = "pypentestreport"
CACHE_HOME_DIR = pathlib.Path.home().joinpath("." + PROJECT_NAME)


def ensure_home_cache_directory_exists() -> None:
    if not CACHE_HOME_DIR.exists():
        os.mkdir(CACHE_HOME_DIR)


def create_cache_directory() -> pathlib.Path:
    ensure_home_cache_directory_exists()

    cache_dir_str = datetime.datetime.now().strftime(
        "%Y-%m-%d-%H:%M:%S-"
    ) + "".join(x for x in sample(ascii_letters, 10))
    cache_dir = CACHE_HOME_DIR.joinpath(pathlib.Path(cache_dir_str))
    if cache_dir.exists():
        raise RuntimeError(
            "Cache dir exists"
        )  # this should be handled differently
    os.mkdir(cache_dir)
    os.mkdir(cache_dir.joinpath("assets"))

    return pathlib.Path(cache_dir)


def copy_assets_to_cache_directory(
    sources: pathlib.Path, cache: pathlib.Path
) -> None:
    if sources.is_dir():
        shutil.copytree(
            sources.joinpath("assets"),
            cache.joinpath("assets"),
            dirs_exist_ok=True,
        )

    shutil.copytree(
        BASE_PATH.joinpath("assets"),
        cache.joinpath("assets"),
        dirs_exist_ok=True,
    )


def load_content(name: str, sources_dir: pathlib.Path) -> str:
    markdown_path = sources_dir.joinpath(name + ".md")
    html_path = sources_dir.joinpath(name + ".html")

    if markdown_path.exists():
        return markdown.markdown(
            markdown_path.read_text(),
            extensions=[
                "sane_lists",
                "codehilite",
                "fenced_code",
                "attr_list",
                "extra",
            ],
        )

    if html_path.exists():
        return html_path.read_text()

    raise FileNotFoundError()


def load_vulnerabilities(path):
    vulnerabilities = []

    for file in list(path.iterdir()):
        if file.is_file() and file.suffix == ".md":
            html = markdown.markdown(
                file.read_text(),
                extensions=["sane_lists", "codehilite", "fenced_code"],
            )
            vulnerabilities.append(core.parse_html(html))

    vulnerabilities = sorted(
        vulnerabilities,
        key=lambda x: float(x["severity"].split()[2]),
        reverse=True,
    )

    critical_high_vulnerabilities = [
        v
        for v in vulnerabilities
        if v["severity_class"] in ["severity-critical", "severity-high"]
    ]
    medium_vulnerabilities = [
        v for v in vulnerabilities if v["severity_class"] == "severity-medium"
    ]
    low_vulnerabilities = [
        v for v in vulnerabilities if v["severity_class"] == "severity-low"
    ]
    info_vulnerabilities = [
        v for v in vulnerabilities if v["severity_class"] == "severity-none"
    ]

    return (
        critical_high_vulnerabilities,
        medium_vulnerabilities,
        low_vulnerabilities,
        info_vulnerabilities,
    )


def load_appendixes(path):
    appendixes = []
    for file in sorted(list(path.iterdir()), key=lambda x: x.name):
        if file.is_file() and file.suffix == ".md":
            html = markdown.markdown(
                file.read_text(),
                extensions=["sane_lists", "codehilite", "fenced_code", "toc"],
            )
            appendixes.append(core.parse_appendix(html))

    return appendixes


@click.command()
@click.option(
    "-s",
    "--sources",
    type=click.Path(file_okay=False, exists=True),
    help="Directory with .md source files",
    required=True,
)
@click.option(
    "-o",
    "--output",
    type=click.Path(file_okay=False, exists=True),
    help="Directory to write output files",
    required=True,
)
@click.option(
    "-c",
    "--compress",
    is_flag=True,
    default=False,
    help="Create .zip archive with the HTML source files",
)
@click.option(
    "--only-pdf", is_flag=True, default=False, help="Do not output HTML files"
)
@click.option(
    "--only-html", is_flag=True, default=False, help="Do not output PDF file"
)
def cli(
    sources: str, output: str, compress: bool, only_pdf: bool, only_html: bool
) -> None:
    if compress and only_pdf:
        pass  # this should not happen, handle this and exit

    sources_dir = pathlib.Path(sources)
    output_dir = pathlib.Path(output)

    vulnerabilities_dir = sources_dir.joinpath("vulnerabilities")
    appendix_dix = sources_dir.joinpath("appendix")

    cache_directory = create_cache_directory()
    copy_assets_to_cache_directory(vulnerabilities_dir, cache_directory)
    copy_assets_to_cache_directory(appendix_dix, cache_directory)

    env = jinja2.Environment(
        # path for loading jinja2 templates
        loader=jinja2.FileSystemLoader(searchpath=BASE_PATH)
    )
    # this allows us to use slugify inside jinja2 templates
    env.globals["slugify"] = slugify

    (
        critical_high_vulnerabilities,
        medium_vulnerabilities,
        low_vulnerabilities,
        info_vulnerabilities,
    ) = load_vulnerabilities(vulnerabilities_dir)

    appendixes = load_appendixes(appendix_dix)

    first_page = load_content("first-page", sources_dir)

    other_variables = json.loads(
        sources_dir.joinpath("variables.json").read_text()
    )

    vars = {
        "critical_high_vulnerabilities": {
            "title": "Critical/High severity findings",
            "vulns": critical_high_vulnerabilities,
        },
        "medium_vulnerabilities": {
            "title": "Medium severity findings",
            "vulns": medium_vulnerabilities,
        },
        "low_vulnerabilities": {
            "title": "Low severity findings",
            "vulns": low_vulnerabilities,
        },
        "info_vulnerabilities": {
            "title": "Informational findings",
            "vulns": info_vulnerabilities,
        },
        "appendixes": appendixes,
        "executive_summary": load_content("executive-summary", sources_dir),
        "disclaimer": load_content("disclaimer", sources_dir),
        "scope": load_content("scope", sources_dir),
        "technical_summary": load_content("technical-summary", sources_dir),
        "methodology": load_content("methodology", sources_dir),
        "first_page": first_page,
        **other_variables,
    }

    template = env.get_template("template.html.jinja2")

    # fill HTML template with data
    doc = template.render(**vars)

    # write the HTML to a file
    cache_directory.joinpath("index.html").write_text(doc)

    # render the HTMl to a PDF
    if not only_html:
        pdf = weasyprint.HTML(
            string=doc,
            url_fetcher=weasyprint.default_url_fetcher,
            base_url=str(cache_directory),
        )

        # save the PDF to a file
        pdf.write_pdf(
            target=str(output_dir.joinpath("pentest-report.pdf")),
            font_config=FontConfiguration(),
            presentational_hints=True,
        )

    if not only_pdf and compress:
        # compress the HTML source files
        shutil.make_archive(
            base_name=str(output_dir.joinpath("pentest-report")),
            format="zip",
            root_dir=str(cache_directory),
        )

    elif not only_pdf:
        shutil.copytree(
            cache_directory, output_dir.joinpath("HTML"), dirs_exist_ok=True
        )

    shutil.rmtree(cache_directory)

    click.echo("Success!")
