# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: fx/legacy/gravity/v1/types.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from x.gogoproto import gogo_pb2 as gogoproto_dot_gogo__pb2
from google.protobuf import any_pb2 as google_dot_protobuf_dot_any__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n fx/legacy/gravity/v1/types.proto\x12\rfx.gravity.v1\x1a\x14gogoproto/gogo.proto\x1a\x19google/protobuf/any.proto\"5\n\x0f\x42ridgeValidator\x12\r\n\x05power\x18\x01 \x01(\x04\x12\x13\n\x0b\x65th_address\x18\x02 \x01(\t\"X\n\x06Valset\x12\r\n\x05nonce\x18\x01 \x01(\x04\x12/\n\x07members\x18\x02 \x03(\x0b\x32\x1e.fx.gravity.v1.BridgeValidator\x12\x0e\n\x06height\x18\x03 \x01(\x04\"T\n\x1fLastObservedEthereumBlockHeight\x12\x17\n\x0f\x66x_block_height\x18\x01 \x01(\x04\x12\x18\n\x10\x65th_block_height\x18\x02 \x01(\x04\",\n\x0c\x45RC20ToDenom\x12\r\n\x05\x65rc20\x18\x01 \x01(\t\x12\r\n\x05\x64\x65nom\x18\x02 \x01(\t\"^\n\nERC20Token\x12\x10\n\x08\x63ontract\x18\x01 \x01(\t\x12>\n\x06\x61mount\x18\x02 \x01(\tB.\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\xde\x1f\x00\"c\n\x0b\x41ttestation\x12\x10\n\x08observed\x18\x01 \x01(\x08\x12\r\n\x05votes\x18\x02 \x03(\t\x12\x0e\n\x06height\x18\x03 \x01(\x04\x12#\n\x05\x63laim\x18\x04 \x01(\x0b\x32\x14.google.protobuf.Any\"\xb1\x01\n\x0fOutgoingTxBatch\x12\x13\n\x0b\x62\x61tch_nonce\x18\x01 \x01(\x04\x12\x15\n\rbatch_timeout\x18\x02 \x01(\x04\x12\x37\n\x0ctransactions\x18\x03 \x03(\x0b\x32!.fx.gravity.v1.OutgoingTransferTx\x12\x16\n\x0etoken_contract\x18\x04 \x01(\t\x12\r\n\x05\x62lock\x18\x05 \x01(\x04\x12\x12\n\nfeeReceive\x18\x06 \x01(\t\"\xa4\x01\n\x12OutgoingTransferTx\x12\n\n\x02id\x18\x01 \x01(\x04\x12\x0e\n\x06sender\x18\x02 \x01(\t\x12\x14\n\x0c\x64\x65st_address\x18\x03 \x01(\t\x12.\n\x0b\x65rc20_token\x18\x04 \x01(\x0b\x32\x19.fx.gravity.v1.ERC20Token\x12,\n\terc20_fee\x18\x05 \x01(\x0b\x32\x19.fx.gravity.v1.ERC20Token\"\xc0\x01\n\tBatchFees\x12\x16\n\x0etoken_contract\x18\x01 \x01(\t\x12\x42\n\ntotal_fees\x18\x02 \x01(\tB.\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\xde\x1f\x00\x12\x11\n\ttotal_txs\x18\x03 \x01(\x04\x12\x44\n\x0ctotal_amount\x18\x04 \x01(\tB.\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\xde\x1f\x00\"f\n\x0bMinBatchFee\x12\x16\n\x0etoken_contract\x18\x01 \x01(\t\x12?\n\x07\x62\x61seFee\x18\x02 \x01(\tB.\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\xde\x1f\x00*\x9e\x01\n\tClaimType\x12\x1a\n\x16\x43LAIM_TYPE_UNSPECIFIED\x10\x00\x12\x16\n\x12\x43LAIM_TYPE_DEPOSIT\x10\x01\x12\x17\n\x13\x43LAIM_TYPE_WITHDRAW\x10\x02\x12\x1f\n\x1b\x43LAIM_TYPE_ORIGINATED_TOKEN\x10\x03\x12\x1d\n\x19\x43LAIM_TYPE_VALSET_UPDATED\x10\x04\x1a\x04\x88\xa3\x1e\x00\x42.Z,github.com/functionx/fx-core/x/gravity/typesb\x06proto3')

_CLAIMTYPE = DESCRIPTOR.enum_types_by_name['ClaimType']
ClaimType = enum_type_wrapper.EnumTypeWrapper(_CLAIMTYPE)
CLAIM_TYPE_UNSPECIFIED = 0
CLAIM_TYPE_DEPOSIT = 1
CLAIM_TYPE_WITHDRAW = 2
CLAIM_TYPE_ORIGINATED_TOKEN = 3
CLAIM_TYPE_VALSET_UPDATED = 4


_BRIDGEVALIDATOR = DESCRIPTOR.message_types_by_name['BridgeValidator']
_VALSET = DESCRIPTOR.message_types_by_name['Valset']
_LASTOBSERVEDETHEREUMBLOCKHEIGHT = DESCRIPTOR.message_types_by_name['LastObservedEthereumBlockHeight']
_ERC20TODENOM = DESCRIPTOR.message_types_by_name['ERC20ToDenom']
_ERC20TOKEN = DESCRIPTOR.message_types_by_name['ERC20Token']
_ATTESTATION = DESCRIPTOR.message_types_by_name['Attestation']
_OUTGOINGTXBATCH = DESCRIPTOR.message_types_by_name['OutgoingTxBatch']
_OUTGOINGTRANSFERTX = DESCRIPTOR.message_types_by_name['OutgoingTransferTx']
_BATCHFEES = DESCRIPTOR.message_types_by_name['BatchFees']
_MINBATCHFEE = DESCRIPTOR.message_types_by_name['MinBatchFee']
BridgeValidator = _reflection.GeneratedProtocolMessageType('BridgeValidator', (_message.Message,), {
  'DESCRIPTOR' : _BRIDGEVALIDATOR,
  '__module__' : 'fx.legacy.gravity.v1.types_pb2'
  # @@protoc_insertion_point(class_scope:fx.gravity.v1.BridgeValidator)
  })
_sym_db.RegisterMessage(BridgeValidator)

Valset = _reflection.GeneratedProtocolMessageType('Valset', (_message.Message,), {
  'DESCRIPTOR' : _VALSET,
  '__module__' : 'fx.legacy.gravity.v1.types_pb2'
  # @@protoc_insertion_point(class_scope:fx.gravity.v1.Valset)
  })
_sym_db.RegisterMessage(Valset)

LastObservedEthereumBlockHeight = _reflection.GeneratedProtocolMessageType('LastObservedEthereumBlockHeight', (_message.Message,), {
  'DESCRIPTOR' : _LASTOBSERVEDETHEREUMBLOCKHEIGHT,
  '__module__' : 'fx.legacy.gravity.v1.types_pb2'
  # @@protoc_insertion_point(class_scope:fx.gravity.v1.LastObservedEthereumBlockHeight)
  })
_sym_db.RegisterMessage(LastObservedEthereumBlockHeight)

ERC20ToDenom = _reflection.GeneratedProtocolMessageType('ERC20ToDenom', (_message.Message,), {
  'DESCRIPTOR' : _ERC20TODENOM,
  '__module__' : 'fx.legacy.gravity.v1.types_pb2'
  # @@protoc_insertion_point(class_scope:fx.gravity.v1.ERC20ToDenom)
  })
_sym_db.RegisterMessage(ERC20ToDenom)

ERC20Token = _reflection.GeneratedProtocolMessageType('ERC20Token', (_message.Message,), {
  'DESCRIPTOR' : _ERC20TOKEN,
  '__module__' : 'fx.legacy.gravity.v1.types_pb2'
  # @@protoc_insertion_point(class_scope:fx.gravity.v1.ERC20Token)
  })
_sym_db.RegisterMessage(ERC20Token)

Attestation = _reflection.GeneratedProtocolMessageType('Attestation', (_message.Message,), {
  'DESCRIPTOR' : _ATTESTATION,
  '__module__' : 'fx.legacy.gravity.v1.types_pb2'
  # @@protoc_insertion_point(class_scope:fx.gravity.v1.Attestation)
  })
_sym_db.RegisterMessage(Attestation)

OutgoingTxBatch = _reflection.GeneratedProtocolMessageType('OutgoingTxBatch', (_message.Message,), {
  'DESCRIPTOR' : _OUTGOINGTXBATCH,
  '__module__' : 'fx.legacy.gravity.v1.types_pb2'
  # @@protoc_insertion_point(class_scope:fx.gravity.v1.OutgoingTxBatch)
  })
_sym_db.RegisterMessage(OutgoingTxBatch)

OutgoingTransferTx = _reflection.GeneratedProtocolMessageType('OutgoingTransferTx', (_message.Message,), {
  'DESCRIPTOR' : _OUTGOINGTRANSFERTX,
  '__module__' : 'fx.legacy.gravity.v1.types_pb2'
  # @@protoc_insertion_point(class_scope:fx.gravity.v1.OutgoingTransferTx)
  })
_sym_db.RegisterMessage(OutgoingTransferTx)

BatchFees = _reflection.GeneratedProtocolMessageType('BatchFees', (_message.Message,), {
  'DESCRIPTOR' : _BATCHFEES,
  '__module__' : 'fx.legacy.gravity.v1.types_pb2'
  # @@protoc_insertion_point(class_scope:fx.gravity.v1.BatchFees)
  })
_sym_db.RegisterMessage(BatchFees)

MinBatchFee = _reflection.GeneratedProtocolMessageType('MinBatchFee', (_message.Message,), {
  'DESCRIPTOR' : _MINBATCHFEE,
  '__module__' : 'fx.legacy.gravity.v1.types_pb2'
  # @@protoc_insertion_point(class_scope:fx.gravity.v1.MinBatchFee)
  })
_sym_db.RegisterMessage(MinBatchFee)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'Z,github.com/functionx/fx-core/x/gravity/types'
  _CLAIMTYPE._options = None
  _CLAIMTYPE._serialized_options = b'\210\243\036\000'
  _ERC20TOKEN.fields_by_name['amount']._options = None
  _ERC20TOKEN.fields_by_name['amount']._serialized_options = b'\332\336\037&github.com/cosmos/cosmos-sdk/types.Int\310\336\037\000'
  _BATCHFEES.fields_by_name['total_fees']._options = None
  _BATCHFEES.fields_by_name['total_fees']._serialized_options = b'\332\336\037&github.com/cosmos/cosmos-sdk/types.Int\310\336\037\000'
  _BATCHFEES.fields_by_name['total_amount']._options = None
  _BATCHFEES.fields_by_name['total_amount']._serialized_options = b'\332\336\037&github.com/cosmos/cosmos-sdk/types.Int\310\336\037\000'
  _MINBATCHFEE.fields_by_name['baseFee']._options = None
  _MINBATCHFEE.fields_by_name['baseFee']._serialized_options = b'\332\336\037&github.com/cosmos/cosmos-sdk/types.Int\310\336\037\000'
  _CLAIMTYPE._serialized_start=1221
  _CLAIMTYPE._serialized_end=1379
  _BRIDGEVALIDATOR._serialized_start=100
  _BRIDGEVALIDATOR._serialized_end=153
  _VALSET._serialized_start=155
  _VALSET._serialized_end=243
  _LASTOBSERVEDETHEREUMBLOCKHEIGHT._serialized_start=245
  _LASTOBSERVEDETHEREUMBLOCKHEIGHT._serialized_end=329
  _ERC20TODENOM._serialized_start=331
  _ERC20TODENOM._serialized_end=375
  _ERC20TOKEN._serialized_start=377
  _ERC20TOKEN._serialized_end=471
  _ATTESTATION._serialized_start=473
  _ATTESTATION._serialized_end=572
  _OUTGOINGTXBATCH._serialized_start=575
  _OUTGOINGTXBATCH._serialized_end=752
  _OUTGOINGTRANSFERTX._serialized_start=755
  _OUTGOINGTRANSFERTX._serialized_end=919
  _BATCHFEES._serialized_start=922
  _BATCHFEES._serialized_end=1114
  _MINBATCHFEE._serialized_start=1116
  _MINBATCHFEE._serialized_end=1218
# @@protoc_insertion_point(module_scope)
