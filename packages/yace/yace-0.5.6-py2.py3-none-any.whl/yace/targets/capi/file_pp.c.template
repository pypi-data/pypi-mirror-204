/**
 * {{ meta.project }}; Pretty Printer Implementation
 *
 * ------------------------------------------------------------------------------------------------
 * Copyright (C) {{ meta.author }}
 * SPDX-License-Identifier: {{ meta.lic }}
 *
 * @file {{ meta.prefix }}_pp.c
 * ------------------------------------------------------------------------------------------------
 * NOTE: This file is created using yace: https://github.com/safl/yace
 */
#include <lib{{ meta.prefix }}.h>

{%- for entity in entities %}
{%- if entity["cls"] in ["enum"] %}
const char *
{{ entity.sym }}_str(int enum_val)
{
	switch (enum_val) {
	{%- for member in entity.members %}
	case {{ member.sym }}:
		return "{{ member.sym }}";
	{%- endfor %}
	}

	return "ENOSYS";
}
{%- elif entity["cls"] in ["struct", "union"] %}
static int
{{ entity.sym }}_yaml(FILE *stream, const struct {{ entity.sym }} *obj, int flags)
{
	int wrtn = 0;

	wrtn += fprintf(stream, "{{ entity.sym }}:");

	if (!obj) {
		wrtn += fprintf(stream, " ~\n");
		return wrtn;
	}

        wrtn += fprintf(stream, "\n");
	{%- for token, member in zip(["obj->"] * len(entity.members), entity.members) recursive -%}
        {% set indent = loop.depth * 2 %}
        {% set accessor = token + member.sym %}

	{%- if member.cls in ["field", "fits"] and "rsvd" in member.sym -%}

        wrtn += fprintf(stream, "%*s{{ member.sym }}: RESERVED\n", {{ indent }}, "");

	{%- elif "invalid" in member.sym -%}

        wrtn += fprintf(stream, "%*s{{ member.sym }}: INVALID\n", {{ indent }}, "");

        {%- elif member.cls in ["field"] -%}

        wrtn += fprintf(stream, "%*s{{ member.sym }}: {{ member.fmt }}\n", {{ indent }}, "", {{ accessor }});

        {%- elif member.cls in ["bits"] -%}
	
        wrtn += fprintf(stream, "%*s{{ member.sym }}: 0x%x\n", {{ indent }}, "", {{ accessor }});
 
        {%- elif member.cls in ["union", "struct", "bitfield"] -%}

        wrtn += fprintf(stream, "%*s{{ member.sym }}:\n", {{ indent }}, "");
	{{ loop(zip([accessor + "."] * len(member.members), member.members)) }}

	{%- else -%}
        // What is this? {{ member.cls }}
	{%- endif -%}
	{% endfor %}

	return wrtn;
}

static int
{{ entity.sym }}_json(FILE *stream, const struct {{ entity.sym }} *obj, int flags)
{
	int wrtn = 0;

	if (!obj) {
		wrtn += fprintf(stream, "{ \"{{ entity.sym }}\": null }\n");
		return wrtn;
	}
        wrtn += fprintf(stream, "{\n%*s\"{{ entity.sym }}\": {\n", 2, "");
	{%- for token, member in zip(["obj->"] * len(entity.members), entity.members) recursive -%}
        {% set indent = (loop.depth + 1) * 2 %}
        {% set accessor = token + member.sym %}

	{%- if member.cls in ["field"] and "rsvd" in member.sym -%}
        wrtn += fprintf(stream, "%*s\"{{ member.sym }}\": \"RESERVED\"", {{ indent }}, "");

	{%- elif "invalid" in member.sym -%}
        wrtn += fprintf(stream, "%*s{{ member.sym }}: \"INVALID\"", {{ indent }}, "");

	{%- elif member.cls in ["field"] and member.typ.integer -%}
        wrtn += fprintf(stream, "%*s\"{{ member.sym }}\": %"PRIu{{ member.typ.width }}"", {{ indent }}, "", {{ accessor }});

	{%- elif member.cls in ["field"] -%}
        wrtn += fprintf(stream, "%*s\"{{ member.sym }}\": \"%s\"", {{ indent }}, "", {{ accessor }});

        {%- elif member.cls in ["bits"] -%}
        wrtn += fprintf(stream, "%*s\"{{ member.sym }}\": %u", {{ indent }}, "", {{ accessor }});
        {%- elif member.cls in ["union", "struct", "bitfield"] -%}
	
        wrtn += fprintf(stream, "%*s\"{{ member.sym }}\": {\n", {{ indent }}, "");
	{{ loop(zip([accessor + "."] * len(member.members), member.members)) }}
        wrtn += fprintf(stream, "%*s}", {{ indent }}, "");

	{%- else -%}
        // What is this? {{ member.cls }}
	{%- endif -%}

        wrtn += fprintf(stream, "{{ "" if loop.last else "," }}\n" );
	
        {% endfor %}
        wrtn += fprintf(stream, "%*s}\n", 2, "");
        wrtn += fprintf(stream, "}\n");

	return wrtn;
}


int
{{ entity.sym }}_fpr(FILE *stream, const struct {{ entity.sym }} *obj, int flags)
{
	switch (flags) {
	case {{ meta.prefix | upper }}_PR_DEF:
	case {{ meta.prefix | upper }}_PR_YAML:
		return {{ entity.sym }}_yaml(stream, obj, flags);
		break;

	case {{ meta.prefix | upper }}_PR_JSON:
		return {{ entity.sym }}_json(stream, obj, flags);
	}

	return -ENOSYS;
}

int
{{ entity.sym }}_pr(const struct {{ entity.sym }} *obj, int flags)
{
	return {{ entity.sym }}_fpr(stdout, obj, flags);
}
{%- endif %}
{%- endfor %}
