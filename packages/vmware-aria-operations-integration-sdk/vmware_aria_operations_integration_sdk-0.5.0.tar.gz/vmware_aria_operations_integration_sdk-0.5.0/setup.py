# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['vmware_aria_operations_integration_sdk',
 'vmware_aria_operations_integration_sdk.adapter_template',
 'vmware_aria_operations_integration_sdk.api',
 'vmware_aria_operations_integration_sdk.validation']

package_data = \
{'': ['*']}

install_requires = \
['GitPython==3.1.30',
 'aenum==3.1.11',
 'docker==6.0.0',
 'httpx==0.23.0',
 'importlib-metadata>=5.0.0,<6.0.0',
 'importlib-resources>=5.10.0,<6.0.0',
 'jsonschema-spec>=0.1.2,<0.2.0',
 'lxml==4.9.2',
 'openapi-core==0.15.0',
 'openapi-schema-validator==0.2.3',
 'openapi-spec-validator==0.4.0',
 'pillow>=9.3.0,<10.0.0',
 'prompt-toolkit==3.0.29',
 'sen>=0.6.2,<0.7.0',
 'validators>=0.20.0,<0.21.0',
 'vmware-aria-operations-integration-sdk-lib>=0.7.1,<0.8.0',
 'xmlschema>=2.1.1,<3.0.0']

entry_points = \
{'console_scripts': ['mp-build = '
                     'vmware_aria_operations_integration_sdk.mp_build:main',
                     'mp-init = '
                     'vmware_aria_operations_integration_sdk.mp_init:main',
                     'mp-test = '
                     'vmware_aria_operations_integration_sdk.mp_test:main']}

setup_kwargs = {
    'name': 'vmware-aria-operations-integration-sdk',
    'version': '0.5.0',
    'description': 'A set of tools to help users create, test, and build containerized management packs for VMware Aria Operations',
    'long_description': 'VMware Aria Operations Integration SDK\n=====================\n\nWelcome to the VMware Aria Operations Integration SDK.\n\n## What is the Integration SDK?\n\nThe Integration SDK creates Management Packs to add custom objects, data, and\nrelationships from a endpoint into VMware Aria Operations.\n\nUsing this SDK to create a Management Pack requires some Python\nknowledge (more languages are planned), and an understanding of how to get\ndata from the endpoint using an API. For example, to create a Management Pack for\nCassandra DB, an understanding of how to write an SQL query, execute it, and read the\nresults is required.\n\nCurrently, installing a Management Pack built with the integration SDK is supported for\nOn-Prem versions of VMware Aria Operations only, but we are working to bring support to\nVMware Aria Operations Cloud in a future release.\n\nFor a high-level overview of VMware Aria Operations, Management Packs, and this SDK,\nsee [the introduction](doc/introduction.md).\n\n## What can the Integration SDK be used for?\nThe Integration SDK can be used to add any endpoint that supports remote monitoring to\nVMware Aria Operations. Adding the endpoint involves creating objects that\nrepresent the endpoint, which may include properties, metrics, and events, as well as\nrelationships between objects.\n\n**Remote monitoring** uses an API (such as REST, SNMP, SQL, etc) to retrieve the data (as\nopposed to agent-based monitoring, where the monitoring code runs in the same location\nas the endpoint).\n\nFor an example walkthrough of creating a new Management Pack monitoring an endpoint, see\n[Creating a new Management Pack](#creating-a-new-management-pack)\n\nThe Integration SDK can also be used to extend objects created by another Management\nPack with additional metrics, properties, events, or relationships. This can be useful\nto ensure access to custom data without having to re-implement already existing data.\n\nFor an example walkthrough of the steps required to extend another management pack, see\n[Extending an Existing Management Pack](#extending-an-existing-management-pack)\n\n## Where should I start?\n* If you want to get started creating your first Management Pack, or don\'t know where to start, read the [Get Started](#get-started) tutorial.\n* If you have completed the Get Started tutorial, the [walkthroughs](#walkthroughs) are guides for modifying your adapter.\n* All documentation is available from the [contents](doc/contents.md) page.\n\n## Get Started\n<details>\n<summary>This guide will walk through setting up the SDK and using the SDK\nto create, test, and install a simple Management Pack (integration) onto VMware Aria Operations.</summary>\n\nContents\n* [Requirements](#requirements)\n* [Installation](#installation)\n* [Creating a Management Pack](#creating-a-management-pack)\n* [Testing a Management Pack](#testing-a-management-pack)\n* [Building and Installing a Management Pack](#building-and-installing-a-management-pack)\n\n### Requirements\n\n#### Operating System:\nThe VMware Aria Operations Integration SDK has been tested in the following OSes:\n* Windows 10\n* Windows 11\n* macOS 12 (Monterey)\n* macOS 13 (Ventura)\n* Debian Linux\n* Fedora Linux\n\nOther operating systems may be compatible.\n\n#### VMware Aria Operations\nThe Management Packs generated by the VMware Aria Operations Integration SDK will only run on versions that supports containerized Management Packs. Currently, this is limited to on-prem installs, version 8.10 or later.\nIn addition, at least one Cloud Proxy (also version 8.10 or later) must be set up in VMware Aria Operations, as containerized Management Packs must be run on a Cloud Proxy collector.\n\n#### Dependencies\n* Docker 20.10.0 or later. Updating to the latest stable version is recommended. For instructions on installing Docker,\n  go to [Docker\'s installation documentation](https://docs.docker.com/engine/install/), choose the OS you need and\n  follow the instructions provided.\n* Python3 3.9.0 or later. Updating to the latest stable version is recommended. Python 3.8 and earlier (including Python2) are not supported. For instructions on installing Python, go\n  to [Python\'s installation documentation](https://wiki.python.org/moin/BeginnersGuide/Download), choose the OS you need\n  and follow the instructions provided.\n* Pip. If Python3 is installed, pip is most likely also installed. For instructions on installing Pip, go\n  to [Pip\'s installation documentation](https://pip.pypa.io/en/stable/installation/), and follow the instructions\n  provided.\n* Git 2.35.0 or later. Updating to the latest stable version is recommended.\n  For instructions in installing git, go to [Git\'s installation documentation](https://git-scm.com/downloads),\n  choose the OS you need and follow the instructions provided.\n\n[//]: # (TODO: Add this section back in once we support them)\n[//]: # (#### Optional Prerequisites)\n[//]: # (* Java. Java is only required for building Java Management Packs. We recommend the latest version of the [Azul Zulu SDK]&#40;https://www.azul.com/downloads/?package=jdk#download-openjdk&#41;.)\n[//]: # (* Powershell. Powershell is only required for building Powershell Management Packs. See [Microsoft\'s installation instructions for PowerShell]&#40;https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell?view=powershell-7.2&#41;.)\n[//]: # (> Note: Creating Java and Powershell Management Packs is disabled for the Beta)\n\n### Installation\n\nTo install the SDK, use `pip` to install into the global Python environment, or `pipx` to install into a isolated environment.\n```sh\npython3 -m pip install vmware-aria-operations-integration-sdk\n```\n\n### Creating a Management Pack\nAfter the SDK is installed, create a new project, by running `mp-init`. This tool asks a series of questions that guides\nthe creation of a new management pack project.\n\n\n1. `Enter a directory to create the project in. This is the directory where adapter code, metadata, and content will reside. If the directory doesn\'t already exist, it will be created. Path:`\n\n    The path can be an absolute path, or a path relative to the directory `mp-init` was run from. The path should end in an empty\n    or non-existing directory. If the directory does not exist, it will be created. This directory will contain a new Management\n    Pack project.\n\n2. `Management Pack display name`\n\n    The Management Pack display name will show up in VMware Aria Operations (**Data Sources &rarr; Integrations &rarr;\n    Repository**), or when adding an account.\n\n    ![Integration Card for the \'TestAdapter\' Management Pack](doc/test-adapter-integration-card.png)\n\n    *This Management Pack\'s display name is \'TestAdapter\', and uses the default icon*\n\n3. `Management Pack adapter key`\n\n    This field is used internally to identify the Management Pack and Adapter Kind. By default, it is set to the\n    Management Pack display name with special characters and whitespace stripped from it.\n\n4. `Management Pack description`\n\n    This field should describe what the Management Pack will do or monitor.\n\n5. `Management Pack vendor`\n\n   The vendor field shows up in the UI under \'About\' on the Integration Card.\n\n   ![About popup for the \'TestAdapter\' Management Pack](doc/test-adapter-about.png)\n\n   *This Management Pack\'s vendor is \'VMware\'*\n\n6. `Enter a path to a EULA text file, or leave blank for no EULA`\n\n   VMware Aria Operations requires a EULA file to be present in a Management Pack. If one isn\'t provided, a stub EULA file (`eula.txt` in\n   the root project directory) will be added to the project which reads:\n    ```\n    There is no EULA associated with this Management Pack.\n    ```\n\n7. `Enter a path to the Management Pack icon file, or leave blank for no icon`\n\n   The icon is used in the VMware Aria Operations UI if present. If it is not present, a default icon will be used. The icon file must be\n   PNG format and 256x256 pixels. An icon file can be added later by copying the icon to the root project directory and\n   setting the value of the `"pak_icon"` key to the icon\'s file name in the `manifest.txt` file.\n\n[//]: # (TODO: Add this section back when we support it)\n[//]: # (8. `Select a language for the adapter`)\n[//]: # (  selected language. The template adapter collects several objects and metrics from the container that the adapter)\n[//]: # (  Once selected, the project will be generated, including a template adapter in the)\n[//]: # (  is running in, and can be used as a starting point for creating a new adapter.)\n\nFor complete documentation of the `mp-init` tool including an overview of its output, see the [MP Initialization Tool Documentation](doc/mp-init.md).\n\n### Template Project\nEvery new project creates a file system that has the basic project structure required to develop and build a Management Pack.\nEach file and directory are discussed in depth in the [mp-init](doc/mp-init.md) documentation. `app/adapter.py` is the adapter\'s\nentry point and the best starting point. `adapter.py` is a template adapter that collects several objects and metrics from the\ncontainer in which the adapter is running; use the template as a starting point for creating a new adapter. The template adapter \nhas comments throughout its code that explain what the code does and how to turn it into your adapter. The methods inside the adapter\ntemplate are required. Modify the code inside the methods to generate the desired adapter. Each method represents a single request,\nand it can be tested individually using `mp-test`, which is covered in the following section. The adapter is stateless; therefore,\nthe adapter cannot store any data for use in later method calls. Each method is used for a different function as described below:\n\n- test(adapter_instance):\n  Performs a test connection using the information given to the adapter_instance to verify the adapter instance has been configured properly.\n  A typical test connection will generally consist of:\n\n     1. Read identifier values from adapter_instance that are required to connect to the target(s)\n     2. Connect to the target(s), and retrieve some sample data\n     3. If any of the above failed, return an error, otherwise pass.\n     4. Disconnect cleanly from the target (ensure this happens even if an error occurs)\n\n- get_endpoints(adapter_instance):\n  This method will be run before the \'test\' method, and VMware Aria Operations will use\n  the results to extract a certificate from each URL. If the certificate is not trusted by\n  the VMware Aria Operations Trust Store, the user will be prompted to either accept or reject\n  the certificate. If it is accepted, the certificate will be added to the AdapterInstance\n  object that is passed to the \'test\' and \'collect\' methods. Any certificate that is\n  encountered in those methods should then be validated against the certificate(s)\n  in the AdapterInstance. This method will not only work against HTTPS endpoints, different types\n  of endpoint will not work (eg. database connections).\n\n- collect(adapter_instance):\n  Performs a collection against the target host. A typical collection will generally consist of:\n    1. Read identifier values from adapter_instance that are required to connect to the target(s)\n    2. Connect to the target(s), and retrieve data\n    3. Add the data into a CollectResult\'s objects, properties, metrics, etc\n    4. Disconnect cleanly from the target (ensure this happens even if an error occurs)\n    5. Return the CollectResult.\n\n- get_adapter_definition():\n  Optional method that defines the Adapter Instance configuration (parameters and credentials used to connect to the target, and configure the management pack) present in a collection, and defines the object types and attribute types present in a collection. Setting these helps VMware Aria Operations to validate, process, and display the data correctly. If this method is omitted, a `describe.xml` file should be manually created inside the `conf` directory with the same data. Generally, this is only necessary when using advanced features of the `describe.xml` file that are not present in this method.\n\n\nFor further guidance on using the template project, consult the [Walkthroughs](../README.md#walkthroughs) section.\n\n### Testing a Management Pack\n\nIn the Management Pack directory, the installation script writes a `requirements.txt` file containing the version of the\nSDK used to generate the project, and installs the SDK into a virtual environment named `venv`. Note that the packages\nin `requirements.txt` are _not_ installed into the adapter. To add a package to the adapter, specify it in the file\n`adapter_requirements.txt`.\n\nTo use the SDK, navigate to the newly-generated project directory and activate the virtual environment:\n\nFor Mac and Linux:\n```sh\nsource venv/bin/activate\n```\n(This script is written for the bash shell. If you use the csh or fish shells, there are alternate activate.csh and activate.fish scripts you should use instead.)\nFor Windows:\n```cmd\nvenv\\Scripts\\activate.bat\n```\nTo exit the virtual environment, run `deactivate` in the virtual environment.\n\nTo test a project, run `mp-test`  in the virtual environment.\n\nIf `mp-test` is run from anywhere outside of a root project directory, the tool will prompt to choose a project, and will\ntest the selected project. If the tool is run from a project directory, the tool will automatically test that project.\n\n`mp-test` will ask for a _connection_. No connections should exist, so choose **New Connection**. The test tool then\nreads the `conf/describe.xml` file to find the connection parameters and credentials required for a connection, and\nprompts for each. This is similar to creating a new _Adapter Instance_ in the VMware Aria Operations UI. Connections are automatically\nsaved per project, and can be reused when re-running the `mp-test` tool.\n\n> Note: In the template project, the only connection parameter is `ID`, and because it connects to the container it is running on, this parameter is not necessary; it is only there as an example, and can be set to any value. The template also implements an example Test Connection. If a Test Connection is run (see below), with the `ID` set to the text `bad`, then the Test Connection will fail.\n\nThe test tool also asks for the method to test. There are four options:\n\n* Test Connection - This call tests the connection and returns either an error message if the connection failed, or an\n  empty json object if the connection succeeded.\n* Collect - This call test the collection, and returns objects, metrics, properties, events, and relationships.\n* Endpoint URLs - This returns a list (possibly empty) of URLs that have distinct SSL certificates that VMware Aria Operations can ask\n  the end user to import into the TrustStore.\n* Version - This returns\n  the [VMware Aria Operations Collector API](vmware_aria_operations_integration_sdk/api/vmware-aria-operations-collector-fwk2.json) version the\n  adapter implements. The implementation of this method is not generally handled by the developer.\n\nFor more information on these endpoints, see\nthe [Swagger API documentation](vmware_aria_operations_integration_sdk/api/vmware-aria-operations-collector-fwk2.json). Each\nresponse is validated against the API.\n\nFor complete documentation of the `mp-test` tool see the [MP Test Tool Documentation](doc/mp-test.md).\n\n### Building and Installing a Management Pack\nTo build a project, run `mp-build`  in the virtual environment.\n\nIf `mp-build` is run from anywhere outside of a root project directory, the tool will prompt to choose a project, and will\nbuild the selected project. If the tool is run from a project directory, the tool will automatically build that\nproject.\n\nOnce the project is selected (if necessary), the tool will build the management pack and emit a `pak` file which can be\ninstalled on VMware Aria Operations. The `pak` file will be located in the project directory.\n\nTo install the `pak` file, in VMware Aria Operations navigate to **Data Sources &rarr; Integrations &rarr;\nRepository** and click `ADD`. Select and upload the generated `pak` file, accept the README, and install the management pack.\n\nTo configure the management pack, VMware Aria Operations navigate to **Data Sources &rarr; Integrations &rarr;\nAccounts** and click `ADD ACCOUNT`. Select the newly-installed management pack and configure the required fields. For\n`Collector/Group`, make sure that a cloud proxy collector is selected. Click `VALIDATE CONNECTION` to test the connection.\nIt should return successfully, then click `ADD`.\n\nBy default, a collection will run every 5 minutes. The first collection should happen immediately, however newly-created\nobjects cannot have metrics, properties, and events added to them. After the second collection, approximately five\nminutes later, the objects\' metrics, properties, and events should appear. These can be checked by navigating to **\nEnvironment &rarr; Object Browser &rarr; All Objects** and expanding the Adapter and associated object types and object.\n\n![CPU Idle Time](doc/test-adapter-cpu-idle-time.png)\n*The CPU object\'s `idle-time` metric in a Management Pack named `QAAdapterName`.*\n\nFor complete documentation of the `mp-build` tool see the [MP Build Tool Documentation](doc/mp-build.md).\n</details>\n\n## Walkthroughs\n\n### Creating a New Management Pack\n<details><summary>\nThis guide assumes you have already set up the SDK and know how to create a new project. \nIt walks you through the steps necessary to monitor an endpoint, using Alibaba Cloud as \nan example.</summary>\n\n\nThis section will create a simple management pack that creates objects with metrics, \nproperties, and relationships that monitors Alibaba Cloud. It assumes you have already \ninstalled the SDK and understand the tools and steps in the \'Get Started\' section. It \nalso assumes you have an Alibaba Cloud account.\n\nFor the purposes of this walkthrough, we will be adding an ECS Instance object with\nsix properties, and a relationship to the Adapter Instance. All the data can be found\nby calling the `DescribeInstancesRequest` method in the ECS Python Library.\n\nThe first step is to run `mp-init` and create a new project. There are no restrictions,\nexcept that the adapter kind key cannot be used by another management pack that is\ninstalled on the same system. For example, we used the following to create the sample:\n\n```\n❯ mp-init\nEnter a directory to create the project in. This is the directory where adapter code, metadata, and\ncontent will reside. If the directory doesn\'t already exist, it will be created.\nPath: alibaba-cloud-mp\nManagement pack display name: Alibaba Cloud\nManagement pack adapter key: AlibabaCloud\nManagement pack description: Sample Management Pack that monitors Alibaba Cloud\nManagement pack vendor: VMware, Inc\nEnter a path to a EULA text file, or leave blank for no EULA: \nEnter a path to the management pack icon file, or leave blank for no icon:\nAn icon can be added later by setting the \'pak_icon\' key in \'manifest.txt\' to the\nicon file name and adding the icon file to the root project directory.\nCreating Project [Finished]\n\nproject generation completed\n```\n\nThe completed management pack is found in\n[the \'samples\' directory](samples/alibaba-cloud-mp), and can be used as a reference\nfor this walkthrough or as a starting point for creating your own.\n\nOnce the project finished generating, we can change directory into the project\nand activate the Python virtual environment.\n\nNext, we need to modify the adapter code. We will break this up into several steps:\n1. [Add a library for connecting to Alibaba](#add-a-library-for-connection-to-alibaba-cloud)\n2. [Modify the adapter definition to add fields for connecting to Alibaba Cloud](#modify-the-adapter-definition-to-add-fields-for-connecting-to-alibaba-cloud)\n3. [Modify the `test` method to create an Alibaba Cloud connection and run a query](#modify-the-test-method-to-create-an-alibaba-could-connection-and-run-a-query)\n4. [Modify the `collect` method to collect objects, metrics, properties, and \n   relationships](#modify-the-collect-method-to-collect-objects--metrics--properties--and-relationships)\n5. [Verify the Alibaba Cloud MP](#verify-the-alibaba-cloud-mp)\n\n#### Add a library for connection to Alibaba Cloud\n\nIn order to add the metrics we want, we will need to be able to send requests to Alibaba \nCloud. We could use any HTTP Rest library, such as `requests`, but it\'s usually easier\nto use a library designed for the specific service we are monitoring. Thus, for this\nsample we will use the official Alibaba Cloud SDK: \n[`aliyun-python-sdk-core`](https://github.com/aliyun/aliyun-openapi-python-sdk).\nSince we will be monitoring ECS instances, we will also need\n[`aliyun-python-sdk-ecs`](https://github.com/aliyun/aliyun-openapi-python-sdk).\n\nTo add a library to the adapter, open the file `adapter_requirements.txt` and add a new\nline with the name of the library. Optionally, we can also add a version constraint.\nHere\'s what the modified file should look like:\n```\nvmware-aria-operations-integration-sdk-lib==0.7.*\npsutil\naliyun-python-sdk-core==2.13.36\naliyun-python-sdk-ecs==4.24.61\n```\n\n> Note: We can also remove the `psutil` library, as that is only used in the sample code\n> that we will be replacing. However, we would then no longer be able to run `mp-test`\n> until we have removed the sample code that depends on `psutil`, so for now we will\n> keep it.\n\n#### Modify the adapter definition to add fields for connecting to Alibaba Cloud\n\nNow that we have added the library, we need to see what information it needs in order\nto connect. From the documentation, the client requires:\n* Access Key ID\n* Region ID\n* Access Secret\n\nIn the `app/adapter.py` file, find the `get_adapter_definition()` method. We will define\nparameters for the `Access Key ID` and `Region ID`, and a credential for the \n`Access Key Secret`. We could put the `Access Key ID` in the credential, however \ncredentials are not used to identify adapter instances. If `Region ID` was the only\nrequired parameter, then we would only be able to make one Adapter Instance per region.\nUsing the `Access Key ID` as an additional identifier will allow us to monitor multiple \naccounts with the same `Region ID`.\n\nAfter also removing the \'ID\' parameter used by the sample adapter, the \nmethod could look similar to this:\n\n```python\ndef get_adapter_definition() -> AdapterDefinition:\n    definition = AdapterDefinition(ADAPTER_KIND, ADAPTER_NAME)\n\n    definition.define_string_parameter(\n        "access_key_id",\n        label="Access Key ID",\n        description="The AccessKey ID of the RAM account",\n        required=True,\n    )\n    definition.define_enum_parameter(\n        "region_id",\n        label="Region ID",\n        values=[\n            "cn-hangzhou",\n            "cn-beijing",\n            "cn-zhagjiakou",\n            "cn-shanghai",\n            "cn-qingdao",\n            "cn-huhehaote",\n            "cn-shenzhen",\n            "cn-chengdu",\n            "cn-hongkong",\n            "ap-northeast-1",\n            "ap-south-1",\n            "ap-southeast-1",\n            "ap-southeast-2",\n            "ap-southeast-3",\n            "ap-southeast-5",\n            "eu-central-1",\n            "eu-west-1",\n            "me-east-1",\n            "us-east-1",\n            "us-west-1"\n        ],\n        description="Set the region to collect from. Only one region can be "\n                    "selected per Adapter Instance.",\n        required=True,\n    )\n    ram_account = definition.define_credential_type("RAM Account")\n    ram_account.define_password_parameter(\n        "access_key_secret",\n        "AccessKey Secret",\n        required=True,\n    )\n\n    # The key \'container_memory_limit\' is a special key that is read by the VMware Aria Operations collector to\n    # determine how much memory to allocate to the docker container running this adapter. It does not\n    # need to be read inside the adapter code.\n    definition.define_int_parameter(\n        "container_memory_limit",\n        label="Adapter Memory Limit (MB)",\n        description="Sets the maximum amount of memory VMware Aria Operations can "\n                    "allocate to the container running this adapter instance.",\n        required=True,\n        advanced=True,\n        default=1024,\n    )\n```\n\nNow that we\'ve defined the connection parameters, we should define the objects that\nwe will collect. For now, let\'s collect some information about ECS Instances.\nThis is a small example. The implementation in the \n[samples directory](samples/alibaba-cloud-mp) includes ECS Metrics and an additional\nSecurity Group object type.\n\n```python\n    ecs_instance = definition.define_object_type("ecs_instance", "ECS Instance")\n    ecs_instance.define_string_identifier("instance_id", "Instance ID")\n    ecs_instance.define_string_identifier("region_id", "Region ID")\n    ecs_instance.define_numeric_property("cpu", "CPU Count")\n    ecs_instance.define_numeric_property("memory", "Total Memory", unit=Units.DATA_SIZE.MEBIBYTE)\n    ecs_instance.define_string_property("status", "Status")\n    ecs_instance.define_string_property("instance_type", "Instance Type")\n    ecs_instance.define_string_property("private_ip", "Private IP Addresses")\n    ecs_instance.define_string_property("public_ip", "Public IP Addresses")\n```\n\n#### Modify the `test` method to create an Alibaba Cloud connection and run a query\n\nWe can try to connect and run a test query. We will do this in the `test` method. Notice \nthis takes an `AdapterInstance` as a parameter. We will replace all the code that is \ninside the try block.\n\nAll the parameters and credentials from the definition will be present in this Adapter\nInstance. We can access them like this, using the `key`s that we defined in the\n`get_adapter_definition` function to get the value assigned to that parameter:\n\n```python\n    access_key = adapter_instance.get_identifier_value("access_key_id")\n    region = adapter_instance.get_identifier_value("region_id")\n    secret = adapter_instance.get_credential_value("access_key_secret")\n```\n\nWe can then use them to connect to Alibaba Cloud and run a test query. First import the\nrequire modules:\n\n```python\nfrom aliyunsdkcore.client import AcsClient\nfrom aliyunsdkecs.request.v20140526 import DescribeInstancesRequest\n```\nThen using the identifier values from above, create a client and initiate a request:\n```python\n    # Create and initialize a AcsClient instance\n    client = AcsClient(\n        access_key,\n        secret,\n        region,\n    )\n\n    request = DescribeInstancesRequest.DescribeInstancesRequest()\n    request.set_accept_format(\'json\')\n\n    response = client.do_action_with_exception(request)\n\n    logger.info(str(response, encoding=\'utf-8\'))\n    return result\n```\n\nSince we can expect that this will sometimes fail, e.g., if the user provides the wrong \nAccess Key or Secret, we should ensure there is good error-handling in this function.\n\nIf we detect a failure (e.g., in the `except` block), we should call\n`result.with_error(error_message)` to indicate the test has failed. If no errors have\nbeen attached to the `result` object, the test will pass. (Note that calling\n`result.with_error(...)` multiple times in the same test will result in only the last\nerror being displayed.)\n\nIf the management pack will be widely distributed, it may also be worthwhile to catch\ncommon errors and ensure the resulting messages are clear and user-friendly.\n\nWe should now be able to run `mp-test connect` to run this code. The `mp-test` tool\nwill ask you to create a new connection, prompting for \'Access Key ID\', \'Region ID\', and\n\'Access Key Secret\'. After, it will ask if it should override SuiteAPI<sup>1</sup> \ncredentials. We will not need them for this sample, so we can select \'No\'.\n\n> <sup>1</sup>SuiteAPI is a REST API on VMware Aria Operations that can be used for many\n> purposes. The documentation for this API can be found on any VMware Aria Operations\n> instance at https://[aria_ops_hostname]/suite-api/. The \'adapter_instance\' object that\n> is passed to the \'test\', \'get_endpoints\', and \'collect\' methods can automatically\n> connect to this API and has methods for querying it.\n\nIf everything was successful, the result should look similar to this:\n```\n(venv-Alibaba Cloud) ❯ mp-test connect\nChoose a connection:  default\nBuilding adapter [Finished]\nWaiting for adapter to start [Finished]\nRunning Connect [Finished]\n{}\n\nAvg CPU %                     | Avg Memory Usage %         | Memory Limit | Network I/O         | Block I/O\n------------------------------+----------------------------+--------------+---------------------+--------------\n29.6 % (0.0% / 29.6% / 59.1%) | 4.0 % (4.0% / 4.0% / 4.0%) | 1.0 GiB      | 5.52 KiB / 8.76 KiB | 0.0 B / 0.0 B\n\nRequest completed in 1.24 seconds.\n\nAll validation logs written to \'~/Code/alibaba-cloud-mp/logs/validation.log\'\nValidation passed with no errors\n```\n\n#### Modify the `collect` method to collect objects, metrics, properties, and relationships\n\nNow that the `test` method is working, we can implement the `collect` method. This is\nthe method where we query Alibaba Cloud for the objects, metrics, etc, we want and send \nthem to VMware Aria Operations. \n\nFirst, we should remove all the sample code inside the `try` block. All the code for the\nfollowing steps should be inside the `try` block.\n\nThen, we need to establish a connection to Alibaba Cloud. We can do this in the same way \nas in test connect. In many cases creating a function for connecting that is called from \nboth `test` and `collect` is worthwhile. \n\nNext, we\'ll run several queries to get the data from Alibaba Cloud that we want, add\nthe objects to the `result`, add data to the objects, and return the result. This\ncollects all the properties in the small definition above. The implementation in the\n[samples directory](samples/alibaba-cloud-mp) has more data.\n\n\n```python\n    request = DescribeInstancesRequest.DescribeInstancesRequest()\n    request.set_accept_format(\'json\')\n\n    response = client.do_action_with_exception(request)\n    json_response = json.loads(response)\n    \n    # Add the adapter instance so that we can make a relationship to it from the \n    # ECS instances\n    result.add_object(adapter_instance)\n    \n    for instance in json_response.get("Instances", {}).get("Instance", []):\n        id = instance.get("InstanceId")\n        if not id:\n            continue\n        name = instance.get("HostName", id)\n\n        ecs_object = result.object(ADAPTER_KIND, "ecs_instance", name,\n                      identifiers=[Identifier("instance_id", id),\n                                   Identifier("region_id", region)])\n\n        ecs_object.add_parent(adapter_instance)\n\n        ecs_object.with_property("cpu", instance.get("Cpu"))\n        ecs_object.with_property("memory", instance.get("Memory"))\n        ecs_object.with_property("status", instance.get("Status"))\n        ecs_object.with_property("instance_type", instance.get("InstanceType"))\n        ecs_object.with_property("private_ip", str(instance.get("VpcAttributes", {}).get("PrivateIpAddress", {}).get("IpAddress", [])))\n        ecs_object.with_property("public_ip", str(instance.get("PublicIpAddress", {}).get("IpAddress", [])))\n```\n\n#### Verify the Alibaba Cloud MP\n\nTo verify the MP, run `mp-test collect` using the same connection we created earlier. We\nshould see all ECS Instances that are present in the selected region that the RAM user \nassociated with the access key has permission to view, with a small number of properties\nattached to it. In addition, each ECS Instance should be a child of the Adapter \nInstance. For example, with a very small environment with a single ECS Instance, we may \nsee a result similar to this:\n```\n(venv-Alibaba Cloud) ❯ mp-test -c default collect\nBuilding adapter [Finished]\nWaiting for adapter to start [Finished]\nRunning Collect [Finished]\n{\n    "nonExistingObjects": [],\n    "relationships": [],\n    "result": [\n        {\n            "events": [],\n            "key": {\n                "adapterKind": "AlibabaCloud",\n                "identifiers": [\n                    {\n                        "isPartOfUniqueness": true,\n                        "key": "access_key_id",\n                        "value": "LTAI5tJAcgHHoDT9d4xWNQBu"\n                    },\n                    {\n                        "isPartOfUniqueness": false,\n                        "key": "container_memory_limit",\n                        "value": "1024"\n                    },\n                    {\n                        "isPartOfUniqueness": true,\n                        "key": "region_id",\n                        "value": "us-east-1"\n                    }\n                ],\n                "name": "default",\n                "objectKind": "AlibabaCloud_adapter_instance"\n            },\n            "metrics": [],\n            "properties": []\n        },\n        {\n            "events": [],\n            "key": {\n                "adapterKind": "AlibabaCloud",\n                "identifiers": [\n                    {\n                        "isPartOfUniqueness": true,\n                        "key": "instance_id",\n                        "value": "i-0xi23s0o5pgnbdir3e3j"\n                    },\n                    {\n                        "isPartOfUniqueness": true,\n                        "key": "region_id",\n                        "value": "us-east-1"\n                    }\n                ],\n                "name": "iZ0xi23s0o5pgnbdir3e3jZ",\n                "objectKind": "ecs_instance"\n            },\n            "metrics": [],\n            "properties": [\n                {\n                    "key": "cpu",\n                    "numberValue": 1.0,\n                    "timestamp": 1681933134430\n                },\n                {\n                    "key": "memory",\n                    "numberValue": 1024.0,\n                    "timestamp": 1681933134430\n                },\n                {\n                    "key": "status",\n                    "stringValue": "Running",\n                    "timestamp": 1681933134430\n                },\n                {\n                    "key": "instance_type",\n                    "stringValue": "ecs.n1.tiny",\n                    "timestamp": 1681933134430\n                },\n                {\n                    "key": "private_ip",\n                    "stringValue": "[\'172.29.43.26\']",\n                    "timestamp": 1681933134430\n                },\n                {\n                    "key": "public_ip",\n                    "stringValue": "[\'47.90.216.22\']",\n                    "timestamp": 1681933134430\n                }\n            ]\n        }\n    ]\n}\nCollection summary:\n\nTable cell format is: \'total (min/median/max)\'\n\nObject Type                                 | Count | Metrics | Properties | Events | Parents | Children\n--------------------------------------------+-------+---------+------------+--------+---------+---------\nAlibabaCloud::AlibabaCloud_adapter_instance | 1     | 0       | 0          | 0      | 0       | 0\nAlibabaCloud::ecs_instance                  | 1     | 0       | 6          | 0      | 0       | 0\n\nParent Type | Child Type | Count\n------------+------------+------\n\n\nAvg CPU %                     | Avg Memory Usage %         | Memory Limit | Network I/O          | Block I/O\n------------------------------+----------------------------+--------------+----------------------+--------------\n34.6 % (0.0% / 34.6% / 69.1%) | 4.0 % (4.0% / 4.0% / 4.0%) | 1.0 GiB      | 5.52 KiB / 10.21 KiB | 0.0 B / 0.0 B\n\nCollection completed in 0.96 seconds.\n\nAll validation logs written to \'~/Code/alibaba-cloud-mp/logs/validation.log\'\nValidation passed with no errors\n```\n\nWhen everything is working as expected locally using `mp-test`, we can run\n`mp-build` and install on VMware Aria Operations for a final verification.\n\n\n#### Next Steps\n\n* [Adding to an Adapter](doc/adding_to_an_adapter.md)\n    * [Defining an Adapter](doc/adding_to_an_adapter.md#defining-an-adapter)\n    * [Defining an Adapter Instance](doc/adding_to_an_adapter.md#defining-an-adapter-instance)\n    * [Adding a Configuration Field to an Adapter Instance](doc/adding_to_an_adapter.md#adding-a-configuration-field-to-an-adapter-instance)\n    * [Adding a Credential](doc/adding_to_an_adapter.md#adding-a-credential)\n    * [Creating an Adapter Instance](doc/adding_to_an_adapter.md#creating-an-adapter-instance)\n    * [Adding an Object Type](doc/adding_to_an_adapter.md#adding-an-object-type)\n    * [Creating an Object](doc/adding_to_an_adapter.md#creating-an-object)\n    * [Adding an Attribute](doc/adding_to_an_adapter.md#adding-an-attribute)\n    * [Creating a Metric or Property](doc/adding_to_an_adapter.md#creating-a-metric-or-property)\n    * [Creating an Event](doc/adding_to_an_adapter.md#creating-an-event)\n    * [Creating a Relationship](doc/adding_to_an_adapter.md#creating-a-relationship)\n* [Adding Content](doc/adding_content.md)\n    * [Adding a Dashboard](doc/adding_content.md#adding-a-dashboard)\n    * [Adding a Report Template](doc/adding_content.md#adding-a-report-template)\n    * [Adding Alert Definitions](doc/adding_content.md#adding-alert-definitions)\n    * [Adding a Traversal](doc/adding_content.md#adding-a-traversal)\n    * [Adding Localization](doc/adding_content.md#adding-localization)\n\n</details>\n\n### Extending an Existing Management Pack\n<details><summary>\nThis guide assumes you have already set up the SDK and know how to create a new project. \nIt walks you through the steps necessary to extend an existing Management Pack to add\nadditional data, using the MySQL Management Pack as an example.</summary>\n\n\nExtending an existing management pack is similar to creating a new management pack, but \nhas some additional constraints. This section will create a management pack that adds \nmetrics to the existing MySQL management pack\'s database object. It assumes\nyou have already installed the SDK and understand the tools and steps in the \'Get \nStarted\' section. It also assumes that you have installed and configured the [MySQL\nmanagement pack](https://customerconnect.vmware.com/downloads/details?downloadGroup=VRTVS_MP_MYSQL_810&productId=1051) \non a VMware Aria Operations instance in your local network.\n\nFor the purposes of this walkthrough, we will be adding five metrics to the MySQL database\nobject that show the total amount of lock waits and statistics about the time spent \nwaiting for those locks. This info can be found in MySQL in the table \n`performance_schema.table_lock_waits_summary_by_table`.\n\nThe first step is to run `mp-init` and create a new project. There are no restrictions,\nexcept that the adapter kind key cannot be used by another management pack that is\ninstalled on the same system. For example, we used the following to create the sample:\n\n```\n❯ mp-init\nEnter a directory to create the project in. This is the directory where adapter code, metadata, and\ncontent will reside. If the directory doesn\'t already exist, it will be created.\nPath: mysql-extension-mp\nManagement pack display name: Extended MySQL MP\nManagement pack adapter key: ExtendedMySQLMP\nManagement pack description: Adds \'Lock Wait\' metrics to MySQL Database objects\nManagement pack vendor: VMware, Inc\nEnter a path to a EULA text file, or leave blank for no EULA: \nEnter a path to the management pack icon file, or leave blank for no icon:\nAn icon can be added later by setting the \'pak_icon\' key in \'manifest.txt\' to the\nicon file name and adding the icon file to the root project directory.\nCreating Project [Finished]\n\nproject generation completed\n```\n\nThe completed management pack is found in \n[the \'samples\' directory](samples/mysql-extension-mp), and can be used as a reference \nfor this walkthrough or as a starting point for creating your own.\n\nOnce the project finished generating, we can change directory into the project \nand activate the Python virtual environment.\n\nNext, we need to modify the adapter code. We will break this up into several steps:\n1. [Add a library for connecting to MySQL](#add-a-library-for-connection-to-mysql)\n2. [Modify the adapter definition to add fields for connecting to MySQL](#modify-the-adapter-definition-to-add-fields-for-connecting-to-mysql)\n3. [Modify the `test` method to create a MySQL connection and run a query](#modify-the-test-method-to-create-a-mysql-connection-and-run-a-query)\n4. [Modify the `collect` method to collect metrics, and attach them to the correct\n   database objects](#modify-the-collect-method-to-collect-metrics-and-attach-them-to-the-correct-database-objects)\n5. [Verify the MP](#verify-the-mp)\n\n#### Add a library for connection to MySQL\n\nIn order to add the metrics we want, we will need to be able to run a query against a\nMySQL database. There are several Python libraries that can help us do this. For now,\nlet\'s use [`mysql-connector-python`](https://dev.mysql.com/doc/connector-python/en/).\n\nTo add a library to the adapter, open the file `adapter_requirements.txt` and add a new\nline with the name of the library. Optionally, we can also add a version constraint. \nHere\'s what the modified file should look like:\n```\nvmware-aria-operations-integration-sdk-lib==0.7.*\npsutil\nmysql-connector-python>=8.0.32\n```\n\n> Note: We can also remove the `psutil` library, as that is only used in the sample code \n> that we will be replacing. However, we would then no longer be able to run `mp-test` \n> until we have removed the sample code that depends on `psutil`, so for now we will \n> keep it.\n\n#### Modify the adapter definition to add fields for connecting to MySQL\n\nNow that we have added the library, we need to see what information it needs in order\nto connect. Since the adapter will be running on the VMware Aria Operations Cloud Proxy, \nwhich is not where our MySQL instance is running, we will need the following:\n* Host\n* Port\n* Username\n* Password\n\nIn the `app/adapter.py` file, find the `get_adapter_definition()` method. We will define\nparameters for the `Host` and `Port`, and a credential for the `Username` and `Password`.\nAfter also removing the \'ID\' parameter from the sample adapter, the method should look\nsimilar to this:\n\n```python\ndef get_adapter_definition() -> AdapterDefinition:\n    logger.info("Starting \'Get Adapter Definition\'")\n    definition = AdapterDefinition(ADAPTER_KIND, ADAPTER_NAME)\n\n    definition.define_string_parameter("host", "MySQL Host")\n    definition.define_int_parameter("port", "Port", default=3306)\n\n    credential = definition.define_credential_type("mysql_user", "MySQL User")\n    credential.define_string_parameter("username", "Username")\n    credential.define_password_parameter("password", "Password")\n\n    # The key \'container_memory_limit\' is a special key that is read by the VMware Aria \n    # Operations collector to determine how much memory to allocate to the docker \n    # container running this adapter. It does not need to be read inside the adapter \n    # code.\n    definition.define_int_parameter(\n        "container_memory_limit",\n        label="Adapter Memory Limit (MB)",\n        description="Sets the maximum amount of memory VMware Aria Operations can "\n                    "allocate to the container running this adapter instance.",\n        required=True,\n        advanced=True,\n        default=1024,\n    )\n\n    # This Adapter has no object types directly, rather it co-opts object types that\n    # are part of the MySQL MP to add additional metrics. As such, we can\'t define\n    # those object types here, because they\'re already defined in the MySQL MP with a\n    # different adapter type.\n    \n    # If we decide to also create new objects (that are not part of an existing MP),\n    # those can be added here.\n\n    logger.info("Finished \'Get Adapter Definition\'")\n    logger.debug(f"Returning adapter definition: {definition.to_json()}")\n    return definition\n```\n\nThe adapter definition is also where objects and metrics are defined, however we are \nonly allowed to define objects and metrics that are a part of our adapter type. Because\nextensions modify objects that are part of a different adapter type, we can\'t add them.\nThis means that we can\'t set metric metadata like \'units\', \'labels\', etc that we would\ngenerally be able to set.\n\n#### Modify the `test` method to create a MySQL connection and run a query\n\nNow that we\'ve defined our parameters, we can try to connect and run a test query.\nWe will do this in the `test` method. Notice this takes an `AdapterInstance` as a \nparameter. We will replace all the code that is inside the try/except block.\n\nAll the parameters and credentials from the definition will be present in this Adapter \nInstance. We can access them like this, using the `key`s that we defined in the \n`get_adapter_definition` function to get the value assigned to that parameter:\n\n```python\n    hostname = adapter_instance.get_identifier_value("host")\n    port = int(adapter_instance.get_identifier_value("port", "3306"))\n    username = adapter_instance.get_credential_value("username")\n    password = adapter_instance.get_credential_value("password")\n```\n\nWe can then use them to connect to MySQL and run a test query (be sure to import \n`mysql.connector`):\n\n```python\n\n    connection = mysql.connector.connect(\n        host=hostname,\n        port=port,\n        user=username,\n        password=password,\n    )\n    cursor = connection.cursor()\n\n    # Run a simple test query\n    cursor.execute("SHOW databases")\n    for database in cursor: # The cursor needs to be consumed before it is closed\n        logger.info(f"Found database \'{database}\'")\n    cursor.close()\n```\n\nSince we can expect that this will fail, e.g., if the user provides the wrong username\nand password, we should ensure there is good error-handling in this function.\n\nIf we detect a failure (e.g., in the `except` block), we should call \n`result.with_error(error_message)` to indicate the test has failed. If no errors have\nbeen attached to the `result` object, the test will pass. (Note that calling \n`result.with_error(...)` multiple times in the same test will result in only the last\nerror being displayed.)\n\nIf the management pack will be widely distributed, it may also be worthwhile to catch \ncommon errors and ensure the resulting messages are clear and user-friendly.\n\nWe should now be able to run `mp-test connect` to run this code. The `mp-test` tool\nwill ask you to create a new connection, prompting for \'host\', \'port\', \'username\', and\n\'password\'. After, it will ask if it should override SuiteAPI<sup>1</sup> credentials. Unless you\nhave already set these up, select \'Yes\', as we will need them later when we modify the\n\'collect\' method. It will ask you for the SuiteAPI hostname, which should be the\nhostname of the VMware Aria Operations instance where the MySQL management pack is\nrunning, and a username and password which have permission to access to the SuiteAPI on\nthat system.\n\n> <sup>1</sup>SuiteAPI is a REST API on VMware Aria Operations that can be used for many\n> purposes. The documentation for this API can be found on any VMware Aria Operations\n> instance at https://[aria_ops_hostname]/suite-api/. The \'adapter_instance\' object that\n> is passed to the \'test\', \'get_endpoints\', and \'collect\' methods can automatically \n> connect to this API and has methods for querying it.\n\nIf everything was successful, the result should look similar to this:\n```\n(venv-Extended MySQL MP) ❯ mp-test connect\nChoose a connection:  New Connection\nBuilding adapter [Finished]\nWaiting for adapter to start [Finished]\n┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐\n│Connections are akin to Adapter Instances in VMware Aria Operations, and contain the parameters                                             │\n│needed to connect to a target environment. As such, the following connection parameters and credential fields are                           │\n│derived from the \'conf/describe.xml\' file and are specific to each Management Pack.                                                         │\n└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘\nEnter connection parameter \'MySQL Host\': mysql8-1.localnet\nEnter connection parameter \'Port\': 3306\nEnter connection parameter \'Adapter Memory Limit (MB)\': 1024\nEnter credential field \'Username\': root\nEnter credential field \'Password\': *********\nOverride default SuiteAPI connection information for SuiteAPI calls?  Yes\nSuite API Hostname: aria-ops-1.vmware.com\nSuite API User Name: admin\nSuite API Password: ********\nSet these as the default SuiteAPI connection?  Yes\nEnter a name for this connection: default\nSaved connection \'default\' in \'~/Code/extended-mysql-mp/config.json\'.\nThe connection can be modified by manually editing this file.\nBuilding adapter [Finished]\nWaiting for adapter to start [Finished]\nRunning Endpoint URLs [Finished]\nRunning Connect [Finished]\n{}\n\nAvg CPU %                     | Avg Memory Usage %         | Memory Limit | Network I/O         | Block I/O\n------------------------------+----------------------------+--------------+---------------------+--------------\n14.9 % (0.0% / 14.9% / 29.8%) | 4.0 % (4.0% / 4.0% / 4.0%) | 1.0 GiB      | 9.06 KiB / 4.16 KiB | 0.0 B / 0.0 B\n\nRequest completed in 1.85 seconds.\n\nAll validation logs written to \'~/Code/mysql-extention-mp/logs/validation.log\'\nValidation passed with no errors\n```\n\n#### Modify the `collect` method to collect metrics, and attach them to the correct database objects\n\nNow that the `test` method is working, we can implement the `collect` method. This is \nthe method where we query MySQL for the metrics we want and send them to VMware Aria \nOperations as part of the database objects. Before we begin writing code, we need to \nlook up some information about the MySQL management pack. Specifically, we need the\nfollowing information:\n* The MySQL Adapter Kind Key\n* The MySQL Database Object type\n* A way to create a database object that matches a database that already exists on\n  VMware Aria Operations (usually the identifier list, but the name can sometimes work,\n  as in this case).\n\nThese will be used to ensure that the metrics are attached to existing MySQL objects,\nrather than creating new ones.\n \nTo get this information, we will `ssh` into the collector where the MySQL management\npack is running. Then `cd` to `$ALIVE_BASE/user/plugin/inbound/mysql_adapter3/conf/`.\nFrom there, open the `describe.xml` file. The Adapter Kind key is at the top on the\nfourth line:\n```xml\n<?xml version = \'1.0\' encoding = \'UTF-8\'?>\n<!-- <!DOCTYPE AdapterKind SYSTEM "describeSchema.xsd"> -->\n<!-- Copyright (c) 2020 VMware Inc. All Rights Reserved. -->\n<AdapterKind key="MySQLAdapter" nameKey="1" version="1" xmlns="http://schemas.vmware.com/vcops/schema">\n```\nInside the `AdapterKind` tag are `ResourceKinds/ResourceKind` tags, and we can search \nfor the one that represents the database resource kind. Once we have found it we can see\nthat it has two identifiers, one for the adapter instance ID, and one for the database \nname. \n```xml\n   <ResourceKinds>\n      <!-- ... -->\n      <ResourceKind key="mysql_database" nameKey="64" >\n          <ResourceIdentifier dispOrder="1" key="adapter_instance_id" length="" nameKey="37" required="true" type="string" identType="1" enum="false" default=""> </ResourceIdentifier>\n          <ResourceIdentifier dispOrder="2" key="database_name" length="" nameKey="65" required="true" type="string" identType="1" enum="false" default=""> </ResourceIdentifier>\n```\nIn order to attach a metric to these objects, we will need all identifiers that have an\n`identType=1`. In this case, those are `adapter_instance_id` and `database_name`. This\nmeans that the combination of those two fields uniquely identify the object among all\nof the `mysql_database` objects in the `MySQLAdapter` adapter.\n\nGetting the `adapter_instance_id` requires a SuiteAPI call. We need to retrieve the \nAdapter Instances for `MySQLAdapter` that has the same host and port identifiers as our \nadapter, and then retrieving the id. However, if we look in VMware Aria Operations \nitself, we can see that each database\'s name has the format `mysql_host/mysql_database`, \nwhich should be unique (even if VMware Aria Operations isn\'t using it for determining \nuniqueness). Thus, a simpler way to get matching objects (in this case) is to construct \nthe name, and ask the SuiteAPI to give us all `MySQLAdapter` `mysql_database` objects \nwith those names. Then we can simply attach metrics to the resulting `mysql_database` \nobjects, which will have all identifiers correctly set by the SuiteAPI.\n\nFirst, we should remove all the sample code inside the `try` block. All the code for the\nfollowing steps should be inside the `try` block.\n\nThen, we need to establish a connection to MySQL. We can do this in the same way as in\ntest connect. In many cases creating a function for connecting that is called from both \n`test` and `collect` is worthwhile. Then we can query the list of databases, and \nconstruct a list of database names that may be present:\n\n```python\n        # Get the list of databases on this instance\n        cursor = connection.cursor()\n        cursor.execute("SHOW databases")\n        database_names = [f"{hostname}/{database[0]}" for database in cursor]\n        cursor.close()\n```\n\nWe then query the SuiteAPI for `mysql_database` objects from the `MySQLAdapter` \nadapter, with the names we computed. The queries that `query_for_resources` accepts\nare documented in the SuiteAPI documentation, and can search on many types of metadata \nabout a resource. After that, we add the returned objects to the `result` and to a \ndictionary for quick access later.\n\n```python\n        # Get the list of objects from the SuiteAPI that represent the MySQL\n        # databases that are on this instance, and add any we find to the result\n        databases = {}  # dict of database Objects by name for easy access\n        with adapter_instance.suite_api_client as suite_api:\n            dbs = suite_api.query_for_resources(\n                query={\n                    "adapterKind": ["MySQLAdapter"],\n                    "resourceKind": ["mysql_database"],\n                    "name": database_names,\n                },\n            )\n            for db in dbs:\n                databases[db.get_identifier_value("database_name")] = db\n                # Add each database to the collection result. Objects must be\n                # added to the result in order for them to be returned by the\n                # collect method.\n                result.add_object(db)\n```\n\nFinally, we\'ll run the query to get the data from MySQL that we want, and add that data\nas metrics to the relevant databases, and return the result:\n\n```python\n        # Run a query to get some additional data. Here we\'re getting info about\n        # lock waits on each database\n        cursor = connection.cursor()\n        cursor.execute("""\n                    select OBJECT_SCHEMA,\n                           sum(COUNT_STAR)     as COUNT_STAR,\n                           sum(SUM_TIMER_WAIT) as SUM_TIMER_WAIT,\n                           max(MAX_TIMER_WAIT) as MAX_TIMER_WAIT,\n                           min(MIN_TIMER_WAIT) as MIN_TIMER_WAIT\n                    from performance_schema.table_lock_waits_summary_by_table\n                    group by OBJECT_SCHEMA\n                    """)\n\n        # Iterate through the results of the query, and add them to the appropriate\n        # database Object as metrics.\n        for row in cursor:\n            if len(row) != 5:\n                logger.error(f"Row is not expected size: {repr(row)}")\n                continue\n            database = databases.get(row[0])\n            if not database:\n                logger.info(f"Database {row[0]} not found in Aria Operations")\n                continue\n            database.with_metric("Table Locks|Count", float(row[1]))\n            database.with_metric("Table Locks|Sum", float(row[2]))\n            database.with_metric("Table Locks|Max", float(row[3]))\n            if float(row[1] > 0):\n                database.with_metric("Table Locks|Avg", float(row[2])/float(row[1]))\n            else:\n                database.with_metric("Table Locks|Avg", 0)\n            database.with_metric("Table Locks|Min", float(row[4]))\n        cursor.close()\n        \n        return result\n```\n\n#### Verify the MP\n\nTo verify the MP, run `mp-test` using the same connection we created earlier. If there \nare any `mysql_database` objects that have entries in the \n`table_lock_waits_summary_by_table` table, we should see those returned in the\ncollection result. For example, if the MySQL management pack is configured to collect \n`loadgen`, `mysql`, and `sys`, and the data query returns:\n```\nobject_schema      | count_star | sum_timer_wait | max_timer_wait | min_timer_wait\n-------------------+------------+----------------+----------------+---------------\nmysql              | 0          | 0              |0               | 0\nperformance_schema | 0          | 0              |0               | 0\nsys                | 2          | 3946368        |2255204         | 1691164\n```\nThen we would expect to see entries for each database monitored by MySQL, but new\ndata should be present only for the subset that was also returned by the data query:\n```json\n{\n    "nonExistingObjects": [],\n    "relationships": [],\n    "result": [\n        {\n            "events": [],\n            "key": {\n                "adapterKind": "MySQLAdapter",\n                "identifiers": [\n                    {\n                        "isPartOfUniqueness": true,\n                        "key": "adapter_instance_id",\n                        "value": "347062"\n                    },\n                    {\n                        "isPartOfUniqueness": true,\n                        "key": "database_name",\n                        "value": "loadgen"\n                    }\n                ],\n                "name": "mysql8-1.localnet/loadgen",\n                "objectKind": "mysql_database"\n            },\n            "metrics": [],\n            "properties": []\n        },\n        {\n            "events": [],\n            "key": {\n                "adapterKind": "MySQLAdapter",\n                "identifiers": [\n                    {\n                        "isPartOfUniqueness": true,\n                        "key": "adapter_instance_id",\n                        "value": "347062"\n                    },\n                    {\n                        "isPartOfUniqueness": true,\n                        "key": "database_name",\n                        "value": "mysql"\n                    }\n                ],\n                "name": "mysql8-1.localnet/mysql",\n                "objectKind": "mysql_database"\n            },\n            "metrics": [\n                {\n                    "key": "Table Locks|Count",\n                    "numberValue": 0.0,\n                    "timestamp": 1681767040181\n                },\n                {\n                    "key": "Table Locks|Sum",\n                    "numberValue": 0.0,\n                    "timestamp": 1681767040181\n                },\n                {\n                    "key": "Table Locks|Max",\n                    "numberValue": 0.0,\n                    "timestamp": 1681767040181\n                },\n                {\n                    "key": "Table Locks|Avg",\n                    "numberValue": 0.0,\n                    "timestamp": 1681767040181\n                },\n                {\n                    "key": "Table Locks|Min",\n                    "numberValue": 0.0,\n                    "timestamp": 1681767040181\n                }\n            ],\n            "properties": []\n        },\n        {\n            "events": [],\n            "key": {\n                "adapterKind": "MySQLAdapter",\n                "identifiers": [\n                    {\n                        "isPartOfUniqueness": true,\n                        "key": "adapter_instance_id",\n                        "value": "347062"\n                    },\n                    {\n                        "isPartOfUniqueness": true,\n                        "key": "database_name",\n                        "value": "sys"\n                    }\n                ],\n                "name": "mysql8-1.localnet/sys",\n                "objectKind": "mysql_database"\n            },\n            "metrics": [\n                {\n                    "key": "Table Locks|Count",\n                    "numberValue": 2.0,\n                    "timestamp": 1681767040182\n                },\n                {\n                    "key": "Table Locks|Sum",\n                    "numberValue": 3946368.0,\n                    "timestamp": 1681767040182\n                },\n                {\n                    "key": "Table Locks|Max",\n                    "numberValue": 2255204.0,\n                    "timestamp": 1681767040182\n                },\n                {\n                    "key": "Table Locks|Avg",\n                    "numberValue": 1973184.0,\n                    "timestamp": 1681767040182\n                },\n                {\n                    "key": "Table Locks|Min",\n                    "numberValue": 1691164.0,\n                    "timestamp": 1681767040182\n                }\n            ],\n            "properties": []\n        }\n    ]\n}\n```\n\nWhen everything is working as expected locally using `mp-test`, we can run\n`mp-build` and install on VMware Aria Operations for a final verification.\n\n\n#### Next Steps\n\n* [Adding to an Adapter](doc/adding_to_an_adapter.md)\n    * [Defining an Adapter](doc/adding_to_an_adapter.md#defining-an-adapter)\n    * [Defining an Adapter Instance](doc/adding_to_an_adapter.md#defining-an-adapter-instance)\n    * [Adding a Configuration Field to an Adapter Instance](doc/adding_to_an_adapter.md#adding-a-configuration-field-to-an-adapter-instance)\n    * [Adding a Credential](doc/adding_to_an_adapter.md#adding-a-credential)\n    * [Creating an Adapter Instance](doc/adding_to_an_adapter.md#creating-an-adapter-instance)\n    * [Adding an Object Type](doc/adding_to_an_adapter.md#adding-an-object-type)\n    * [Creating an Object](doc/adding_to_an_adapter.md#creating-an-object)\n    * [Adding an Attribute](doc/adding_to_an_adapter.md#adding-an-attribute)\n    * [Creating a Metric or Property](doc/adding_to_an_adapter.md#creating-a-metric-or-property)\n    * [Creating an Event](doc/adding_to_an_adapter.md#creating-an-event)\n    * [Creating a Relationship](doc/adding_to_an_adapter.md#creating-a-relationship)\n* [Adding Content](doc/adding_content.md)\n    * [Adding a Dashboard](doc/adding_content.md#adding-a-dashboard)\n    * [Adding a Report Template](doc/adding_content.md#adding-a-report-template)\n    * [Adding Alert Definitions](doc/adding_content.md#adding-alert-definitions)\n    * [Adding a Traversal](doc/adding_content.md#adding-a-traversal)\n    * [Adding Localization](doc/adding_content.md#adding-localization)\n\n</details>\n\n## Troubleshooting\nTODO\n\n## Contributing\n\nThe vmware-aria-operations-integration-sdk project team welcomes contributions from the community. Before you start\nworking with this project please read and sign our Contributor License Agreement (https://cla.vmware.com/cla/1/preview).\nIf you wish to contribute code and you have not signed our Contributor Licence Agreement (CLA), our bot will prompt you\nto do so when you open a Pull Request. For any questions about the CLA process, please refer to our\n[FAQ](https://cla.vmware.com/faq).\n\n## License\n\nThis project is licensed under the APACHE-2 License.\n',
    'author': 'Kyle Rokos',
    'author_email': 'krokos@vmware.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/vmware/vrealize-operations-integration-sdk',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
