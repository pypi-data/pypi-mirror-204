# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['pygame_texteditor']

package_data = \
{'': ['*'],
 'pygame_texteditor': ['elements/colorstyles/*',
                       'elements/fonts/*',
                       'elements/graphics/*']}

install_requires = \
['PyYAML>=5.3.1', 'Pygments>=2.6.1', 'pygame>=1.9.6', 'pyperclip>=1.8.1']

setup_kwargs = {
    'name': 'pygame-texteditor',
    'version': '0.7.1',
    'description': 'A WYSIWYG-texteditor based on pygame.',
    'long_description': '# A WYSIWYG-texteditor based on pygame for pygame\n\n![PyPI](https://img.shields.io/pypi/v/pygame-texteditor?color=%233775A9&label=pypi%20package&style=plastic)\n![GitHub](https://img.shields.io/github/license/CribberSix/pygame-texteditor?style=plastic)\n\n## Introduction & examples\n\nThe text editor can be inserted into any existing pygame window.\nA minimal code example of it being activated within an existing pygame window can be found below.\n\nThe code editor comes with line numbers and syntax highlighting for python if enabled:\n\n![](./resources/example_one.png)\n\nExample with default configuration:\n\n![](./resources/example_two.png)\n\n## Usage\n\nThe texteditor takes 5 obligatory parameters and 4 optional parameters.\n\n##### Obligatory parameters\n- ```offset_X``` : integer - the offset from the left border of the pygame screen\n- ```offset_y``` : integer - the offset from the top border of the pygame screen\n- ```editor_width``` : integer - the width of texteditor\n- ```editor_height``` : integer - the height of texteditor\n- ```screen``` : pygame display surface - on which the texteditor is to be displayed\n\n##### Optional Parameters with default values\n\n- ```display_line_numbers``` - a boolean enabling showing line numbers\n    > Default: ```False```\n- ```style``` - a String setting the color scheme of editor and syntax highlighting\n    > Default: ```\'dark\'```\n- ```syntax_highlighting_python``` - a boolean enabling syntax highlighting for Python code\n    > Default: ```False```\n- ```font_size``` - an integer to set for the font size.\n    > Default: ```16```\n\n## Setup and configuration\n\n##### Minimal texteditor setup example\n\n```python\nimport pygame\nfrom pygame_texteditor import TextEditor\n\n# minimal pygame setup\npygame.init()\nscreen = pygame.display.set_mode((500, 600))\npygame.display.set_caption("Pygame")\npygame.display.get_surface().fill((200, 200, 200))  # background coloring\n\n# Instantiation & customization of the text editor\nTX = TextEditor(\n    offset_x=50, offset_y=50, editor_width=500, editor_height=400, screen=pygame.display.get_surface()\n)\nTX.set_line_numbers(True)\nTX.set_syntax_highlighting(True)\nTX.set_font_size(18)\n\n# TextEditor in the pygame-loop\nwhile True:\n    # INPUT - Mouse + Keyboard\n    pygame_events = pygame.event.get()\n    pressed_keys = pygame.key.get_pressed()\n    mouse_x, mouse_y = pygame.mouse.get_pos()\n    mouse_pressed = pygame.mouse.get_pressed()\n\n    # displays editor functionality once per loop\n    TX.display_editor(pygame_events, pressed_keys, mouse_x, mouse_y, mouse_pressed)\n    pygame.display.flip()  # updates pygame window\n\n```\n\n##### Retrieving text from the editor\n\nThe editor offers the function `get_text_as_string()` to retrieve the entire text\nas a String from the editor. Lines are separated by the new line character ```\\n```.\n\nThe editor offers the function `get_text_as_list()` to retrieve the entire text as a list from the editor.\nEach String-item in the list represents one line from the editor.\n\n##### Removing text from the editor\n\nThe editor offers the function `clear_text()` to clear the editor of any text.\n\n##### Inserting text into the editor\n\nInserting text can be done by using one of the two available functions:\n1. With a list of strings in which each string represents one line, or\n2. With a string which includes linebreak characters which get parsed.\n\n```\nset_text_from_list(["First line", "Second Line.", "Third Line."]\nset_text_from_string("First line.\\nSecond line.\\nThird Line")\n```\n\n## Customization\n\n#### Cursor mode\n\nCursor mode can either be `static` or `blinking` (=default).\n\n```python\nTX = TextEditor(...)\nTX.set_cursor_mode("static")\nTX.set_cursor_mode("blinking")\n```\n\n#### Key repetition speeds\n\nWhile a key is being held, multiple key events are being triggered.\nThe delay of the first repetition as well as the interval between all sequential key triggers can be\ncustomized by using the function `set_key_repetition(delay=300, intervall=30)`.\n\nFrom the [official documentation](http://www.pygame.org/docs/ref/key.html#pygame.key.set_repeat):\n> The delay parameter is the number of milliseconds before the first repeated pygame.KEYDOWN event will be sent.\n> After that, another pygame.KEYDOWN event will be sent every interval milliseconds.\n\n\n#### Font Customization\n\nThe editor uses a ttf file to set the font for the editor. By default, the Courier monospace font is used.\n\nA custom font can be loaded with the following method, passing an *absolute* path:\n- `set_font_from_ttf("X:\\path\\to\\custom\\font.ttf")`\n\nDISCLAIMER: As the width of a letter (space) is only calculated once after setting the font_size, any fonts that are not monospace will lead to the editor not working correctly anymore, as it cannot be determined correctly between which letters the user clicked.\n\n#### Font size\n\nFont size can be customized with the command `set_font_size(size)` - the parameter is an integer\nwith the default value `16` to be able to reset it.\n\n#### Line Numbers\nLine numbers can be shown on the left side of the editor. Line numbers begin with 0 as is the Pythonian way.\n\nLine numbers can be enabled and disabled with ```set_line_numbers(Boolean)```.\n\n\n#### Syntax Highlighting\n\nThe editor comes with syntax highlighting for Python code. Tokenization is based on the ```pygment``` package.\n\nSyntax highlighting can be enabled/disabled with ```set_syntax_coloring(boolean_value)```.\n\nThe syntax colors being used are also specified in the yml style file.\n\n\n#### Color-scheme customization\n\nThe editor uses a yml file to set the color-scheme for the editor itself and for the syntax coloring.\n\nTwo styles are delivered with the editor, they can be activated respectively by:\n- `set_colorscheme("dark")`\n- `set_colorscheme("bright")`\n\nA custom style can be loaded with the following method from a created yml file:\n- `set_colorscheme_from_yaml("X:\\path\\to\\custom\\filename.yml")`\n\nAll keys must be present with values. Acceptable values are\nRGB colors in the following format: ```(255, 255, 255)``` or ```255, 255, 255```.\n\nThe following keys are required in the ```stylename.yml``` file, syntax colors are only used if syntax\nhighlighting is enabled, but are still required to be included.\n\n**Editor colors** (source: bright.yml)\n\n- `codingBackgroundColor: (255, 255, 255)`\n- `codingScrollBarBackgroundColor: (49, 50, 50)`\n- `lineNumberColor: (255, 255, 255)`\n- `lineNumberBackgroundColor: (60, 61, 61)`\n- `textColor: (255, 255, 255)`\n\n** Syntax colors** (source: bright.yml)\n\n- `textColor_normal: (0, 255, 255)`\n- `textColor_comments: (119, 115, 115)`\n- `textColor_quotes: (227, 215, 115)`\n- `textColor_operators: (237, 36, 36)`\n- `textColor_keywords: (237, 36, 36)`\n- `textColor_function: (50, 150, 36)`\n- `textColor_builtin: (50, 50, 136)`\n',
    'author': 'Victor Seifert',
    'author_email': 'seifert.victor@web.de',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
