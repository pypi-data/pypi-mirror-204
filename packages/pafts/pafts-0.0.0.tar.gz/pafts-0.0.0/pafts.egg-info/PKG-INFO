Metadata-Version: 2.1
Name: pafts
Version: 0.0.0
Summary: Library That Preprocessing Audio For TTS.
Home-page: https://github.com/harmlessman/PAFTS
Author: harmlessman
Author-email: harmlessman17@gmail.com
License: MIT License
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.8, <3.11
Description-Content-Type: text/markdown
License-File: LICENSE

# PAFTS

### Library That Preprocessing Audio For TTS.

PAFTS is a library for making Text-to-Speech dataset.
TTS data basically requires clean audio files and a text file with text corresponding to each audio file. 
This library makes audio files clean and creates text file with text corresponding to each audio file.


## Description 

PAFTS consist of three main operations.
1. Transform 
2. Delete BGM
3. STT

Transform operations changes the sampling rate(sr), channel, and format of the audio files.

Delete BGM operation removes background music from audio files.

STT operation generates text corresponding to the audio files.


```
# before run()

      path
        ├── 1_001.wav
        ├── 1_002.wav
        ├── 1_003.wav
        ├── 1_004.wav
        └── abc.wav


# after run()
    
      path
        ├── 1_001.wav # Background music removed 
        ├── 1_002.wav # sr, channel, format unified
        ├── 1_003.wav
        ├── 1_004.wav
        ├── abc.wav
        └── text.json
        
        # text.json
        {
              '1_001.wav' : "I have a note.", 
              '1_002.wav' : "I want to eat chicken.",
              '1_003.wav' : "...",
              '1_004.wav' : "...",
              'abc.wav' : "...",   
        }
```

### Note
* Audio files are not provided. Please prepare your own audio files.
* Audio files are appropriate to say one or two sentences for 3 to 10 seconds.
* If the background music is music with lyrics, the background music cannot be removed clearly.
* Google Web Speech is free, but the quality is low, so if you want high quality, use Google Cloud Speech API or Azure STT API


## Features


* Use the [spleeter](https://github.com/deezer/spleeter) to remove background music.
* In STT, you can use [Google Web Speech](https://wicg.github.io/speech-api/), [Google Cloud Speech](https://cloud.google.com/speech-to-text) and [Azure STT](https://azure.microsoft.com/products/cognitive-services/speech-to-text/).
* If you use Google Cloud Speech API or Azure STT API, you need API key.
* ****❗ The audio files may be modified or changed during the Transform process and Delete BGM process, so please back up the original audio files.****
* ****❗ Google Cloud Speech API and Azure STT API will be charged if they exceed the free usage, so please check the price options carefully.****

## Requirements


* python >= 3.8
* spleeter
* pydub
* SpeechRecognition
* tqdm



## Installation


```
pip install pafts
```


## Usage


* Quick start:
    ```
    from pafts import PAFTS
    pafts = PAFTS(dataset_path="your dataset path", language='language')
    pafts.run()
    
  
    # Example
  
    pafts = PAFTS(
        dataset_path='C:\\Users\\82109\\Desktop\\dataset',
        language='en-us',
    )
    pafts.run()
  
  
  
  
    >> Run...
    | > Dataset name : dataset
    | > Path : C:\Users\82109\Desktop\dataset
    | > language : en-us
    | > Number of files : 5
    | > Total duration : 14.760000000000002
    
    > Transform items...
    | > sr : 22050
    | > channel : 1
    | > format : wav
    
    > Delete BGM...
    | > Number of items : 5
    | > Path : C:\Users\82109\Desktop\dataset
    abc.wav: 100%|██████████| 5/5 [00:13<00:00,  2.62s/it]
    | > Number of Success items : 5
    | > Number of failure items : 0
    
    > Preparing STT API...
    | > STT API : google web speech
    | > Dataset name : dataset
    | > Path : C:\Users\82109\Desktop\dataset
    | > language : en-us
    | > Number of files : 5
    | > Total duration : 14.760000000000002
    
    abc.wav: 100%|██████████| 5/5 [00:11<00:00,  2.27s/it]

    | > Numbers of deleted files : 0
    Saved at C:\Users\82109\Desktop\dataset\text.json
    Successfully Completed.
    ```
  
    'dataset_path' is your audio files path.
    'language' is BCP 47 tag.
    You can add a detailed option to the argument of run(). Please refer to the document of the run() for more information.


* If you want to task step by step:
    ```
    from pafts import PAFTS
    pafts = PAFTS(dataset_path="your dataset path", language='language', dataset_name='dataset name', key_path='api key path')
    pafts.transform_items(sr=22050, channel=1, formats='audio format')
    pafts.delete_bgm()
    dic = pafts.stt(stt_api_name='stt api name')
    pafts.save(dic=dic, output_name='text.json')
    ```

* If you want to make key file:
    ```
    from pafts import make_key_file
    make_key_file()    # default path : ./key.json
    ```

    ```
    # key.json
    
    {
        "google_cloud_stt": "credentials_json file path",
        "azure_stt": {
            "key": "KEY",
            "location": "LOCATION"
        }
    }
    ```

* If you want to Flatten directory structure:
    ```
    from pafts import PAFTS
    pafts = PAFTS(dataset_path="your dataset path")
    pafts.flatten()
    ```

    ```
    before dataset structure
    
          path
            ├── a
            │   ├── 1.wav
            │   ├── 2.wav
            │   └── 3.wav
            ├── b
            │   ├── 1.wav
            │   └── 2.wav
            ├── 1.wav
            ├── 2.wav
            └── c
                └── d
                    └── 1.wav
    
    
    after dataset structure
    
          path
            ├── a_1.wav
            ├── a_2.wav
            ├── a_3.wav
            ├── b_1.wav
            ├── b_2.wav
            ├── 1.wav
            ├── 2.wav
            └── c_d_1.wav
    ```





