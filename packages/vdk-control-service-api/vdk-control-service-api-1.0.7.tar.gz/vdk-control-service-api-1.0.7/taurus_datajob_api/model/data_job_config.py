# coding: utf-8

"""
    Versatile Data Kit Control Service API

    The Data Jobs API of Versatile Data Kit Control Service. Data Jobs allows Data Engineers to implement automated pull ingestion (E in ELT) and batch data transformation into a database (T in ELT). See also https://github.com/vmware/versatile-data-kit/wiki/Introduction The API has resource-oriented URLs, JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The API enables creating, deploying, managing and executing Data Jobs in the runtime environment.<br> <br> ![](https://github.com/vmware/versatile-data-kit/wiki/vdk-data-job-lifecycle-state-diagram.png) <br> The API reflects the usual Data Job Development lifecycle:<br> <li> Create a new data job (webhook to further configure the job, e.g authorize its creation, setup permissions, etc). <li> Download keytab. Develop and run the data job locally. <li> Deploy the data job in cloud runtime environment to run on a scheduled basis. <br><br> If Authentication is enabled, pass OAuth2 access token in HTTP header 'Authorization: Bearer [access-token-here]' (https://datatracker.ietf.org/doc/html/rfc6750). <br The API promotes some best practices (inspired by https://12factor.net): <li> Explicitly declare and isolate dependencies. <li> Strict separation of configurations from code. Configurations vary substantially across deploys, code does not. <li> Separation between the build, release/deploy, and run stages. <li> Data Jobs are stateless and share-nothing processes. Any data that needs to be persisted must be stored in a stateful backing service (e.g IProperties). <li> Implementation is assumed to be atomic and idempotent - should be OK for a job to fail somewhere in the middle; subsequent restart should not cause data corruption. <li> Keep development, staging, and production as similar as possible. <br><br> <b>API Evolution</b><br> In the following sections, there are some terms that have a special meaning in the context of the APIs. <br><br> <li> <i>Stable</i> - The implementation of the API has been battle-tested (has been in production for some time). The API is a subject to semantic versioning model and will follow deprecation policy. <li> <i>Experimental</i> - May disappear without notice and is not a subject to semantic versioning. Implementation of the API is not considered stable nor well tested. Generally this is given to clients to experiment within testing environment. Must not be used in production. <li> <i>Deprecated</i> - API is expected to be removed within next one or two major version upgrade. The deprecation notice/comment will say when the API will be removed and what alternatives should be used instead.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from taurus_datajob_api import schemas  # noqa: F401


class DataJobConfig(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Data Job configuration properties.
    """


    class MetaOapg:
        
        class properties:
            db_default_type = schemas.StrSchema
        
            @staticmethod
            def contacts() -> typing.Type['DataJobContacts']:
                return DataJobContacts
        
            @staticmethod
            def schedule() -> typing.Type['DataJobSchedule']:
                return DataJobSchedule
            generate_keytab = schemas.BoolSchema
            enable_execution_notifications = schemas.BoolSchema
            notification_delay_period_minutes = schemas.Int32Schema
            __annotations__ = {
                "db_default_type": db_default_type,
                "contacts": contacts,
                "schedule": schedule,
                "generate_keytab": generate_keytab,
                "enable_execution_notifications": enable_execution_notifications,
                "notification_delay_period_minutes": notification_delay_period_minutes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["db_default_type"]) -> MetaOapg.properties.db_default_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contacts"]) -> 'DataJobContacts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schedule"]) -> 'DataJobSchedule': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generate_keytab"]) -> MetaOapg.properties.generate_keytab: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_execution_notifications"]) -> MetaOapg.properties.enable_execution_notifications: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notification_delay_period_minutes"]) -> MetaOapg.properties.notification_delay_period_minutes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["db_default_type", "contacts", "schedule", "generate_keytab", "enable_execution_notifications", "notification_delay_period_minutes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["db_default_type"]) -> typing.Union[MetaOapg.properties.db_default_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contacts"]) -> typing.Union['DataJobContacts', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schedule"]) -> typing.Union['DataJobSchedule', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generate_keytab"]) -> typing.Union[MetaOapg.properties.generate_keytab, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_execution_notifications"]) -> typing.Union[MetaOapg.properties.enable_execution_notifications, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notification_delay_period_minutes"]) -> typing.Union[MetaOapg.properties.notification_delay_period_minutes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["db_default_type", "contacts", "schedule", "generate_keytab", "enable_execution_notifications", "notification_delay_period_minutes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        db_default_type: typing.Union[MetaOapg.properties.db_default_type, str, schemas.Unset] = schemas.unset,
        contacts: typing.Union['DataJobContacts', schemas.Unset] = schemas.unset,
        schedule: typing.Union['DataJobSchedule', schemas.Unset] = schemas.unset,
        generate_keytab: typing.Union[MetaOapg.properties.generate_keytab, bool, schemas.Unset] = schemas.unset,
        enable_execution_notifications: typing.Union[MetaOapg.properties.enable_execution_notifications, bool, schemas.Unset] = schemas.unset,
        notification_delay_period_minutes: typing.Union[MetaOapg.properties.notification_delay_period_minutes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataJobConfig':
        return super().__new__(
            cls,
            *_args,
            db_default_type=db_default_type,
            contacts=contacts,
            schedule=schedule,
            generate_keytab=generate_keytab,
            enable_execution_notifications=enable_execution_notifications,
            notification_delay_period_minutes=notification_delay_period_minutes,
            _configuration=_configuration,
            **kwargs,
        )

from taurus_datajob_api.model.data_job_contacts import DataJobContacts
from taurus_datajob_api.model.data_job_schedule import DataJobSchedule
