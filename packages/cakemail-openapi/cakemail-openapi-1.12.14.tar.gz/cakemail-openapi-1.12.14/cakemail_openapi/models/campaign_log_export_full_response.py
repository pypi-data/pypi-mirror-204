# coding: utf-8

"""
    Cakemail API

    The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.  # noqa: E501

    The version of the OpenAPI document: 1.12.14
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cakemail_openapi.configuration import Configuration


class CampaignLogExportFullResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'campaign_id': 'int',
        'status': 'CampaignLogExportStatus',
        'description': 'str',
        'requested_by': 'CampaignLogExportRequestedBy',
        'created_on': 'int',
        'expires_on': 'int',
        'progress': 'float'
    }

    attribute_map = {
        'id': 'id',
        'campaign_id': 'campaign_id',
        'status': 'status',
        'description': 'description',
        'requested_by': 'requested_by',
        'created_on': 'created_on',
        'expires_on': 'expires_on',
        'progress': 'progress'
    }

    def __init__(self, id=None, campaign_id=None, status=None, description=None, requested_by=None, created_on=None, expires_on=None, progress=None, local_vars_configuration=None):  # noqa: E501
        """CampaignLogExportFullResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._campaign_id = None
        self._status = None
        self._description = None
        self._requested_by = None
        self._created_on = None
        self._expires_on = None
        self._progress = None
        self.discriminator = None

        self.id = id
        self.campaign_id = campaign_id
        self.status = status
        if description is not None:
            self.description = description
        self.requested_by = requested_by
        self.created_on = created_on
        self.expires_on = expires_on
        self.progress = progress

    @property
    def id(self):
        """Gets the id of this CampaignLogExportFullResponse.  # noqa: E501


        :return: The id of this CampaignLogExportFullResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CampaignLogExportFullResponse.


        :param id: The id of this CampaignLogExportFullResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def campaign_id(self):
        """Gets the campaign_id of this CampaignLogExportFullResponse.  # noqa: E501


        :return: The campaign_id of this CampaignLogExportFullResponse.  # noqa: E501
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this CampaignLogExportFullResponse.


        :param campaign_id: The campaign_id of this CampaignLogExportFullResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and campaign_id is None:  # noqa: E501
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")  # noqa: E501

        self._campaign_id = campaign_id

    @property
    def status(self):
        """Gets the status of this CampaignLogExportFullResponse.  # noqa: E501


        :return: The status of this CampaignLogExportFullResponse.  # noqa: E501
        :rtype: CampaignLogExportStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CampaignLogExportFullResponse.


        :param status: The status of this CampaignLogExportFullResponse.  # noqa: E501
        :type: CampaignLogExportStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def description(self):
        """Gets the description of this CampaignLogExportFullResponse.  # noqa: E501


        :return: The description of this CampaignLogExportFullResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CampaignLogExportFullResponse.


        :param description: The description of this CampaignLogExportFullResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def requested_by(self):
        """Gets the requested_by of this CampaignLogExportFullResponse.  # noqa: E501


        :return: The requested_by of this CampaignLogExportFullResponse.  # noqa: E501
        :rtype: CampaignLogExportRequestedBy
        """
        return self._requested_by

    @requested_by.setter
    def requested_by(self, requested_by):
        """Sets the requested_by of this CampaignLogExportFullResponse.


        :param requested_by: The requested_by of this CampaignLogExportFullResponse.  # noqa: E501
        :type: CampaignLogExportRequestedBy
        """
        if self.local_vars_configuration.client_side_validation and requested_by is None:  # noqa: E501
            raise ValueError("Invalid value for `requested_by`, must not be `None`")  # noqa: E501

        self._requested_by = requested_by

    @property
    def created_on(self):
        """Gets the created_on of this CampaignLogExportFullResponse.  # noqa: E501


        :return: The created_on of this CampaignLogExportFullResponse.  # noqa: E501
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this CampaignLogExportFullResponse.


        :param created_on: The created_on of this CampaignLogExportFullResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and created_on is None:  # noqa: E501
            raise ValueError("Invalid value for `created_on`, must not be `None`")  # noqa: E501

        self._created_on = created_on

    @property
    def expires_on(self):
        """Gets the expires_on of this CampaignLogExportFullResponse.  # noqa: E501


        :return: The expires_on of this CampaignLogExportFullResponse.  # noqa: E501
        :rtype: int
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this CampaignLogExportFullResponse.


        :param expires_on: The expires_on of this CampaignLogExportFullResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and expires_on is None:  # noqa: E501
            raise ValueError("Invalid value for `expires_on`, must not be `None`")  # noqa: E501

        self._expires_on = expires_on

    @property
    def progress(self):
        """Gets the progress of this CampaignLogExportFullResponse.  # noqa: E501


        :return: The progress of this CampaignLogExportFullResponse.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this CampaignLogExportFullResponse.


        :param progress: The progress of this CampaignLogExportFullResponse.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and progress is None:  # noqa: E501
            raise ValueError("Invalid value for `progress`, must not be `None`")  # noqa: E501

        self._progress = progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignLogExportFullResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CampaignLogExportFullResponse):
            return True

        return self.to_dict() != other.to_dict()
