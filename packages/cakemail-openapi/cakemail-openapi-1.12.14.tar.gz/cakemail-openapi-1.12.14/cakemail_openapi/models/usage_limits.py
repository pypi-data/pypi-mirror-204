# coding: utf-8

"""
    Cakemail API

    The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.  # noqa: E501

    The version of the OpenAPI document: 1.12.14
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cakemail_openapi.configuration import Configuration


class UsageLimits(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'starts_on': 'int',
        'per_campaign': 'int',
        'per_month': 'int',
        'maximum_contacts': 'int',
        'lists': 'int',
        'users': 'int',
        'campaign_blueprints': 'int',
        'automation_conditions': 'int',
        'use_campaign_blueprints': 'bool',
        'use_automation_conditions': 'bool',
        'use_automation_customwebhooks': 'bool',
        'use_html_editor': 'bool',
        'use_contact_export': 'bool',
        'use_custom_merge_tags': 'bool',
        'use_list_redirection': 'bool',
        'use_behavioral_segmentation': 'bool',
        'use_ab_split': 'bool',
        'use_smart_email_resource': 'bool',
        'use_smart_blueprint': 'bool',
        'use_brand': 'bool',
        'insert_reseller_logo': 'bool',
        'use_tags_in_automation': 'bool',
        'use_tags': 'bool'
    }

    attribute_map = {
        'starts_on': 'starts_on',
        'per_campaign': 'per_campaign',
        'per_month': 'per_month',
        'maximum_contacts': 'maximum_contacts',
        'lists': 'lists',
        'users': 'users',
        'campaign_blueprints': 'campaign_blueprints',
        'automation_conditions': 'automation_conditions',
        'use_campaign_blueprints': 'use_campaign_blueprints',
        'use_automation_conditions': 'use_automation_conditions',
        'use_automation_customwebhooks': 'use_automation_customwebhooks',
        'use_html_editor': 'use_html_editor',
        'use_contact_export': 'use_contact_export',
        'use_custom_merge_tags': 'use_custom_merge_tags',
        'use_list_redirection': 'use_list_redirection',
        'use_behavioral_segmentation': 'use_behavioral_segmentation',
        'use_ab_split': 'use_ab_split',
        'use_smart_email_resource': 'use_smart_email_resource',
        'use_smart_blueprint': 'use_smart_blueprint',
        'use_brand': 'use_brand',
        'insert_reseller_logo': 'insert_reseller_logo',
        'use_tags_in_automation': 'use_tags_in_automation',
        'use_tags': 'use_tags'
    }

    def __init__(self, starts_on=None, per_campaign=None, per_month=None, maximum_contacts=None, lists=None, users=None, campaign_blueprints=None, automation_conditions=None, use_campaign_blueprints=None, use_automation_conditions=None, use_automation_customwebhooks=None, use_html_editor=None, use_contact_export=None, use_custom_merge_tags=None, use_list_redirection=None, use_behavioral_segmentation=None, use_ab_split=None, use_smart_email_resource=None, use_smart_blueprint=None, use_brand=None, insert_reseller_logo=None, use_tags_in_automation=None, use_tags=None, local_vars_configuration=None):  # noqa: E501
        """UsageLimits - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._starts_on = None
        self._per_campaign = None
        self._per_month = None
        self._maximum_contacts = None
        self._lists = None
        self._users = None
        self._campaign_blueprints = None
        self._automation_conditions = None
        self._use_campaign_blueprints = None
        self._use_automation_conditions = None
        self._use_automation_customwebhooks = None
        self._use_html_editor = None
        self._use_contact_export = None
        self._use_custom_merge_tags = None
        self._use_list_redirection = None
        self._use_behavioral_segmentation = None
        self._use_ab_split = None
        self._use_smart_email_resource = None
        self._use_smart_blueprint = None
        self._use_brand = None
        self._insert_reseller_logo = None
        self._use_tags_in_automation = None
        self._use_tags = None
        self.discriminator = None

        if starts_on is not None:
            self.starts_on = starts_on
        if per_campaign is not None:
            self.per_campaign = per_campaign
        if per_month is not None:
            self.per_month = per_month
        if maximum_contacts is not None:
            self.maximum_contacts = maximum_contacts
        if lists is not None:
            self.lists = lists
        if users is not None:
            self.users = users
        if campaign_blueprints is not None:
            self.campaign_blueprints = campaign_blueprints
        if automation_conditions is not None:
            self.automation_conditions = automation_conditions
        if use_campaign_blueprints is not None:
            self.use_campaign_blueprints = use_campaign_blueprints
        if use_automation_conditions is not None:
            self.use_automation_conditions = use_automation_conditions
        if use_automation_customwebhooks is not None:
            self.use_automation_customwebhooks = use_automation_customwebhooks
        if use_html_editor is not None:
            self.use_html_editor = use_html_editor
        if use_contact_export is not None:
            self.use_contact_export = use_contact_export
        if use_custom_merge_tags is not None:
            self.use_custom_merge_tags = use_custom_merge_tags
        if use_list_redirection is not None:
            self.use_list_redirection = use_list_redirection
        if use_behavioral_segmentation is not None:
            self.use_behavioral_segmentation = use_behavioral_segmentation
        if use_ab_split is not None:
            self.use_ab_split = use_ab_split
        if use_smart_email_resource is not None:
            self.use_smart_email_resource = use_smart_email_resource
        if use_smart_blueprint is not None:
            self.use_smart_blueprint = use_smart_blueprint
        if use_brand is not None:
            self.use_brand = use_brand
        if insert_reseller_logo is not None:
            self.insert_reseller_logo = insert_reseller_logo
        if use_tags_in_automation is not None:
            self.use_tags_in_automation = use_tags_in_automation
        if use_tags is not None:
            self.use_tags = use_tags

    @property
    def starts_on(self):
        """Gets the starts_on of this UsageLimits.  # noqa: E501


        :return: The starts_on of this UsageLimits.  # noqa: E501
        :rtype: int
        """
        return self._starts_on

    @starts_on.setter
    def starts_on(self, starts_on):
        """Sets the starts_on of this UsageLimits.


        :param starts_on: The starts_on of this UsageLimits.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                starts_on is not None and starts_on < 0):  # noqa: E501
            raise ValueError("Invalid value for `starts_on`, must be a value greater than or equal to `0`")  # noqa: E501

        self._starts_on = starts_on

    @property
    def per_campaign(self):
        """Gets the per_campaign of this UsageLimits.  # noqa: E501


        :return: The per_campaign of this UsageLimits.  # noqa: E501
        :rtype: int
        """
        return self._per_campaign

    @per_campaign.setter
    def per_campaign(self, per_campaign):
        """Sets the per_campaign of this UsageLimits.


        :param per_campaign: The per_campaign of this UsageLimits.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                per_campaign is not None and per_campaign < 0):  # noqa: E501
            raise ValueError("Invalid value for `per_campaign`, must be a value greater than or equal to `0`")  # noqa: E501

        self._per_campaign = per_campaign

    @property
    def per_month(self):
        """Gets the per_month of this UsageLimits.  # noqa: E501


        :return: The per_month of this UsageLimits.  # noqa: E501
        :rtype: int
        """
        return self._per_month

    @per_month.setter
    def per_month(self, per_month):
        """Sets the per_month of this UsageLimits.


        :param per_month: The per_month of this UsageLimits.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                per_month is not None and per_month < 0):  # noqa: E501
            raise ValueError("Invalid value for `per_month`, must be a value greater than or equal to `0`")  # noqa: E501

        self._per_month = per_month

    @property
    def maximum_contacts(self):
        """Gets the maximum_contacts of this UsageLimits.  # noqa: E501


        :return: The maximum_contacts of this UsageLimits.  # noqa: E501
        :rtype: int
        """
        return self._maximum_contacts

    @maximum_contacts.setter
    def maximum_contacts(self, maximum_contacts):
        """Sets the maximum_contacts of this UsageLimits.


        :param maximum_contacts: The maximum_contacts of this UsageLimits.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                maximum_contacts is not None and maximum_contacts < 0):  # noqa: E501
            raise ValueError("Invalid value for `maximum_contacts`, must be a value greater than or equal to `0`")  # noqa: E501

        self._maximum_contacts = maximum_contacts

    @property
    def lists(self):
        """Gets the lists of this UsageLimits.  # noqa: E501


        :return: The lists of this UsageLimits.  # noqa: E501
        :rtype: int
        """
        return self._lists

    @lists.setter
    def lists(self, lists):
        """Sets the lists of this UsageLimits.


        :param lists: The lists of this UsageLimits.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                lists is not None and lists < -1):  # noqa: E501
            raise ValueError("Invalid value for `lists`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._lists = lists

    @property
    def users(self):
        """Gets the users of this UsageLimits.  # noqa: E501


        :return: The users of this UsageLimits.  # noqa: E501
        :rtype: int
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this UsageLimits.


        :param users: The users of this UsageLimits.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                users is not None and users < -1):  # noqa: E501
            raise ValueError("Invalid value for `users`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._users = users

    @property
    def campaign_blueprints(self):
        """Gets the campaign_blueprints of this UsageLimits.  # noqa: E501


        :return: The campaign_blueprints of this UsageLimits.  # noqa: E501
        :rtype: int
        """
        return self._campaign_blueprints

    @campaign_blueprints.setter
    def campaign_blueprints(self, campaign_blueprints):
        """Sets the campaign_blueprints of this UsageLimits.


        :param campaign_blueprints: The campaign_blueprints of this UsageLimits.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                campaign_blueprints is not None and campaign_blueprints < -1):  # noqa: E501
            raise ValueError("Invalid value for `campaign_blueprints`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._campaign_blueprints = campaign_blueprints

    @property
    def automation_conditions(self):
        """Gets the automation_conditions of this UsageLimits.  # noqa: E501


        :return: The automation_conditions of this UsageLimits.  # noqa: E501
        :rtype: int
        """
        return self._automation_conditions

    @automation_conditions.setter
    def automation_conditions(self, automation_conditions):
        """Sets the automation_conditions of this UsageLimits.


        :param automation_conditions: The automation_conditions of this UsageLimits.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                automation_conditions is not None and automation_conditions < -1):  # noqa: E501
            raise ValueError("Invalid value for `automation_conditions`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._automation_conditions = automation_conditions

    @property
    def use_campaign_blueprints(self):
        """Gets the use_campaign_blueprints of this UsageLimits.  # noqa: E501


        :return: The use_campaign_blueprints of this UsageLimits.  # noqa: E501
        :rtype: bool
        """
        return self._use_campaign_blueprints

    @use_campaign_blueprints.setter
    def use_campaign_blueprints(self, use_campaign_blueprints):
        """Sets the use_campaign_blueprints of this UsageLimits.


        :param use_campaign_blueprints: The use_campaign_blueprints of this UsageLimits.  # noqa: E501
        :type: bool
        """

        self._use_campaign_blueprints = use_campaign_blueprints

    @property
    def use_automation_conditions(self):
        """Gets the use_automation_conditions of this UsageLimits.  # noqa: E501


        :return: The use_automation_conditions of this UsageLimits.  # noqa: E501
        :rtype: bool
        """
        return self._use_automation_conditions

    @use_automation_conditions.setter
    def use_automation_conditions(self, use_automation_conditions):
        """Sets the use_automation_conditions of this UsageLimits.


        :param use_automation_conditions: The use_automation_conditions of this UsageLimits.  # noqa: E501
        :type: bool
        """

        self._use_automation_conditions = use_automation_conditions

    @property
    def use_automation_customwebhooks(self):
        """Gets the use_automation_customwebhooks of this UsageLimits.  # noqa: E501


        :return: The use_automation_customwebhooks of this UsageLimits.  # noqa: E501
        :rtype: bool
        """
        return self._use_automation_customwebhooks

    @use_automation_customwebhooks.setter
    def use_automation_customwebhooks(self, use_automation_customwebhooks):
        """Sets the use_automation_customwebhooks of this UsageLimits.


        :param use_automation_customwebhooks: The use_automation_customwebhooks of this UsageLimits.  # noqa: E501
        :type: bool
        """

        self._use_automation_customwebhooks = use_automation_customwebhooks

    @property
    def use_html_editor(self):
        """Gets the use_html_editor of this UsageLimits.  # noqa: E501


        :return: The use_html_editor of this UsageLimits.  # noqa: E501
        :rtype: bool
        """
        return self._use_html_editor

    @use_html_editor.setter
    def use_html_editor(self, use_html_editor):
        """Sets the use_html_editor of this UsageLimits.


        :param use_html_editor: The use_html_editor of this UsageLimits.  # noqa: E501
        :type: bool
        """

        self._use_html_editor = use_html_editor

    @property
    def use_contact_export(self):
        """Gets the use_contact_export of this UsageLimits.  # noqa: E501


        :return: The use_contact_export of this UsageLimits.  # noqa: E501
        :rtype: bool
        """
        return self._use_contact_export

    @use_contact_export.setter
    def use_contact_export(self, use_contact_export):
        """Sets the use_contact_export of this UsageLimits.


        :param use_contact_export: The use_contact_export of this UsageLimits.  # noqa: E501
        :type: bool
        """

        self._use_contact_export = use_contact_export

    @property
    def use_custom_merge_tags(self):
        """Gets the use_custom_merge_tags of this UsageLimits.  # noqa: E501


        :return: The use_custom_merge_tags of this UsageLimits.  # noqa: E501
        :rtype: bool
        """
        return self._use_custom_merge_tags

    @use_custom_merge_tags.setter
    def use_custom_merge_tags(self, use_custom_merge_tags):
        """Sets the use_custom_merge_tags of this UsageLimits.


        :param use_custom_merge_tags: The use_custom_merge_tags of this UsageLimits.  # noqa: E501
        :type: bool
        """

        self._use_custom_merge_tags = use_custom_merge_tags

    @property
    def use_list_redirection(self):
        """Gets the use_list_redirection of this UsageLimits.  # noqa: E501


        :return: The use_list_redirection of this UsageLimits.  # noqa: E501
        :rtype: bool
        """
        return self._use_list_redirection

    @use_list_redirection.setter
    def use_list_redirection(self, use_list_redirection):
        """Sets the use_list_redirection of this UsageLimits.


        :param use_list_redirection: The use_list_redirection of this UsageLimits.  # noqa: E501
        :type: bool
        """

        self._use_list_redirection = use_list_redirection

    @property
    def use_behavioral_segmentation(self):
        """Gets the use_behavioral_segmentation of this UsageLimits.  # noqa: E501


        :return: The use_behavioral_segmentation of this UsageLimits.  # noqa: E501
        :rtype: bool
        """
        return self._use_behavioral_segmentation

    @use_behavioral_segmentation.setter
    def use_behavioral_segmentation(self, use_behavioral_segmentation):
        """Sets the use_behavioral_segmentation of this UsageLimits.


        :param use_behavioral_segmentation: The use_behavioral_segmentation of this UsageLimits.  # noqa: E501
        :type: bool
        """

        self._use_behavioral_segmentation = use_behavioral_segmentation

    @property
    def use_ab_split(self):
        """Gets the use_ab_split of this UsageLimits.  # noqa: E501


        :return: The use_ab_split of this UsageLimits.  # noqa: E501
        :rtype: bool
        """
        return self._use_ab_split

    @use_ab_split.setter
    def use_ab_split(self, use_ab_split):
        """Sets the use_ab_split of this UsageLimits.


        :param use_ab_split: The use_ab_split of this UsageLimits.  # noqa: E501
        :type: bool
        """

        self._use_ab_split = use_ab_split

    @property
    def use_smart_email_resource(self):
        """Gets the use_smart_email_resource of this UsageLimits.  # noqa: E501


        :return: The use_smart_email_resource of this UsageLimits.  # noqa: E501
        :rtype: bool
        """
        return self._use_smart_email_resource

    @use_smart_email_resource.setter
    def use_smart_email_resource(self, use_smart_email_resource):
        """Sets the use_smart_email_resource of this UsageLimits.


        :param use_smart_email_resource: The use_smart_email_resource of this UsageLimits.  # noqa: E501
        :type: bool
        """

        self._use_smart_email_resource = use_smart_email_resource

    @property
    def use_smart_blueprint(self):
        """Gets the use_smart_blueprint of this UsageLimits.  # noqa: E501


        :return: The use_smart_blueprint of this UsageLimits.  # noqa: E501
        :rtype: bool
        """
        return self._use_smart_blueprint

    @use_smart_blueprint.setter
    def use_smart_blueprint(self, use_smart_blueprint):
        """Sets the use_smart_blueprint of this UsageLimits.


        :param use_smart_blueprint: The use_smart_blueprint of this UsageLimits.  # noqa: E501
        :type: bool
        """

        self._use_smart_blueprint = use_smart_blueprint

    @property
    def use_brand(self):
        """Gets the use_brand of this UsageLimits.  # noqa: E501


        :return: The use_brand of this UsageLimits.  # noqa: E501
        :rtype: bool
        """
        return self._use_brand

    @use_brand.setter
    def use_brand(self, use_brand):
        """Sets the use_brand of this UsageLimits.


        :param use_brand: The use_brand of this UsageLimits.  # noqa: E501
        :type: bool
        """

        self._use_brand = use_brand

    @property
    def insert_reseller_logo(self):
        """Gets the insert_reseller_logo of this UsageLimits.  # noqa: E501


        :return: The insert_reseller_logo of this UsageLimits.  # noqa: E501
        :rtype: bool
        """
        return self._insert_reseller_logo

    @insert_reseller_logo.setter
    def insert_reseller_logo(self, insert_reseller_logo):
        """Sets the insert_reseller_logo of this UsageLimits.


        :param insert_reseller_logo: The insert_reseller_logo of this UsageLimits.  # noqa: E501
        :type: bool
        """

        self._insert_reseller_logo = insert_reseller_logo

    @property
    def use_tags_in_automation(self):
        """Gets the use_tags_in_automation of this UsageLimits.  # noqa: E501


        :return: The use_tags_in_automation of this UsageLimits.  # noqa: E501
        :rtype: bool
        """
        return self._use_tags_in_automation

    @use_tags_in_automation.setter
    def use_tags_in_automation(self, use_tags_in_automation):
        """Sets the use_tags_in_automation of this UsageLimits.


        :param use_tags_in_automation: The use_tags_in_automation of this UsageLimits.  # noqa: E501
        :type: bool
        """

        self._use_tags_in_automation = use_tags_in_automation

    @property
    def use_tags(self):
        """Gets the use_tags of this UsageLimits.  # noqa: E501


        :return: The use_tags of this UsageLimits.  # noqa: E501
        :rtype: bool
        """
        return self._use_tags

    @use_tags.setter
    def use_tags(self, use_tags):
        """Sets the use_tags of this UsageLimits.


        :param use_tags: The use_tags of this UsageLimits.  # noqa: E501
        :type: bool
        """

        self._use_tags = use_tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsageLimits):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UsageLimits):
            return True

        return self.to_dict() != other.to_dict()
