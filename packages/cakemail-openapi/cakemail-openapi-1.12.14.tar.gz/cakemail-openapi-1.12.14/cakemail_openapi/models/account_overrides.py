# coding: utf-8

"""
    Cakemail API

    The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.  # noqa: E501

    The version of the OpenAPI document: 1.12.14
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cakemail_openapi.configuration import Configuration


class AccountOverrides(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bypass_recaptcha': 'bool',
        'inject_address': 'bool',
        'inject_unsubscribe_link': 'bool'
    }

    attribute_map = {
        'bypass_recaptcha': 'bypass_recaptcha',
        'inject_address': 'inject_address',
        'inject_unsubscribe_link': 'inject_unsubscribe_link'
    }

    def __init__(self, bypass_recaptcha=None, inject_address=None, inject_unsubscribe_link=None, local_vars_configuration=None):  # noqa: E501
        """AccountOverrides - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bypass_recaptcha = None
        self._inject_address = None
        self._inject_unsubscribe_link = None
        self.discriminator = None

        self.bypass_recaptcha = bypass_recaptcha
        self.inject_address = inject_address
        self.inject_unsubscribe_link = inject_unsubscribe_link

    @property
    def bypass_recaptcha(self):
        """Gets the bypass_recaptcha of this AccountOverrides.  # noqa: E501


        :return: The bypass_recaptcha of this AccountOverrides.  # noqa: E501
        :rtype: bool
        """
        return self._bypass_recaptcha

    @bypass_recaptcha.setter
    def bypass_recaptcha(self, bypass_recaptcha):
        """Sets the bypass_recaptcha of this AccountOverrides.


        :param bypass_recaptcha: The bypass_recaptcha of this AccountOverrides.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and bypass_recaptcha is None:  # noqa: E501
            raise ValueError("Invalid value for `bypass_recaptcha`, must not be `None`")  # noqa: E501

        self._bypass_recaptcha = bypass_recaptcha

    @property
    def inject_address(self):
        """Gets the inject_address of this AccountOverrides.  # noqa: E501


        :return: The inject_address of this AccountOverrides.  # noqa: E501
        :rtype: bool
        """
        return self._inject_address

    @inject_address.setter
    def inject_address(self, inject_address):
        """Sets the inject_address of this AccountOverrides.


        :param inject_address: The inject_address of this AccountOverrides.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and inject_address is None:  # noqa: E501
            raise ValueError("Invalid value for `inject_address`, must not be `None`")  # noqa: E501

        self._inject_address = inject_address

    @property
    def inject_unsubscribe_link(self):
        """Gets the inject_unsubscribe_link of this AccountOverrides.  # noqa: E501


        :return: The inject_unsubscribe_link of this AccountOverrides.  # noqa: E501
        :rtype: bool
        """
        return self._inject_unsubscribe_link

    @inject_unsubscribe_link.setter
    def inject_unsubscribe_link(self, inject_unsubscribe_link):
        """Sets the inject_unsubscribe_link of this AccountOverrides.


        :param inject_unsubscribe_link: The inject_unsubscribe_link of this AccountOverrides.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and inject_unsubscribe_link is None:  # noqa: E501
            raise ValueError("Invalid value for `inject_unsubscribe_link`, must not be `None`")  # noqa: E501

        self._inject_unsubscribe_link = inject_unsubscribe_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountOverrides):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountOverrides):
            return True

        return self.to_dict() != other.to_dict()
