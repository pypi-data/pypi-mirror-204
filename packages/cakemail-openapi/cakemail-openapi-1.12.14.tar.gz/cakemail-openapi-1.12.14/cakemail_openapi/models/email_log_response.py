# coding: utf-8

"""
    Cakemail API

    The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.  # noqa: E501

    The version of the OpenAPI document: 1.12.14
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cakemail_openapi.configuration import Configuration


class EmailLogResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'sent_id': 'int',
        'email_id': 'int',
        'group_id': 'int',
        'email': 'str',
        'type': 'EventTypeResponse',
        'timestamp': 'int',
        'user_agent': 'UserInfo',
        'clickthru_url': 'str',
        'dsn_message': 'str',
        'sender_name': 'str',
        'sender_email': 'str',
        'source_ip': 'str',
        'envelope_from': 'str',
        'additional_headers': 'list[AdditionalEmailHeader]'
    }

    attribute_map = {
        'id': 'id',
        'sent_id': 'sent_id',
        'email_id': 'email_id',
        'group_id': 'group_id',
        'email': 'email',
        'type': 'type',
        'timestamp': 'timestamp',
        'user_agent': 'user_agent',
        'clickthru_url': 'clickthru_url',
        'dsn_message': 'dsn_message',
        'sender_name': 'sender_name',
        'sender_email': 'sender_email',
        'source_ip': 'source_ip',
        'envelope_from': 'envelope_from',
        'additional_headers': 'additional_headers'
    }

    def __init__(self, id=None, sent_id=None, email_id=None, group_id=None, email=None, type=None, timestamp=None, user_agent=None, clickthru_url=None, dsn_message=None, sender_name=None, sender_email=None, source_ip=None, envelope_from=None, additional_headers=None, local_vars_configuration=None):  # noqa: E501
        """EmailLogResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._sent_id = None
        self._email_id = None
        self._group_id = None
        self._email = None
        self._type = None
        self._timestamp = None
        self._user_agent = None
        self._clickthru_url = None
        self._dsn_message = None
        self._sender_name = None
        self._sender_email = None
        self._source_ip = None
        self._envelope_from = None
        self._additional_headers = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if sent_id is not None:
            self.sent_id = sent_id
        if email_id is not None:
            self.email_id = email_id
        if group_id is not None:
            self.group_id = group_id
        if email is not None:
            self.email = email
        if type is not None:
            self.type = type
        if timestamp is not None:
            self.timestamp = timestamp
        if user_agent is not None:
            self.user_agent = user_agent
        if clickthru_url is not None:
            self.clickthru_url = clickthru_url
        if dsn_message is not None:
            self.dsn_message = dsn_message
        if sender_name is not None:
            self.sender_name = sender_name
        if sender_email is not None:
            self.sender_email = sender_email
        if source_ip is not None:
            self.source_ip = source_ip
        if envelope_from is not None:
            self.envelope_from = envelope_from
        if additional_headers is not None:
            self.additional_headers = additional_headers

    @property
    def id(self):
        """Gets the id of this EmailLogResponse.  # noqa: E501


        :return: The id of this EmailLogResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmailLogResponse.


        :param id: The id of this EmailLogResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def sent_id(self):
        """Gets the sent_id of this EmailLogResponse.  # noqa: E501


        :return: The sent_id of this EmailLogResponse.  # noqa: E501
        :rtype: int
        """
        return self._sent_id

    @sent_id.setter
    def sent_id(self, sent_id):
        """Sets the sent_id of this EmailLogResponse.


        :param sent_id: The sent_id of this EmailLogResponse.  # noqa: E501
        :type: int
        """

        self._sent_id = sent_id

    @property
    def email_id(self):
        """Gets the email_id of this EmailLogResponse.  # noqa: E501


        :return: The email_id of this EmailLogResponse.  # noqa: E501
        :rtype: int
        """
        return self._email_id

    @email_id.setter
    def email_id(self, email_id):
        """Sets the email_id of this EmailLogResponse.


        :param email_id: The email_id of this EmailLogResponse.  # noqa: E501
        :type: int
        """

        self._email_id = email_id

    @property
    def group_id(self):
        """Gets the group_id of this EmailLogResponse.  # noqa: E501


        :return: The group_id of this EmailLogResponse.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this EmailLogResponse.


        :param group_id: The group_id of this EmailLogResponse.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def email(self):
        """Gets the email of this EmailLogResponse.  # noqa: E501


        :return: The email of this EmailLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EmailLogResponse.


        :param email: The email of this EmailLogResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def type(self):
        """Gets the type of this EmailLogResponse.  # noqa: E501


        :return: The type of this EmailLogResponse.  # noqa: E501
        :rtype: EventTypeResponse
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EmailLogResponse.


        :param type: The type of this EmailLogResponse.  # noqa: E501
        :type: EventTypeResponse
        """

        self._type = type

    @property
    def timestamp(self):
        """Gets the timestamp of this EmailLogResponse.  # noqa: E501


        :return: The timestamp of this EmailLogResponse.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this EmailLogResponse.


        :param timestamp: The timestamp of this EmailLogResponse.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def user_agent(self):
        """Gets the user_agent of this EmailLogResponse.  # noqa: E501


        :return: The user_agent of this EmailLogResponse.  # noqa: E501
        :rtype: UserInfo
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this EmailLogResponse.


        :param user_agent: The user_agent of this EmailLogResponse.  # noqa: E501
        :type: UserInfo
        """

        self._user_agent = user_agent

    @property
    def clickthru_url(self):
        """Gets the clickthru_url of this EmailLogResponse.  # noqa: E501


        :return: The clickthru_url of this EmailLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._clickthru_url

    @clickthru_url.setter
    def clickthru_url(self, clickthru_url):
        """Sets the clickthru_url of this EmailLogResponse.


        :param clickthru_url: The clickthru_url of this EmailLogResponse.  # noqa: E501
        :type: str
        """

        self._clickthru_url = clickthru_url

    @property
    def dsn_message(self):
        """Gets the dsn_message of this EmailLogResponse.  # noqa: E501


        :return: The dsn_message of this EmailLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._dsn_message

    @dsn_message.setter
    def dsn_message(self, dsn_message):
        """Sets the dsn_message of this EmailLogResponse.


        :param dsn_message: The dsn_message of this EmailLogResponse.  # noqa: E501
        :type: str
        """

        self._dsn_message = dsn_message

    @property
    def sender_name(self):
        """Gets the sender_name of this EmailLogResponse.  # noqa: E501


        :return: The sender_name of this EmailLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._sender_name

    @sender_name.setter
    def sender_name(self, sender_name):
        """Sets the sender_name of this EmailLogResponse.


        :param sender_name: The sender_name of this EmailLogResponse.  # noqa: E501
        :type: str
        """

        self._sender_name = sender_name

    @property
    def sender_email(self):
        """Gets the sender_email of this EmailLogResponse.  # noqa: E501


        :return: The sender_email of this EmailLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._sender_email

    @sender_email.setter
    def sender_email(self, sender_email):
        """Sets the sender_email of this EmailLogResponse.


        :param sender_email: The sender_email of this EmailLogResponse.  # noqa: E501
        :type: str
        """

        self._sender_email = sender_email

    @property
    def source_ip(self):
        """Gets the source_ip of this EmailLogResponse.  # noqa: E501


        :return: The source_ip of this EmailLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._source_ip

    @source_ip.setter
    def source_ip(self, source_ip):
        """Sets the source_ip of this EmailLogResponse.


        :param source_ip: The source_ip of this EmailLogResponse.  # noqa: E501
        :type: str
        """

        self._source_ip = source_ip

    @property
    def envelope_from(self):
        """Gets the envelope_from of this EmailLogResponse.  # noqa: E501


        :return: The envelope_from of this EmailLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._envelope_from

    @envelope_from.setter
    def envelope_from(self, envelope_from):
        """Sets the envelope_from of this EmailLogResponse.


        :param envelope_from: The envelope_from of this EmailLogResponse.  # noqa: E501
        :type: str
        """

        self._envelope_from = envelope_from

    @property
    def additional_headers(self):
        """Gets the additional_headers of this EmailLogResponse.  # noqa: E501


        :return: The additional_headers of this EmailLogResponse.  # noqa: E501
        :rtype: list[AdditionalEmailHeader]
        """
        return self._additional_headers

    @additional_headers.setter
    def additional_headers(self, additional_headers):
        """Sets the additional_headers of this EmailLogResponse.


        :param additional_headers: The additional_headers of this EmailLogResponse.  # noqa: E501
        :type: list[AdditionalEmailHeader]
        """

        self._additional_headers = additional_headers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailLogResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailLogResponse):
            return True

        return self.to_dict() != other.to_dict()
