# coding: utf-8

"""
    Cakemail API

    The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.  # noqa: E501

    The version of the OpenAPI document: 1.12.14
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cakemail_openapi.configuration import Configuration


class ApiServicesWebhooksSchemasWebhook(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'status': 'WebhookStatus',
        'event': 'EventType',
        'url': 'str',
        'archived_at': 'int',
        'rate_limit': 'int',
        'rate_limit_period': 'RateLimitPeriod'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'event': 'event',
        'url': 'url',
        'archived_at': 'archived_at',
        'rate_limit': 'rate_limit',
        'rate_limit_period': 'rate_limit_period'
    }

    def __init__(self, id=None, status=None, event=None, url=None, archived_at=None, rate_limit=None, rate_limit_period=None, local_vars_configuration=None):  # noqa: E501
        """ApiServicesWebhooksSchemasWebhook - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._status = None
        self._event = None
        self._url = None
        self._archived_at = None
        self._rate_limit = None
        self._rate_limit_period = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if event is not None:
            self.event = event
        if url is not None:
            self.url = url
        if archived_at is not None:
            self.archived_at = archived_at
        if rate_limit is not None:
            self.rate_limit = rate_limit
        if rate_limit_period is not None:
            self.rate_limit_period = rate_limit_period

    @property
    def id(self):
        """Gets the id of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501


        :return: The id of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiServicesWebhooksSchemasWebhook.


        :param id: The id of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501


        :return: The status of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501
        :rtype: WebhookStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApiServicesWebhooksSchemasWebhook.


        :param status: The status of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501
        :type: WebhookStatus
        """

        self._status = status

    @property
    def event(self):
        """Gets the event of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501


        :return: The event of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501
        :rtype: EventType
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this ApiServicesWebhooksSchemasWebhook.


        :param event: The event of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501
        :type: EventType
        """

        self._event = event

    @property
    def url(self):
        """Gets the url of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501


        :return: The url of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ApiServicesWebhooksSchemasWebhook.


        :param url: The url of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) > 2083):
            raise ValueError("Invalid value for `url`, length must be less than or equal to `2083`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) < 1):
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")  # noqa: E501

        self._url = url

    @property
    def archived_at(self):
        """Gets the archived_at of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501


        :return: The archived_at of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501
        :rtype: int
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this ApiServicesWebhooksSchemasWebhook.


        :param archived_at: The archived_at of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501
        :type: int
        """

        self._archived_at = archived_at

    @property
    def rate_limit(self):
        """Gets the rate_limit of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501


        :return: The rate_limit of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501
        :rtype: int
        """
        return self._rate_limit

    @rate_limit.setter
    def rate_limit(self, rate_limit):
        """Sets the rate_limit of this ApiServicesWebhooksSchemasWebhook.


        :param rate_limit: The rate_limit of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501
        :type: int
        """

        self._rate_limit = rate_limit

    @property
    def rate_limit_period(self):
        """Gets the rate_limit_period of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501


        :return: The rate_limit_period of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501
        :rtype: RateLimitPeriod
        """
        return self._rate_limit_period

    @rate_limit_period.setter
    def rate_limit_period(self, rate_limit_period):
        """Sets the rate_limit_period of this ApiServicesWebhooksSchemasWebhook.


        :param rate_limit_period: The rate_limit_period of this ApiServicesWebhooksSchemasWebhook.  # noqa: E501
        :type: RateLimitPeriod
        """

        self._rate_limit_period = rate_limit_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiServicesWebhooksSchemasWebhook):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiServicesWebhooksSchemasWebhook):
            return True

        return self.to_dict() != other.to_dict()
