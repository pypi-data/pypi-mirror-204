# coding: utf-8

"""
    Cakemail API

    The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.  # noqa: E501

    The version of the OpenAPI document: 1.12.14
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cakemail_openapi.configuration import Configuration


class Languages(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    DA = "da"
    DA_DK = "da_DK"
    DE = "de"
    DE_DE = "de_DE"
    EL = "el"
    EL_GR = "el_GR"
    EN = "en"
    EN_US = "en_US"
    EN_GB = "en_GB"
    EN_UK = "en_UK"
    ES = "es"
    ES_US = "es_US"
    ES_ES = "es_ES"
    ET = "et"
    ET_EE = "et_EE"
    FI = "fi"
    FI_FI = "fi_FI"
    FR = "fr"
    FR_CA = "fr_CA"
    FR_FR = "fr_FR"
    HE = "he"
    HE_IL = "he_IL"
    ID = "id"
    ID_ID = "id_ID"
    IT = "it"
    IT_IT = "it_IT"
    JA = "ja"
    JA_JP = "ja_JP"
    NL = "nl"
    NL_NL = "nl_NL"
    NO = "no"
    NO_NO = "no_NO"
    PT = "pt"
    PT_BR = "pt_BR"
    RO = "ro"
    RO_RO = "ro_RO"
    RU = "ru"
    RU_RU = "ru_RU"
    SV = "sv"
    SV_SE = "sv_SE"
    TH = "th"
    TH_TH = "th_TH"
    TR = "tr"
    TR_TR = "tr_TR"
    VI = "vi"
    VI_VN = "vi_VN"
    ZH = "zh"
    ZH_CN = "zh_CN"
    AA = "aa"
    AB = "ab"
    AE = "ae"
    AF = "af"
    AK = "ak"
    AM = "am"
    AN = "an"
    AR = "ar"
    AV = "av"
    AY = "ay"
    AZ = "az"
    BA = "ba"
    BE = "be"
    BG = "bg"
    BH = "bh"
    BI = "bi"
    BM = "bm"
    BN = "bn"
    BO = "bo"
    BR = "br"
    BS = "bs"
    CA = "ca"
    CE = "ce"
    CH = "ch"
    CO = "co"
    CR = "cr"
    CS = "cs"
    CU = "cu"
    CV = "cv"
    CY = "cy"
    DV = "dv"
    DZ = "dz"
    EE = "ee"
    EO = "eo"
    EU = "eu"
    FA = "fa"
    FF = "ff"
    FJ = "fj"
    FO = "fo"
    FY = "fy"
    GA = "ga"
    GD = "gd"
    GL = "gl"
    GN = "gn"
    GU = "gu"
    GV = "gv"
    HA = "ha"
    HI = "hi"
    HO = "ho"
    HR = "hr"
    HT = "ht"
    HU = "hu"
    HY = "hy"
    HZ = "hz"
    IA = "ia"
    IE = "ie"
    IG = "ig"
    II = "ii"
    IK = "ik"
    IO = "io"
    IS_IS = "is_IS"
    IU = "iu"
    JV = "jv"
    KA = "ka"
    KG = "kg"
    KI = "ki"
    KJ = "kj"
    KK = "kk"
    KL = "kl"
    KM = "km"
    KN = "kn"
    KO = "ko"
    KR = "kr"
    KS = "ks"
    KU = "ku"
    KV = "kv"
    KW = "kw"
    KY = "ky"
    LA = "la"
    LB = "lb"
    LG = "lg"
    LI = "li"
    LN = "ln"
    LO = "lo"
    LT = "lt"
    LU = "lu"
    LV = "lv"
    MG = "mg"
    MH = "mh"
    MI = "mi"
    MK = "mk"
    ML = "ml"
    MN = "mn"
    MR = "mr"
    MS = "ms"
    MT = "mt"
    MY = "my"
    NA = "na"
    NB = "nb"
    ND = "nd"
    NE = "ne"
    NG = "ng"
    NN = "nn"
    NR = "nr"
    NV = "nv"
    NY = "ny"
    OC = "oc"
    OJ = "oj"
    OM = "om"
    OS = "os"
    PA = "pa"
    PI = "pi"
    PL = "pl"
    PS = "ps"
    QU = "qu"
    RM = "rm"
    RN = "rn"
    RW = "rw"
    SA = "sa"
    SC = "sc"
    SD = "sd"
    SE = "se"
    SG = "sg"
    SI = "si"
    SK = "sk"
    SL = "sl"
    SM = "sm"
    SN = "sn"
    SO = "so"
    SQ = "sq"
    SR = "sr"
    SS = "ss"
    ST = "st"
    SU = "su"
    SW = "sw"
    TA = "ta"
    TE = "te"
    TG = "tg"
    TI = "ti"
    TK = "tk"
    TL = "tl"
    TN = "tn"
    TO = "to"
    TS = "ts"
    TT = "tt"
    TW = "tw"
    TY = "ty"
    UG = "ug"
    UK = "uk"
    UR = "ur"
    UZ = "uz"
    VE = "ve"
    VO = "vo"
    WA = "wa"
    WO = "wo"
    XH = "xh"
    YI = "yi"
    YO = "yo"
    ZA = "za"
    ZU = "zu"

    allowable_values = [DA, DA_DK, DE, DE_DE, EL, EL_GR, EN, EN_US, EN_GB, EN_UK, ES, ES_US, ES_ES, ET, ET_EE, FI, FI_FI, FR, FR_CA, FR_FR, HE, HE_IL, ID, ID_ID, IT, IT_IT, JA, JA_JP, NL, NL_NL, NO, NO_NO, PT, PT_BR, RO, RO_RO, RU, RU_RU, SV, SV_SE, TH, TH_TH, TR, TR_TR, VI, VI_VN, ZH, ZH_CN, AA, AB, AE, AF, AK, AM, AN, AR, AV, AY, AZ, BA, BE, BG, BH, BI, BM, BN, BO, BR, BS, CA, CE, CH, CO, CR, CS, CU, CV, CY, DV, DZ, EE, EO, EU, FA, FF, FJ, FO, FY, GA, GD, GL, GN, GU, GV, HA, HI, HO, HR, HT, HU, HY, HZ, IA, IE, IG, II, IK, IO, IS_IS, IU, JV, KA, KG, KI, KJ, KK, KL, KM, KN, KO, KR, KS, KU, KV, KW, KY, LA, LB, LG, LI, LN, LO, LT, LU, LV, MG, MH, MI, MK, ML, MN, MR, MS, MT, MY, NA, NB, ND, NE, NG, NN, NR, NV, NY, OC, OJ, OM, OS, PA, PI, PL, PS, QU, RM, RN, RW, SA, SC, SD, SE, SG, SI, SK, SL, SM, SN, SO, SQ, SR, SS, ST, SU, SW, TA, TE, TG, TI, TK, TL, TN, TO, TS, TT, TW, TY, UG, UK, UR, UZ, VE, VO, WA, WO, XH, YI, YO, ZA, ZU]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """Languages - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Languages):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Languages):
            return True

        return self.to_dict() != other.to_dict()
