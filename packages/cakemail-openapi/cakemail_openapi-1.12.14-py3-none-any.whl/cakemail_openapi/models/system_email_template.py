# coding: utf-8

"""
    Cakemail API

    The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.  # noqa: E501

    The version of the OpenAPI document: 1.12.14
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cakemail_openapi.configuration import Configuration


class SystemEmailTemplate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'language': 'Languages',
        'template': 'TemplateId',
        'sender': 'Sender'
    }

    attribute_map = {
        'language': 'language',
        'template': 'template',
        'sender': 'sender'
    }

    def __init__(self, language=None, template=None, sender=None, local_vars_configuration=None):  # noqa: E501
        """SystemEmailTemplate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._language = None
        self._template = None
        self._sender = None
        self.discriminator = None

        self.language = language
        self.template = template
        if sender is not None:
            self.sender = sender

    @property
    def language(self):
        """Gets the language of this SystemEmailTemplate.  # noqa: E501


        :return: The language of this SystemEmailTemplate.  # noqa: E501
        :rtype: Languages
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SystemEmailTemplate.


        :param language: The language of this SystemEmailTemplate.  # noqa: E501
        :type: Languages
        """
        if self.local_vars_configuration.client_side_validation and language is None:  # noqa: E501
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def template(self):
        """Gets the template of this SystemEmailTemplate.  # noqa: E501


        :return: The template of this SystemEmailTemplate.  # noqa: E501
        :rtype: TemplateId
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this SystemEmailTemplate.


        :param template: The template of this SystemEmailTemplate.  # noqa: E501
        :type: TemplateId
        """
        if self.local_vars_configuration.client_side_validation and template is None:  # noqa: E501
            raise ValueError("Invalid value for `template`, must not be `None`")  # noqa: E501

        self._template = template

    @property
    def sender(self):
        """Gets the sender of this SystemEmailTemplate.  # noqa: E501


        :return: The sender of this SystemEmailTemplate.  # noqa: E501
        :rtype: Sender
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this SystemEmailTemplate.


        :param sender: The sender of this SystemEmailTemplate.  # noqa: E501
        :type: Sender
        """

        self._sender = sender

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemEmailTemplate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SystemEmailTemplate):
            return True

        return self.to_dict() != other.to_dict()
