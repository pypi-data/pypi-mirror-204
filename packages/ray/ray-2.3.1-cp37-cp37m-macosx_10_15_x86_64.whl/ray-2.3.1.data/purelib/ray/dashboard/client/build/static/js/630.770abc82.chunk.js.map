{"version":3,"file":"static/js/630.770abc82.chunk.js","mappings":"0TAiBMA,GAAWC,EAAAA,EAAAA,IAAW,SAACC,GAAK,MAAM,CACtCC,KAAM,CACJC,QAASF,EAAMG,QAAQ,IAEzBC,MAAO,CACLC,WAAY,QAEf,IAEKC,EAAS,SAACC,EAAaC,GAC3B,MAAY,oBAARD,GACKE,EAAAA,EAAAA,GAAwB,KAARD,EAAe,MAEjCE,KAAKC,UAAUH,EACxB,EAEMI,EAAW,WACf,OAA+BC,EAAAA,EAAAA,YAAqB,eAA7CC,EAAS,KAAEC,EAAS,KAC3B,GAA0BF,EAAAA,EAAAA,UAAuB,IAAG,eAA7CG,EAAK,KAAEC,EAAQ,KAgBtB,OAfAC,EAAAA,EAAAA,YAAU,YChCHC,EAAAA,EAAAA,GAAkB,kBDiCRC,MAAK,SAACC,GAAS,IAAD,IACpB,OAAHA,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKC,YAAI,OAAM,QAAN,EAAT,EAAWA,YAAI,OAAf,EAAiBC,QACnBR,EAAUM,EAAIC,KAAKA,KAAKC,OAE5B,GACF,GAAG,KACHL,EAAAA,EAAAA,YAAU,YACRM,EAAAA,EAAAA,KAAcJ,MAAK,SAACC,GAAS,IAAD,IACnB,OAAHA,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKC,YAAI,OAAM,QAAN,EAAT,EAAWA,YAAI,OAAf,EAAiBG,SACnBR,EAASI,EAAIC,KAAKA,KAAKG,QAE3B,GACF,GAAG,IAEI,CAAEX,UAAAA,EAAWE,MAAAA,EACtB,EAyDA,EAvDc,WACZ,IAAQF,EAAcF,IAAdE,UACFY,EAAU5B,IAEhB,OACE,iBAAK6B,UAAWD,EAAQzB,KAAK,WAC3B,UAAC2B,EAAA,EAAS,CAACC,OAAgB,OAATf,QAAS,IAATA,OAAS,EAATA,EAAWgB,cAAe,UAAU,WACpD,wDAAgCC,MACtB,OAATjB,QAAS,IAATA,OAAS,EAATA,EAAWkB,YACV,sCACa,KACX,cACEC,KAAMnB,EAAUkB,SAChBE,OAAO,SACPC,IAAI,sBAAqB,SAExBrB,EAAUkB,eAIP,OAATlB,QAAS,IAATA,OAAS,EAATA,EAAWsB,kBACV,wCACe,KACb,cACEH,KAAMnB,EAAUsB,eAChBF,OAAO,SACPC,IAAI,sBAAqB,SAExBrB,EAAUsB,uBAKlBtB,IACC,SAACc,EAAA,EAAS,CAACC,MAAM,SAAQ,UACvB,UAACQ,EAAA,EAAc,YACb,UAACC,EAAA,EAAS,YACR,SAACC,EAAA,EAAS,mBACV,SAACA,EAAA,EAAS,wBAEZ,SAACC,EAAA,EAAS,UACPC,OAAOC,QAAQ5B,GAAW6B,KAAI,+BAAEpC,EAAG,KAAEC,EAAK,YACzC,UAACoC,EAAA,EAAQ,YACP,SAACL,EAAA,EAAS,CAACZ,UAAWD,EAAQtB,MAAM,SAAEG,KACtC,SAACgC,EAAA,EAAS,UAAEjC,EAAOC,EAAKC,OACf,aAQ3B,C","sources":["pages/index/Index.tsx","service/cluster.ts"],"sourcesContent":["import {\n  makeStyles,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport packageInfo from \"../../../package.json\";\nimport TitleCard from \"../../components/TitleCard\";\nimport { getRayConfig } from \"../../service/cluster\";\nimport { getNodeList } from \"../../service/node\";\nimport { RayConfig } from \"../../type/config\";\nimport { NodeDetail } from \"../../type/node\";\nimport { memoryConverter } from \"../../util/converter\";\n\nconst useStyle = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n  label: {\n    fontWeight: \"bold\",\n  },\n}));\n\nconst getVal = (key: string, value: any) => {\n  if (key === \"containerMemory\") {\n    return memoryConverter(value * 1024 * 1024);\n  }\n  return JSON.stringify(value);\n};\n\nconst useIndex = () => {\n  const [rayConfig, setConfig] = useState<RayConfig>();\n  const [nodes, setNodes] = useState<NodeDetail[]>([]);\n  useEffect(() => {\n    getRayConfig().then((res) => {\n      if (res?.data?.data?.config) {\n        setConfig(res.data.data.config);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    getNodeList().then((res) => {\n      if (res?.data?.data?.summary) {\n        setNodes(res.data.data.summary);\n      }\n    });\n  }, []);\n\n  return { rayConfig, nodes };\n};\n\nconst Index = () => {\n  const { rayConfig } = useIndex();\n  const classes = useStyle();\n\n  return (\n    <div className={classes.root}>\n      <TitleCard title={rayConfig?.clusterName || \"SUMMARY\"}>\n        <p>Dashboard Frontend Version: {packageInfo.version}</p>\n        {rayConfig?.imageUrl && (\n          <p>\n            Image Url:{\" \"}\n            <a\n              href={rayConfig.imageUrl}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {rayConfig.imageUrl}\n            </a>\n          </p>\n        )}\n        {rayConfig?.sourceCodeLink && (\n          <p>\n            Source Code:{\" \"}\n            <a\n              href={rayConfig.sourceCodeLink}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {rayConfig.sourceCodeLink}\n            </a>\n          </p>\n        )}\n      </TitleCard>\n      {rayConfig && (\n        <TitleCard title=\"Config\">\n          <TableContainer>\n            <TableHead>\n              <TableCell>Key</TableCell>\n              <TableCell>Value</TableCell>\n            </TableHead>\n            <TableBody>\n              {Object.entries(rayConfig).map(([key, value]) => (\n                <TableRow>\n                  <TableCell className={classes.label}>{key}</TableCell>\n                  <TableCell>{getVal(key, value)}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </TableContainer>\n        </TitleCard>\n      )}\n    </div>\n  );\n};\n\nexport default Index;\n","import { RayConfigRsp } from \"../type/config\";\nimport { get } from \"./requestHandlers\";\n\nexport const getRayConfig = () => {\n  return get<RayConfigRsp>(\"api/ray_config\");\n};\n"],"names":["useStyle","makeStyles","theme","root","padding","spacing","label","fontWeight","getVal","key","value","memoryConverter","JSON","stringify","useIndex","useState","rayConfig","setConfig","nodes","setNodes","useEffect","get","then","res","data","config","getNodeList","summary","classes","className","TitleCard","title","clusterName","packageInfo","imageUrl","href","target","rel","sourceCodeLink","TableContainer","TableHead","TableCell","TableBody","Object","entries","map","TableRow"],"sourceRoot":""}