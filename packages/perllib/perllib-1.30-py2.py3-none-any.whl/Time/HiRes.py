#!/usr/bin/env python3
# Generated by "pythonizer ../Time/HiRes.pm" v1.026 run by SNOOPYJC on Sun Feb 12 00:06:58 2023
# Implied pythonizer options: -M -a
__author__ = """Joe Cool"""
__email__ = "snoopyjc@gmail.com"
__version__ = "1.026"
# Constants needed for the Time::HiRes module
# The functions are mostly in perllib proper
# NOTE: The 0 values are replaced by references to the python time package
# for those that are defined there.
# pragma pythonizer -aM
#
# NOTE: This file is manually edited - do NOT repythonize the source!
#
import builtins, perllib, signal
import time as tm_py

perllib.init_package("main")
perllib.init_package("Time.HiRes")


def d_hires_utime(*_args):
    return 1


Time.HiRes.d_hires_utime = d_hires_utime


def d_utimensat(*_args):
    pass


Time.HiRes.d_utimensat = d_utimensat


def d_futimens(*_args):
    pass


Time.HiRes.d_futimens = d_futimens


def d_hires_stat(*_args):
    return 1


Time.HiRes.d_hires_stat = d_hires_stat


def d_clock_nanosleep(*_args):
    return 1


Time.HiRes.d_clock_nanosleep = d_clock_nanosleep


def d_clock(*_args):
    return 1


Time.HiRes.d_clock = d_clock


def d_clock_getres(*_args):
    return 1


Time.HiRes.d_clock_getres = d_clock_getres


def d_clock_gettime(*_args):
    return 1


Time.HiRes.d_clock_gettime = d_clock_gettime


def d_nanosleep(*_args):
    return 1


Time.HiRes.d_nanosleep = d_nanosleep


def d_setitimer(*_args):
    return 1


Time.HiRes.d_setitimer = d_setitimer


def d_getitimer(*_args):
    return 1


Time.HiRes.d_getitimer = d_getitimer


def d_gettimeofday(*_args):
    return 1


Time.HiRes.d_gettimeofday = d_gettimeofday


def d_ualarm(*_args):
    return 1


Time.HiRes.d_ualarm = d_ualarm

# Methods that are not in perllib:


def d_usleep(*_args):
    return 1


Time.HiRes.d_usleep = d_usleep


def TIMER_ABSTIME(*_args):
    return 1


Time.HiRes.TIMER_ABSTIME = TIMER_ABSTIME


def ITIMER_VIRTUAL(*_args):
    return signal.ITIMER_VIRTUAL


Time.HiRes.ITIMER_VIRTUAL = ITIMER_VIRTUAL


def ITIMER_REALPROF(*_args):
    return signal.ITIMER_PROF


Time.HiRes.ITIMER_REALPROF = ITIMER_REALPROF


def ITIMER_REAL(*_args):
    return signal.ITIMER_REAL


Time.HiRes.ITIMER_REAL = ITIMER_REAL


def ITIMER_PROF(*_args):
    return signal.ITIMER_PROF


Time.HiRes.ITIMER_PROF = ITIMER_PROF


def CLOCK_VIRTUAL(*_args):
    raise NotImplementedError


Time.HiRes.CLOCK_VIRTUAL = CLOCK_VIRTUAL


def CLOCK_UPTIME_RAW(*_args):
    return tm_py.CLOCK_UPTIME_RAW


Time.HiRes.CLOCK_UPTIME_RAW = CLOCK_UPTIME_RAW


def CLOCK_UPTIME_PRECISE(*_args):
    return tm_py.CLOCK_UPTIME


Time.HiRes.CLOCK_UPTIME_PRECISE = CLOCK_UPTIME_PRECISE


def CLOCK_UPTIME_FAST(*_args):
    return tm_py.CLOCK_UPTIME


Time.HiRes.CLOCK_UPTIME_FAST = CLOCK_UPTIME_FAST


def CLOCK_UPTIME_COARSE(*_args):
    return tm_py.CLOCK_UPTIME


Time.HiRes.CLOCK_UPTIME_COARSE = CLOCK_UPTIME_COARSE


def CLOCK_UPTIME(*_args):
    return tm_py.CLOCK_UPTIME


Time.HiRes.CLOCK_UPTIME = CLOCK_UPTIME


def CLOCK_TIMEOFDAY(*_args):
    if hasattr(tm_py, 'CLOCK_REALTIME'):
        return tm_py.CLOCK_REALTIME
    return None


Time.HiRes.CLOCK_TIMEOFDAY = CLOCK_TIMEOFDAY


def CLOCK_THREAD_CPUTIME_ID(*_args):
    return tm_py.CLOCK_THREAD_CPUTIME_ID


Time.HiRes.CLOCK_THREAD_CPUTIME_ID = CLOCK_THREAD_CPUTIME_ID


def CLOCK_SOFTTIME(*_args):
    raise NotImplementedError


Time.HiRes.CLOCK_SOFTTIME = CLOCK_SOFTTIME


def CLOCK_SECOND(*_args):
    if hasattr(tm_py, 'CLOCK_REALTIME'):
        return tm_py.CLOCK_REALTIME
    return None


Time.HiRes.CLOCK_SECOND = CLOCK_SECOND


def CLOCK_REALTIME_RAW(*_args):
    return tm_py.CLOCK_REALTIME


Time.HiRes.CLOCK_REALTIME_RAW = CLOCK_REALTIME_RAW


def CLOCK_REALTIME_PRECISE(*_args):
    return tm_py.CLOCK_REALTIME


Time.HiRes.CLOCK_REALTIME_PRECISE = CLOCK_REALTIME_PRECISE


def CLOCK_REALTIME_FAST(*_args):
    return tm_py.CLOCK_REALTIME


Time.HiRes.CLOCK_REALTIME_FAST = CLOCK_REALTIME_FAST


def CLOCK_REALTIME_COARSE(*_args):
    return tm_py.CLOCK_REALTIME


Time.HiRes.CLOCK_REALTIME_COARSE = CLOCK_REALTIME_COARSE


def CLOCK_REALTIME(*_args):
    if hasattr(tm_py, 'CLOCK_REALTIME'):
        return tm_py.CLOCK_REALTIME
    return None


Time.HiRes.CLOCK_REALTIME = CLOCK_REALTIME


def CLOCK_PROF(*_args):
    return tm_py.CLOCK_PROF


Time.HiRes.CLOCK_PROF = CLOCK_PROF


def CLOCK_PROCESS_CPUTIME_ID(*_args):
    return tm_py.CLOCK_PROCESS_CPUTIME_ID


Time.HiRes.CLOCK_PROCESS_CPUTIME_ID = CLOCK_PROCESS_CPUTIME_ID


def CLOCK_MONOTONIC_RAW(*_args):
    return tm_py.CLOCK_MONOTONIC_RAW


Time.HiRes.CLOCK_MONOTONIC_RAW = CLOCK_MONOTONIC_RAW


def CLOCK_MONOTONIC_PRECISE(*_args):
    return tm_py.CLOCK_MONOTONIC


Time.HiRes.CLOCK_MONOTONIC_PRECISE = CLOCK_MONOTONIC_PRECISE


def CLOCK_MONOTONIC_FAST(*_args):
    return tm_py.CLOCK_MONOTONIC


Time.HiRes.CLOCK_MONOTONIC_FAST = CLOCK_MONOTONIC_FAST


def CLOCK_MONOTONIC_COARSE(*_args):
    return tm_py.CLOCK_MONOTONIC


Time.HiRes.CLOCK_MONOTONIC_COARSE = CLOCK_MONOTONIC_COARSE


def CLOCK_MONOTONIC(*_args):
    return tm_py.CLOCK_MONOTONIC


Time.HiRes.CLOCK_MONOTONIC = CLOCK_MONOTONIC


def CLOCK_HIGHRES(*_args):
    return tm_py.CLOCK_HIGHRES


Time.HiRes.CLOCK_HIGHRES = CLOCK_HIGHRES


def CLOCK_BOOTTIME(*_args):
    return tm_py.CLOCK_BOOTTIME


Time.HiRes.CLOCK_BOOTTIME = CLOCK_BOOTTIME


def CLOCKS_PER_SEC(*_args):
    return 1 / tm_py.get_clock_info('time').resolution


Time.HiRes.CLOCKS_PER_SEC = CLOCKS_PER_SEC
builtins.__PACKAGE__ = "Time.HiRes"
