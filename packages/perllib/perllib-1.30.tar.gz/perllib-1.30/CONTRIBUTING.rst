.. highlight:: shell

============
Contributing
============

Contributions are welcome, and they are greatly appreciated! Every little bit
helps, and credit will always be given.

You can contribute in many ways:

Types of Contributions
----------------------

Report Bugs
~~~~~~~~~~~

Report bugs at https://github.com/snoopyjc/pythonizer/issues.

If you are reporting a bug, please include:

* Your operating system name and version.
* Any details about your local setup that might be helpful in troubleshooting.
* Detailed steps to reproduce the bug.

Fix Bugs
~~~~~~~~

Look through the GitHub issues for bugs. Anything tagged with "bug" and "help
wanted" is open to whoever wants to implement it.

Implement Features
~~~~~~~~~~~~~~~~~~

Look through the GitHub issues for features. Anything tagged with "enhancement"
and "help wanted" is open to whoever wants to implement it.

Write Documentation
~~~~~~~~~~~~~~~~~~~

perllib could always use more documentation, whether as part of the
official perllib docs, in docstrings, or even on the web in blog posts,
articles, and such.

Submit Feedback
~~~~~~~~~~~~~~~

The best way to send feedback is to file an issue at https://github.com/snoopyjc/perllib/issues.

If you are proposing a feature:

* Explain in detail how it would work.
* Keep the scope as narrow as possible, to make it easier to implement.
* Remember that this is a volunteer-driven project, and that contributions
  are welcome :)

Get Started!
------------

Ready to contribute? Here's how to set up `pythonizer` for local development.

1. Fork the `pythonizer` repo on GitHub.
2. Clone your fork locally::

    $ git clone git@github.com:your_name_here/pythonizer.git

3. Create a branch for local development::

    $ git checkout -b name-of-your-bugfix-or-feature

   Now you can make your changes locally.

4. Install the following perl packages which are required by the tests (only need to do this once)::

    o Carp::Assert
    o IPC::System::Simple
    o Switch
    o CGI

5. When you're done making changes, check that your changes pass the
   tests::

    $ cd tests
    $ ./run

6. Commit your changes and push your branch to GitHub::

    $ git add .
    $ git commit -m "Your detailed description of your changes."
    $ git push origin name-of-your-bugfix-or-feature

7. Submit a pull request through the GitHub website.

Adding New Modules
------------------

New perl to python translated modules are easily added by creating a folder for 
them at the same level as the `Config` module, then if the module has a singular name,
create a `__init__.py` file and put the translated python code there.  Include lines
similar to the following near the top of the file::

    __author__ = """Joe Cool"""
    ___email__ = 'snoopyjc@gmail.com'
    __version__ = '0.966'

(NOTE: These lines can be generated by using the -a flag to pythonizer.)

If the module has a sub-name, like `Math::Complex`, name the source file to
be the second part of the name, so in this case it would be `Math/Complex.py`, and include
a blank `__init__.py` in the same directory.
Add a block of lines to the file `docs/modules.rst` similar to the lines that
are there for the other modules.  Add a `docs/YourModuleName`.rst file similar to the
ones that are already there for the new module.  Also add the module to `bump.yaml`, and to 
the list of packages in `setup.py`.  Most importantly, make sure to document
your new module in the `user_guide.html`.

Pull Request Guidelines
-----------------------

Before you submit a pull request, check that it meets these guidelines:

1. The pull request should include tests.
2. If the pull request adds functionality, the docs should be updated. Put
   your new functionality into a function with a docstring, and add the
   feature to the list in README.rst.
3. The pull request should work for Python 3.8, 3.9, 3.10, and for PyPy. Check
   https://travis-ci.com/snoopyjc/pythonizer/pull_requests
   and make sure that the tests pass for all supported Python versions.


Deploying
---------

A reminder for the maintainers on how to deploy.
Make sure all your changes are committed (including an entry in HISTORY.rst).
Then run::

$ python bump.py
$ git push
