# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from marqeta_client.models.funding_tranlog import FundingTranlog
from marqeta_client.models.internal_authorization_transaction import InternalAuthorizationTransaction
from marqeta_client.models.response import Response

class InternalFindOriginalResponse(BaseModel):
    """
    InternalFindOriginalResponse
    """
    original_found: Optional[StrictBool] = Field(None, alias="originalFound")
    original_tranlog: Optional[InternalAuthorizationTransaction] = None
    funding_transaction: Optional[FundingTranlog] = None
    finder_name: Optional[StrictStr] = None
    context: Optional[Dict[str, StrictStr]] = None
    response: Optional[Response] = None
    __properties = ["originalFound", "original_tranlog", "funding_transaction", "finder_name", "context", "response"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InternalFindOriginalResponse:
        """Create an instance of InternalFindOriginalResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of original_tranlog
        if self.original_tranlog:
            _dict['original_tranlog'] = self.original_tranlog.to_dict()
        # override the default output from pydantic by calling `to_dict()` of funding_transaction
        if self.funding_transaction:
            _dict['funding_transaction'] = self.funding_transaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InternalFindOriginalResponse:
        """Create an instance of InternalFindOriginalResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return InternalFindOriginalResponse.parse_obj(obj)

        _obj = InternalFindOriginalResponse.parse_obj({
            "original_found": obj.get("originalFound"),
            "original_tranlog": InternalAuthorizationTransaction.from_dict(obj.get("original_tranlog")) if obj.get("original_tranlog") is not None else None,
            "funding_transaction": FundingTranlog.from_dict(obj.get("funding_transaction")) if obj.get("funding_transaction") is not None else None,
            "finder_name": obj.get("finder_name"),
            "context": obj.get("context"),
            "response": Response.from_dict(obj.get("response")) if obj.get("response") is not None else None
        })
        return _obj

