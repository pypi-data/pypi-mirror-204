# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from marqeta_client.models.web_push_provisioning_apple_pay_jws_header import WebPushProvisioningApplePayJWSHeader

class WebPushProvisioningApplePayJWSModel(BaseModel):
    """
    WebPushProvisioningApplePayJWSModel
    """
    header: WebPushProvisioningApplePayJWSHeader = ...
    protected: StrictStr = Field(..., description="JWS Protected Headers, contains the Header Parameters that are integrity protected by the JWS Signature.")
    payload: StrictStr = Field(..., description="JWS payload which includes the message to be sent.")
    signature: StrictStr = Field(..., description="JWS Signature")
    __properties = ["header", "protected", "payload", "signature"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WebPushProvisioningApplePayJWSModel:
        """Create an instance of WebPushProvisioningApplePayJWSModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of header
        if self.header:
            _dict['header'] = self.header.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WebPushProvisioningApplePayJWSModel:
        """Create an instance of WebPushProvisioningApplePayJWSModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return WebPushProvisioningApplePayJWSModel.parse_obj(obj)

        _obj = WebPushProvisioningApplePayJWSModel.parse_obj({
            "header": WebPushProvisioningApplePayJWSHeader.from_dict(obj.get("header")) if obj.get("header") is not None else None,
            "protected": obj.get("protected"),
            "payload": obj.get("payload"),
            "signature": obj.get("signature")
        })
        return _obj

