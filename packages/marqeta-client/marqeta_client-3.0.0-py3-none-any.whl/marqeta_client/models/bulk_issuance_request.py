# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, conint, constr
from marqeta_client.models.expiration_offset import ExpirationOffset
from marqeta_client.models.fulfillment_request import FulfillmentRequest
from marqeta_client.models.user_association import UserAssociation

class BulkIssuanceRequest(BaseModel):
    """
    BulkIssuanceRequest
    """
    token: constr(strict=True, max_length=36, min_length=1) = ...
    fulfillment: FulfillmentRequest = ...
    expedite: Optional[StrictBool] = False
    card_product_token: constr(strict=True, max_length=36, min_length=1) = ...
    card_allocation: conint(strict=True, le=50000) = ...
    user_association: Optional[UserAssociation] = None
    name_line_1_numeric_postfix: Optional[StrictBool] = False
    name_line_1_random_postfix: Optional[StrictBool] = False
    expiration_offset: Optional[ExpirationOffset] = None
    __properties = ["token", "fulfillment", "expedite", "card_product_token", "card_allocation", "user_association", "name_line_1_numeric_postfix", "name_line_1_random_postfix", "expiration_offset"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BulkIssuanceRequest:
        """Create an instance of BulkIssuanceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of fulfillment
        if self.fulfillment:
            _dict['fulfillment'] = self.fulfillment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_association
        if self.user_association:
            _dict['user_association'] = self.user_association.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expiration_offset
        if self.expiration_offset:
            _dict['expiration_offset'] = self.expiration_offset.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BulkIssuanceRequest:
        """Create an instance of BulkIssuanceRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return BulkIssuanceRequest.parse_obj(obj)

        _obj = BulkIssuanceRequest.parse_obj({
            "token": obj.get("token"),
            "fulfillment": FulfillmentRequest.from_dict(obj.get("fulfillment")) if obj.get("fulfillment") is not None else None,
            "expedite": obj.get("expedite") if obj.get("expedite") is not None else False,
            "card_product_token": obj.get("card_product_token"),
            "card_allocation": obj.get("card_allocation"),
            "user_association": UserAssociation.from_dict(obj.get("user_association")) if obj.get("user_association") is not None else None,
            "name_line_1_numeric_postfix": obj.get("name_line_1_numeric_postfix") if obj.get("name_line_1_numeric_postfix") is not None else False,
            "name_line_1_random_postfix": obj.get("name_line_1_random_postfix") if obj.get("name_line_1_random_postfix") is not None else False,
            "expiration_offset": ExpirationOffset.from_dict(obj.get("expiration_offset")) if obj.get("expiration_offset") is not None else None
        })
        return _obj

