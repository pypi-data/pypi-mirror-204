# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, StrictBool, StrictStr, constr
from marqeta_client.models.expiration_offset import ExpirationOffset

class MerchantCardRequest(BaseModel):
    """
    MerchantCardRequest
    """
    card_product_token: constr(strict=True, max_length=36, min_length=1) = ...
    expedite: Optional[StrictBool] = False
    metadata: Optional[Dict[str, StrictStr]] = None
    expiration_offset: Optional[ExpirationOffset] = None
    __properties = ["card_product_token", "expedite", "metadata", "expiration_offset"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MerchantCardRequest:
        """Create an instance of MerchantCardRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of expiration_offset
        if self.expiration_offset:
            _dict['expiration_offset'] = self.expiration_offset.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MerchantCardRequest:
        """Create an instance of MerchantCardRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return MerchantCardRequest.parse_obj(obj)

        _obj = MerchantCardRequest.parse_obj({
            "card_product_token": obj.get("card_product_token"),
            "expedite": obj.get("expedite") if obj.get("expedite") is not None else False,
            "metadata": obj.get("metadata"),
            "expiration_offset": ExpirationOffset.from_dict(obj.get("expiration_offset")) if obj.get("expiration_offset") is not None else None
        })
        return _obj

