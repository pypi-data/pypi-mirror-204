# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist
from marqeta_client.models.cache_error import CacheError

class CreateCachesResponse(BaseModel):
    """
    CreateCachesResponse
    """
    created: Optional[conlist(StrictStr, unique_items=True)] = None
    already_exists: Optional[conlist(StrictStr, unique_items=True)] = None
    errors: Optional[conlist(CacheError, unique_items=True)] = None
    __properties = ["created", "already_exists", "errors"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateCachesResponse:
        """Create an instance of CreateCachesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item in self.errors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['errors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateCachesResponse:
        """Create an instance of CreateCachesResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CreateCachesResponse.parse_obj(obj)

        _obj = CreateCachesResponse.parse_obj({
            "created": obj.get("created"),
            "already_exists": obj.get("already_exists"),
            "errors": [CacheError.from_dict(_item) for _item in obj.get("errors")] if obj.get("errors") is not None else None
        })
        return _obj

