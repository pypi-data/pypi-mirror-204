# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, validator

class ProgramReserveTransactionResponse(BaseModel):
    """
    ProgramReserveTransactionResponse
    """
    created_time: datetime = Field(..., description="yyyy-MM-ddTHH:mm:ssZ")
    last_modified_time: datetime = Field(..., description="yyyy-MM-ddTHH:mm:ssZ")
    token: Optional[StrictStr] = None
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    currency_code: Optional[StrictStr] = None
    memo: Optional[StrictStr] = None
    tags: Optional[StrictStr] = None
    transaction_token: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    is_collateral: Optional[StrictBool] = None
    __properties = ["created_time", "last_modified_time", "token", "amount", "currency_code", "memo", "tags", "transaction_token", "type", "state", "is_collateral"]

    @validator('type')
    def type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('CREDIT', 'DEBIT', 'PENDING_CREDIT', 'PENDING_DEBIT'):
            raise ValueError("must be one of enum values ('CREDIT', 'DEBIT', 'PENDING_CREDIT', 'PENDING_DEBIT')")
        return v

    @validator('state')
    def state_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('PENDING', 'COMPLETE'):
            raise ValueError("must be one of enum values ('PENDING', 'COMPLETE')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProgramReserveTransactionResponse:
        """Create an instance of ProgramReserveTransactionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProgramReserveTransactionResponse:
        """Create an instance of ProgramReserveTransactionResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ProgramReserveTransactionResponse.parse_obj(obj)

        _obj = ProgramReserveTransactionResponse.parse_obj({
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time"),
            "token": obj.get("token"),
            "amount": obj.get("amount"),
            "currency_code": obj.get("currency_code"),
            "memo": obj.get("memo"),
            "tags": obj.get("tags"),
            "transaction_token": obj.get("transaction_token"),
            "type": obj.get("type"),
            "state": obj.get("state"),
            "is_collateral": obj.get("is_collateral")
        })
        return _obj

