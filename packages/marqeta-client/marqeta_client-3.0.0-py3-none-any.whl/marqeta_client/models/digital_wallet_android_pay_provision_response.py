# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictStr
from marqeta_client.models.android_push_tokenize_request_data import AndroidPushTokenizeRequestData

class DigitalWalletAndroidPayProvisionResponse(BaseModel):
    """
    DigitalWalletAndroidPayProvisionResponse
    """
    created_time: datetime = Field(..., description="yyyy-MM-ddTHH:mm:ssZ")
    last_modified_time: datetime = Field(..., description="yyyy-MM-ddTHH:mm:ssZ")
    card_token: StrictStr = ...
    push_tokenize_request_data: AndroidPushTokenizeRequestData = ...
    __properties = ["created_time", "last_modified_time", "card_token", "push_tokenize_request_data"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DigitalWalletAndroidPayProvisionResponse:
        """Create an instance of DigitalWalletAndroidPayProvisionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of push_tokenize_request_data
        if self.push_tokenize_request_data:
            _dict['push_tokenize_request_data'] = self.push_tokenize_request_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DigitalWalletAndroidPayProvisionResponse:
        """Create an instance of DigitalWalletAndroidPayProvisionResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DigitalWalletAndroidPayProvisionResponse.parse_obj(obj)

        _obj = DigitalWalletAndroidPayProvisionResponse.parse_obj({
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time"),
            "card_token": obj.get("card_token"),
            "push_tokenize_request_data": AndroidPushTokenizeRequestData.from_dict(obj.get("push_tokenize_request_data")) if obj.get("push_tokenize_request_data") is not None else None
        })
        return _obj

