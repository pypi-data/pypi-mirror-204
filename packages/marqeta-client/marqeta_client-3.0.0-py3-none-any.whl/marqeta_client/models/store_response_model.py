# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, constr

class StoreResponseModel(BaseModel):
    """
    StoreResponseModel
    """
    name: constr(strict=True, max_length=40, min_length=0) = ...
    active: Optional[StrictBool] = True
    contact: Optional[constr(strict=True, max_length=40, min_length=0)] = None
    contact_email: Optional[constr(strict=True, max_length=40, min_length=0)] = None
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    address1: constr(strict=True, max_length=255, min_length=0) = ...
    address2: Optional[constr(strict=True, max_length=255, min_length=0)] = None
    city: constr(strict=True, max_length=40, min_length=0) = ...
    state: constr(strict=True, max_length=255, min_length=0) = ...
    province: Optional[constr(strict=True, max_length=20, min_length=0)] = None
    zip: Optional[constr(strict=True, max_length=10, min_length=0)] = None
    postal_code: Optional[constr(strict=True, max_length=10, min_length=0)] = None
    phone: Optional[constr(strict=True, max_length=10, min_length=0)] = None
    country: Optional[constr(strict=True, max_length=40, min_length=0)] = None
    token: Optional[constr(strict=True, max_length=36, min_length=1)] = Field(None, description="The unique identifier of the merchant")
    partial_auth_flag: Optional[StrictBool] = Field(True, description="1 char max")
    mid: constr(strict=True, max_length=50, min_length=1) = ...
    network_mid: Optional[constr(strict=True, max_length=50, min_length=1)] = None
    merchant_token: constr(strict=True, max_length=36, min_length=0) = ...
    partial_approval_capable: Optional[StrictBool] = False
    keyed_auth_cvv_enforced: Optional[StrictBool] = False
    created_time: datetime = Field(..., description="yyyy-MM-ddTHH:mm:ssZ")
    last_modified_time: datetime = Field(..., description="yyyy-MM-ddTHH:mm:ssZ")
    __properties = ["name", "active", "contact", "contact_email", "longitude", "latitude", "address1", "address2", "city", "state", "province", "zip", "postal_code", "phone", "country", "token", "partial_auth_flag", "mid", "network_mid", "merchant_token", "partial_approval_capable", "keyed_auth_cvv_enforced", "created_time", "last_modified_time"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StoreResponseModel:
        """Create an instance of StoreResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StoreResponseModel:
        """Create an instance of StoreResponseModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return StoreResponseModel.parse_obj(obj)

        _obj = StoreResponseModel.parse_obj({
            "name": obj.get("name"),
            "active": obj.get("active") if obj.get("active") is not None else True,
            "contact": obj.get("contact"),
            "contact_email": obj.get("contact_email"),
            "longitude": obj.get("longitude"),
            "latitude": obj.get("latitude"),
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "province": obj.get("province"),
            "zip": obj.get("zip"),
            "postal_code": obj.get("postal_code"),
            "phone": obj.get("phone"),
            "country": obj.get("country"),
            "token": obj.get("token"),
            "partial_auth_flag": obj.get("partial_auth_flag") if obj.get("partial_auth_flag") is not None else True,
            "mid": obj.get("mid"),
            "network_mid": obj.get("network_mid"),
            "merchant_token": obj.get("merchant_token"),
            "partial_approval_capable": obj.get("partial_approval_capable") if obj.get("partial_approval_capable") is not None else False,
            "keyed_auth_cvv_enforced": obj.get("keyed_auth_cvv_enforced") if obj.get("keyed_auth_cvv_enforced") is not None else False,
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time")
        })
        return _obj

