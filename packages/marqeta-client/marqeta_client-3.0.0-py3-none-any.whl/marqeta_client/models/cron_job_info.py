# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class CronJobInfo(BaseModel):
    """
    CronJobInfo
    """
    schedule: Optional[StrictStr] = None
    group: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    var_class: Optional[StrictStr] = Field(None, alias="class")
    is_running: Optional[StrictBool] = None
    last_run_duration_millis: Optional[StrictInt] = None
    next_run: Optional[datetime] = None
    last_run: Optional[datetime] = None
    timezone: Optional[StrictStr] = None
    start_time: Optional[datetime] = None
    __properties = ["schedule", "group", "id", "class", "is_running", "last_run_duration_millis", "next_run", "last_run", "timezone", "start_time"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CronJobInfo:
        """Create an instance of CronJobInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "start_time",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CronJobInfo:
        """Create an instance of CronJobInfo from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CronJobInfo.parse_obj(obj)

        _obj = CronJobInfo.parse_obj({
            "schedule": obj.get("schedule"),
            "group": obj.get("group"),
            "id": obj.get("id"),
            "var_class": obj.get("class"),
            "is_running": obj.get("is_running"),
            "last_run_duration_millis": obj.get("last_run_duration_millis"),
            "next_run": obj.get("next_run"),
            "last_run": obj.get("last_run"),
            "timezone": obj.get("timezone"),
            "start_time": obj.get("start_time")
        })
        return _obj

