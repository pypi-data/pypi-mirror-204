# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from marqeta_client.models.jit_funding_api import JitFundingApi
from marqeta_client.models.network_metadata import NetworkMetadata

class JitProgramResponse(BaseModel):
    """
    JitProgramResponse
    """
    jit_funding: JitFundingApi = ...
    network_metadata: Optional[NetworkMetadata] = None
    __properties = ["jit_funding", "network_metadata"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JitProgramResponse:
        """Create an instance of JitProgramResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of jit_funding
        if self.jit_funding:
            _dict['jit_funding'] = self.jit_funding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_metadata
        if self.network_metadata:
            _dict['network_metadata'] = self.network_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JitProgramResponse:
        """Create an instance of JitProgramResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return JitProgramResponse.parse_obj(obj)

        _obj = JitProgramResponse.parse_obj({
            "jit_funding": JitFundingApi.from_dict(obj.get("jit_funding")) if obj.get("jit_funding") is not None else None,
            "network_metadata": NetworkMetadata.from_dict(obj.get("network_metadata")) if obj.get("network_metadata") is not None else None
        })
        return _obj

