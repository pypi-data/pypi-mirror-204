# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictStr, validator

class DirectDepositTransitionResponse(BaseModel):
    """
    DirectDepositTransitionResponse
    """
    channel: Optional[StrictStr] = None
    token: Optional[StrictStr] = None
    reason: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    direct_deposit_token: Optional[StrictStr] = None
    transaction_token: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    reason_code: Optional[StrictStr] = None
    created_time: Optional[datetime] = None
    direct_deposit_account_token: Optional[StrictStr] = None
    __properties = ["channel", "token", "reason", "type", "direct_deposit_token", "transaction_token", "state", "reason_code", "created_time", "direct_deposit_account_token"]

    @validator('channel')
    def channel_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('API', 'IVR', 'FRAUD', 'ADMIN', 'SYSTEM', 'NETWORK', 'PROD_SUPPORT', 'UNSUPPORTED'):
            raise ValueError("must be one of enum values ('API', 'IVR', 'FRAUD', 'ADMIN', 'SYSTEM', 'NETWORK', 'PROD_SUPPORT', 'UNSUPPORTED')")
        return v

    @validator('state')
    def state_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('PENDING', 'APPLIED', 'REVERSED', 'REJECTED'):
            raise ValueError("must be one of enum values ('PENDING', 'APPLIED', 'REVERSED', 'REJECTED')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DirectDepositTransitionResponse:
        """Create an instance of DirectDepositTransitionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DirectDepositTransitionResponse:
        """Create an instance of DirectDepositTransitionResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DirectDepositTransitionResponse.parse_obj(obj)

        _obj = DirectDepositTransitionResponse.parse_obj({
            "channel": obj.get("channel"),
            "token": obj.get("token"),
            "reason": obj.get("reason"),
            "type": obj.get("type"),
            "direct_deposit_token": obj.get("direct_deposit_token"),
            "transaction_token": obj.get("transaction_token"),
            "state": obj.get("state"),
            "reason_code": obj.get("reason_code"),
            "created_time": obj.get("created_time"),
            "direct_deposit_account_token": obj.get("direct_deposit_account_token")
        })
        return _obj

