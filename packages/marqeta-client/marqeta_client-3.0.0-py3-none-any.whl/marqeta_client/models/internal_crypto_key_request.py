# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, StrictStr, constr, validator

class InternalCryptoKeyRequest(BaseModel):
    """
    InternalCryptoKeyRequest
    """
    network: constr(strict=True, max_length=15, min_length=1) = ...
    provider: constr(strict=True, max_length=15, min_length=1) = ...
    key_type: StrictStr = ...
    key_value: constr(strict=True, max_length=255, min_length=1) = ...
    __properties = ["network", "provider", "key_type", "key_value"]

    @validator('key_type')
    def key_type_validate_enum(cls, v):
        if v not in ('LMK', 'ZMK', 'ZPK', 'WSD_ZEK_INAPP_PROV', 'WSD_ZEK_API', 'PVK', 'CVK', 'EMV_MK_AC', 'EMV_MK_SMI', 'EMV_MK_SMC', 'EMV_MK_DAC', 'MK_CVC3', 'CAVV', 'NOT_APPLICABLE'):
            raise ValueError("must be one of enum values ('LMK', 'ZMK', 'ZPK', 'WSD_ZEK_INAPP_PROV', 'WSD_ZEK_API', 'PVK', 'CVK', 'EMV_MK_AC', 'EMV_MK_SMI', 'EMV_MK_SMC', 'EMV_MK_DAC', 'MK_CVC3', 'CAVV', 'NOT_APPLICABLE')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InternalCryptoKeyRequest:
        """Create an instance of InternalCryptoKeyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InternalCryptoKeyRequest:
        """Create an instance of InternalCryptoKeyRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return InternalCryptoKeyRequest.parse_obj(obj)

        _obj = InternalCryptoKeyRequest.parse_obj({
            "network": obj.get("network"),
            "provider": obj.get("provider"),
            "key_type": obj.get("key_type"),
            "key_value": obj.get("key_value")
        })
        return _obj

