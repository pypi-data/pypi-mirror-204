# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr, constr, validator

class DigitalWalletTokenDevice(BaseModel):
    """
    DigitalWalletTokenDevice
    """
    device_type: Optional[StrictStr] = None
    device_lang_code: Optional[constr(strict=True, max_length=3, min_length=0)] = None
    device_id: Optional[constr(strict=True, max_length=50, min_length=0)] = None
    device_number: Optional[constr(strict=True, max_length=50, min_length=0)] = None
    device_name: Optional[constr(strict=True, max_length=50, min_length=0)] = None
    device_location: Optional[constr(strict=True, max_length=50, min_length=0)] = None
    device_ip_address: Optional[constr(strict=True, max_length=50, min_length=0)] = None
    __properties = ["device_type", "device_lang_code", "device_id", "device_number", "device_name", "device_location", "device_ip_address"]

    @validator('device_type')
    def device_type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('UNKNOWN', 'MOBILE_PHONE', 'WATCH', 'TABLET', 'MOBILE_PHONE_OR_TABLET', 'PERSONAL_COMPUTER'):
            raise ValueError("must be one of enum values ('UNKNOWN', 'MOBILE_PHONE', 'WATCH', 'TABLET', 'MOBILE_PHONE_OR_TABLET', 'PERSONAL_COMPUTER')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DigitalWalletTokenDevice:
        """Create an instance of DigitalWalletTokenDevice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DigitalWalletTokenDevice:
        """Create an instance of DigitalWalletTokenDevice from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DigitalWalletTokenDevice.parse_obj(obj)

        _obj = DigitalWalletTokenDevice.parse_obj({
            "device_type": obj.get("device_type"),
            "device_lang_code": obj.get("device_lang_code"),
            "device_id": obj.get("device_id"),
            "device_number": obj.get("device_number"),
            "device_name": obj.get("device_name"),
            "device_location": obj.get("device_location"),
            "device_ip_address": obj.get("device_ip_address")
        })
        return _obj

