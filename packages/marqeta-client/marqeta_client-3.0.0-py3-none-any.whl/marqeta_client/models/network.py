# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from marqeta_client.models.settlement_data import SettlementData

class Network(BaseModel):
    """
    Network
    """
    original_amount: Optional[Union[StrictFloat, StrictInt]] = None
    conversion_rate: Optional[Union[StrictFloat, StrictInt]] = None
    original_currency_code: Optional[StrictStr] = None
    dynamic_currency_conversion: Optional[StrictBool] = False
    settlement_data: Optional[SettlementData] = None
    __properties = ["original_amount", "conversion_rate", "original_currency_code", "dynamic_currency_conversion", "settlement_data"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Network:
        """Create an instance of Network from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of settlement_data
        if self.settlement_data:
            _dict['settlement_data'] = self.settlement_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Network:
        """Create an instance of Network from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Network.parse_obj(obj)

        _obj = Network.parse_obj({
            "original_amount": obj.get("original_amount"),
            "conversion_rate": obj.get("conversion_rate"),
            "original_currency_code": obj.get("original_currency_code"),
            "dynamic_currency_conversion": obj.get("dynamic_currency_conversion") if obj.get("dynamic_currency_conversion") is not None else False,
            "settlement_data": SettlementData.from_dict(obj.get("settlement_data")) if obj.get("settlement_data") is not None else None
        })
        return _obj

