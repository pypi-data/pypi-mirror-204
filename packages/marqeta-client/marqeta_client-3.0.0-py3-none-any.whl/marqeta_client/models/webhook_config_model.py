# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr

class WebhookConfigModel(BaseModel):
    """
    WebhookConfigModel
    """
    url: constr(strict=True, max_length=255, min_length=1) = Field(..., description="Must be HTTPS")
    secret: Optional[constr(strict=True, max_length=50, min_length=20)] = Field(None, description="Must contain upper and lowercase letters, numbers, and symbols")
    basic_auth_username: constr(strict=True, max_length=50, min_length=1) = ...
    basic_auth_password: constr(strict=True, max_length=50, min_length=20) = Field(..., description="Required if URL is present; must contain upper and lowercase letters, numbers, and symbols")
    custom_header: Optional[Dict[str, StrictStr]] = Field(None, description="Custom headers to be passed along with request")
    use_mtls: Optional[StrictBool] = Field(False, description="Use MTLS for webhook")
    __properties = ["url", "secret", "basic_auth_username", "basic_auth_password", "custom_header", "use_mtls"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WebhookConfigModel:
        """Create an instance of WebhookConfigModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WebhookConfigModel:
        """Create an instance of WebhookConfigModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return WebhookConfigModel.parse_obj(obj)

        _obj = WebhookConfigModel.parse_obj({
            "url": obj.get("url"),
            "secret": obj.get("secret"),
            "basic_auth_username": obj.get("basic_auth_username"),
            "basic_auth_password": obj.get("basic_auth_password"),
            "custom_header": obj.get("custom_header"),
            "use_mtls": obj.get("use_mtls") if obj.get("use_mtls") is not None else False
        })
        return _obj

