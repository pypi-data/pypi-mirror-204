# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class InternalAddressVerificationRequest(BaseModel):
    """
    InternalAddressVerificationRequest
    """
    compressed: Optional[StrictBool] = None
    address: Optional[StrictStr] = Field(None, description="cardholder address")
    city: Optional[StrictStr] = Field(None, description="cardholder city")
    state: Optional[StrictStr] = Field(None, description="cardholder state")
    country: Optional[StrictStr] = Field(None, description="cardholder country")
    postalcode: Optional[StrictStr] = Field(None, description="cardholder postalcode")
    is_compressed: Optional[StrictBool] = None
    cardholder_name: Optional[StrictStr] = None
    config_provider_type: Optional[StrictStr] = None
    __properties = ["compressed", "address", "city", "state", "country", "postalcode", "is_compressed", "cardholder_name", "config_provider_type"]

    @validator('config_provider_type')
    def config_provider_type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('AUTH', 'DWT', 'AV'):
            raise ValueError("must be one of enum values ('AUTH', 'DWT', 'AV')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InternalAddressVerificationRequest:
        """Create an instance of InternalAddressVerificationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InternalAddressVerificationRequest:
        """Create an instance of InternalAddressVerificationRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return InternalAddressVerificationRequest.parse_obj(obj)

        _obj = InternalAddressVerificationRequest.parse_obj({
            "compressed": obj.get("compressed"),
            "address": obj.get("address"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "country": obj.get("country"),
            "postalcode": obj.get("postalcode"),
            "is_compressed": obj.get("is_compressed"),
            "cardholder_name": obj.get("cardholder_name"),
            "config_provider_type": obj.get("config_provider_type")
        })
        return _obj

