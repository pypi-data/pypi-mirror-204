# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, conlist
from marqeta_client.models.internal_account import InternalAccount

class InternalUser(BaseModel):
    """
    InternalUser
    """
    id: Optional[StrictInt] = None
    token: Optional[StrictStr] = None
    active: Optional[StrictBool] = None
    email: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    uses_parent_account: Optional[StrictBool] = False
    corporate_card_holder: Optional[StrictBool] = False
    user_accounts: Optional[conlist(InternalAccount)] = None
    __properties = ["id", "token", "active", "email", "type", "uses_parent_account", "corporate_card_holder", "user_accounts"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InternalUser:
        """Create an instance of InternalUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in user_accounts (list)
        _items = []
        if self.user_accounts:
            for _item in self.user_accounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['user_accounts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InternalUser:
        """Create an instance of InternalUser from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return InternalUser.parse_obj(obj)

        _obj = InternalUser.parse_obj({
            "id": obj.get("id"),
            "token": obj.get("token"),
            "active": obj.get("active"),
            "email": obj.get("email"),
            "type": obj.get("type"),
            "uses_parent_account": obj.get("uses_parent_account") if obj.get("uses_parent_account") is not None else False,
            "corporate_card_holder": obj.get("corporate_card_holder") if obj.get("corporate_card_holder") is not None else False,
            "user_accounts": [InternalAccount.from_dict(_item) for _item in obj.get("user_accounts")] if obj.get("user_accounts") is not None else None
        })
        return _obj

