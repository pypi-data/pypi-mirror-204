# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class OriginalDataElements(BaseModel):
    """
    OriginalDataElements
    """
    mti: Optional[StrictStr] = None
    stan: Optional[constr(strict=True, max_length=12, min_length=0)] = None
    transmission_time: Optional[constr(strict=True, max_length=14, min_length=0)] = Field(None, description="yyyyMMddHHmmss")
    acquiring_institution_id: Optional[constr(strict=True, max_length=11, min_length=0)] = None
    network_reference_id: Optional[constr(strict=True, max_length=12, min_length=0)] = None
    forwarding_institution_id: Optional[constr(strict=True, max_length=11, min_length=0)] = None
    transaction_token: Optional[constr(strict=True, max_length=36, min_length=0)] = None
    __properties = ["mti", "stan", "transmission_time", "acquiring_institution_id", "network_reference_id", "forwarding_institution_id", "transaction_token"]

    @validator('mti')
    def mti_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('0100', '0120', '0200'):
            raise ValueError("must be one of enum values ('0100', '0120', '0200')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OriginalDataElements:
        """Create an instance of OriginalDataElements from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OriginalDataElements:
        """Create an instance of OriginalDataElements from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return OriginalDataElements.parse_obj(obj)

        _obj = OriginalDataElements.parse_obj({
            "mti": obj.get("mti"),
            "stan": obj.get("stan"),
            "transmission_time": obj.get("transmission_time"),
            "acquiring_institution_id": obj.get("acquiring_institution_id"),
            "network_reference_id": obj.get("network_reference_id"),
            "forwarding_institution_id": obj.get("forwarding_institution_id"),
            "transaction_token": obj.get("transaction_token")
        })
        return _obj

