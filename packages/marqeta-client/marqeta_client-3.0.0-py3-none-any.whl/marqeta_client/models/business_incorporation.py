# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, constr, validator
from marqeta_client.models.address_request_model import AddressRequestModel

class BusinessIncorporation(BaseModel):
    """
    BusinessIncorporation
    """
    is_public: Optional[StrictBool] = False
    stock_symbol: Optional[constr(strict=True, max_length=255, min_length=0)] = None
    state_of_incorporation: Optional[constr(strict=True, max_length=255, min_length=0)] = None
    name_registered_under: Optional[constr(strict=True, max_length=255, min_length=0)] = None
    address_registered_under: Optional[AddressRequestModel] = None
    incorporation_type: Optional[constr(strict=True, max_length=255, min_length=0)] = None
    __properties = ["is_public", "stock_symbol", "state_of_incorporation", "name_registered_under", "address_registered_under", "incorporation_type"]

    @validator('incorporation_type')
    def incorporation_type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('LLC', 'CORPORATION', 'SOLE_PROPRIETORSHIP', 'PARTNERSHIP', 'COOPERATIVE', 'OTHER'):
            raise ValueError("must be one of enum values ('LLC', 'CORPORATION', 'SOLE_PROPRIETORSHIP', 'PARTNERSHIP', 'COOPERATIVE', 'OTHER')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BusinessIncorporation:
        """Create an instance of BusinessIncorporation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address_registered_under
        if self.address_registered_under:
            _dict['address_registered_under'] = self.address_registered_under.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BusinessIncorporation:
        """Create an instance of BusinessIncorporation from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return BusinessIncorporation.parse_obj(obj)

        _obj = BusinessIncorporation.parse_obj({
            "is_public": obj.get("is_public") if obj.get("is_public") is not None else False,
            "stock_symbol": obj.get("stock_symbol"),
            "state_of_incorporation": obj.get("state_of_incorporation"),
            "name_registered_under": obj.get("name_registered_under"),
            "address_registered_under": AddressRequestModel.from_dict(obj.get("address_registered_under")) if obj.get("address_registered_under") is not None else None,
            "incorporation_type": obj.get("incorporation_type")
        })
        return _obj

