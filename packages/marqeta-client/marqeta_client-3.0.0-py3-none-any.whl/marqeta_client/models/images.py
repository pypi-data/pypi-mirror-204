# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from marqeta_client.models.images_card import ImagesCard
from marqeta_client.models.images_carrier import ImagesCarrier
from marqeta_client.models.images_carrier_return_window import ImagesCarrierReturnWindow
from marqeta_client.models.images_signature import ImagesSignature

class Images(BaseModel):
    """
    Images
    """
    card: Optional[ImagesCard] = None
    carrier: Optional[ImagesCarrier] = None
    signature: Optional[ImagesSignature] = None
    carrier_return_window: Optional[ImagesCarrierReturnWindow] = None
    __properties = ["card", "carrier", "signature", "carrier_return_window"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Images:
        """Create an instance of Images from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of carrier
        if self.carrier:
            _dict['carrier'] = self.carrier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signature
        if self.signature:
            _dict['signature'] = self.signature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of carrier_return_window
        if self.carrier_return_window:
            _dict['carrier_return_window'] = self.carrier_return_window.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Images:
        """Create an instance of Images from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Images.parse_obj(obj)

        _obj = Images.parse_obj({
            "card": ImagesCard.from_dict(obj.get("card")) if obj.get("card") is not None else None,
            "carrier": ImagesCarrier.from_dict(obj.get("carrier")) if obj.get("carrier") is not None else None,
            "signature": ImagesSignature.from_dict(obj.get("signature")) if obj.get("signature") is not None else None,
            "carrier_return_window": ImagesCarrierReturnWindow.from_dict(obj.get("carrier_return_window")) if obj.get("carrier_return_window") is not None else None
        })
        return _obj

