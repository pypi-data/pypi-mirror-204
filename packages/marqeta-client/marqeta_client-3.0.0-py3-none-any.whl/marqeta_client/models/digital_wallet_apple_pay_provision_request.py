# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, StrictStr, conlist, constr, validator

class DigitalWalletApplePayProvisionRequest(BaseModel):
    """
    DigitalWalletApplePayProvisionRequest
    """
    card_token: constr(strict=True, max_length=36, min_length=1) = ...
    device_type: StrictStr = ...
    provisioning_app_version: constr(strict=True, max_length=50, min_length=1) = ...
    certificates: conlist(StrictStr) = ...
    nonce: StrictStr = ...
    nonce_signature: StrictStr = ...
    __properties = ["card_token", "device_type", "provisioning_app_version", "certificates", "nonce", "nonce_signature"]

    @validator('device_type')
    def device_type_validate_enum(cls, v):
        if v not in ('MOBILE_PHONE', 'WATCH', 'TABLET'):
            raise ValueError("must be one of enum values ('MOBILE_PHONE', 'WATCH', 'TABLET')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DigitalWalletApplePayProvisionRequest:
        """Create an instance of DigitalWalletApplePayProvisionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DigitalWalletApplePayProvisionRequest:
        """Create an instance of DigitalWalletApplePayProvisionRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DigitalWalletApplePayProvisionRequest.parse_obj(obj)

        _obj = DigitalWalletApplePayProvisionRequest.parse_obj({
            "card_token": obj.get("card_token"),
            "device_type": obj.get("device_type"),
            "provisioning_app_version": obj.get("provisioning_app_version"),
            "certificates": obj.get("certificates"),
            "nonce": obj.get("nonce"),
            "nonce_signature": obj.get("nonce_signature")
        })
        return _obj

