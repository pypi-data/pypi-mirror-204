# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class Authentication(BaseModel):
    """
    Authentication
    """
    last_password_update_channel: Optional[StrictStr] = None
    last_password_update_time: Optional[datetime] = Field(None, description="yyyy-MM-ddTHH:mm:ssZ")
    email_verified: Optional[StrictBool] = False
    email_verified_time: Optional[datetime] = Field(None, description="yyyy-MM-ddTHH:mm:ssZ")
    __properties = ["last_password_update_channel", "last_password_update_time", "email_verified", "email_verified_time"]

    @validator('last_password_update_channel')
    def last_password_update_channel_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('USER_CHANGE', 'USER_RESET'):
            raise ValueError("must be one of enum values ('USER_CHANGE', 'USER_RESET')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Authentication:
        """Create an instance of Authentication from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Authentication:
        """Create an instance of Authentication from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Authentication.parse_obj(obj)

        _obj = Authentication.parse_obj({
            "last_password_update_channel": obj.get("last_password_update_channel"),
            "last_password_update_time": obj.get("last_password_update_time"),
            "email_verified": obj.get("email_verified") if obj.get("email_verified") is not None else False,
            "email_verified_time": obj.get("email_verified_time")
        })
        return _obj

