# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class VelocityCache(BaseModel):
    """
    VelocityCache
    """
    card_holder_id: Optional[StrictInt] = Field(None, alias="cardHolderId")
    velocity_control_id: Optional[StrictInt] = Field(None, alias="velocityControlId")
    used_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="usedAmount")
    usage_count: Optional[StrictInt] = Field(None, alias="usageCount")
    max_id: Optional[StrictInt] = Field(None, alias="maxId")
    window_start_time: Optional[datetime] = Field(None, alias="windowStartTime")
    vc_signature: Optional[StrictStr] = Field(None, alias="vcSignature")
    created_time: Optional[datetime] = Field(None, alias="createdTime")
    last_modified_time: Optional[datetime] = Field(None, alias="lastModifiedTime")
    __properties = ["cardHolderId", "velocityControlId", "usedAmount", "usageCount", "maxId", "windowStartTime", "vcSignature", "createdTime", "lastModifiedTime"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VelocityCache:
        """Create an instance of VelocityCache from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VelocityCache:
        """Create an instance of VelocityCache from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return VelocityCache.parse_obj(obj)

        _obj = VelocityCache.parse_obj({
            "card_holder_id": obj.get("cardHolderId"),
            "velocity_control_id": obj.get("velocityControlId"),
            "used_amount": obj.get("usedAmount"),
            "usage_count": obj.get("usageCount"),
            "max_id": obj.get("maxId"),
            "window_start_time": obj.get("windowStartTime"),
            "vc_signature": obj.get("vcSignature"),
            "created_time": obj.get("createdTime"),
            "last_modified_time": obj.get("lastModifiedTime")
        })
        return _obj

