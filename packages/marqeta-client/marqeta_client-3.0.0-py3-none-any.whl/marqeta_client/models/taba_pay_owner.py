# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from marqeta_client.models.taba_pay_name import TabaPayName
from marqeta_client.models.tabapay_ptc_address import TabapayPTCAddress

class TabaPayOwner(BaseModel):
    """
    TabaPayOwner
    """
    name: Optional[TabaPayName] = None
    address: Optional[TabapayPTCAddress] = None
    __properties = ["name", "address"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TabaPayOwner:
        """Create an instance of TabaPayOwner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TabaPayOwner:
        """Create an instance of TabaPayOwner from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TabaPayOwner.parse_obj(obj)

        _obj = TabaPayOwner.parse_obj({
            "name": TabaPayName.from_dict(obj.get("name")) if obj.get("name") is not None else None,
            "address": TabapayPTCAddress.from_dict(obj.get("address")) if obj.get("address") is not None else None
        })
        return _obj

