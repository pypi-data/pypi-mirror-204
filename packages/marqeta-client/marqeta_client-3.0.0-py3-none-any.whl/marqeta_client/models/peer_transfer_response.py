# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr

class PeerTransferResponse(BaseModel):
    """
    PeerTransferResponse
    """
    token: StrictStr = ...
    amount: Union[StrictFloat, StrictInt] = ...
    tags: Optional[StrictStr] = None
    memo: Optional[StrictStr] = None
    currency_code: StrictStr = ...
    sender_user_token: Optional[StrictStr] = None
    recipient_user_token: Optional[StrictStr] = None
    sender_business_token: Optional[StrictStr] = None
    recipient_business_token: Optional[StrictStr] = None
    created_time: datetime = ...
    __properties = ["token", "amount", "tags", "memo", "currency_code", "sender_user_token", "recipient_user_token", "sender_business_token", "recipient_business_token", "created_time"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PeerTransferResponse:
        """Create an instance of PeerTransferResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PeerTransferResponse:
        """Create an instance of PeerTransferResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PeerTransferResponse.parse_obj(obj)

        _obj = PeerTransferResponse.parse_obj({
            "token": obj.get("token"),
            "amount": obj.get("amount"),
            "tags": obj.get("tags"),
            "memo": obj.get("memo"),
            "currency_code": obj.get("currency_code"),
            "sender_user_token": obj.get("sender_user_token"),
            "recipient_user_token": obj.get("recipient_user_token"),
            "sender_business_token": obj.get("sender_business_token"),
            "recipient_business_token": obj.get("recipient_business_token"),
            "created_time": obj.get("created_time")
        })
        return _obj

