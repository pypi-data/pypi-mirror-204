# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, constr

class PushToCardDisbursementResponse(BaseModel):
    """
    PushToCardDisbursementResponse
    """
    created_time: datetime = Field(..., description="yyyy-MM-ddTHH:mm:ssZ")
    last_modified_time: datetime = Field(..., description="yyyy-MM-ddTHH:mm:ssZ")
    status: Optional[StrictStr] = None
    token: Optional[constr(strict=True, max_length=36, min_length=1)] = None
    currency_code: Optional[StrictStr] = None
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    payment_instrument_token: Optional[constr(strict=True, max_length=36, min_length=1)] = None
    tags: Optional[constr(strict=True, max_length=255, min_length=1)] = None
    memo: Optional[constr(strict=True, max_length=99, min_length=1)] = None
    __properties = ["created_time", "last_modified_time", "status", "token", "currency_code", "amount", "payment_instrument_token", "tags", "memo"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PushToCardDisbursementResponse:
        """Create an instance of PushToCardDisbursementResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PushToCardDisbursementResponse:
        """Create an instance of PushToCardDisbursementResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PushToCardDisbursementResponse.parse_obj(obj)

        _obj = PushToCardDisbursementResponse.parse_obj({
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time"),
            "status": obj.get("status"),
            "token": obj.get("token"),
            "currency_code": obj.get("currency_code"),
            "amount": obj.get("amount"),
            "payment_instrument_token": obj.get("payment_instrument_token"),
            "tags": obj.get("tags"),
            "memo": obj.get("memo")
        })
        return _obj

