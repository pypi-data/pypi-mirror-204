# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, constr, validator

class DirectDepositRequest(BaseModel):
    """
    DirectDepositRequest
    """
    token: Optional[constr(strict=True, max_length=36, min_length=0)] = None
    amount: Union[StrictFloat, StrictInt] = ...
    type: StrictStr = ...
    account_number: StrictStr = ...
    settlement_date: datetime = ...
    standard_entry_class_code: Optional[constr(strict=True, max_length=3, min_length=0)] = None
    company_name: Optional[constr(strict=True, max_length=16, min_length=0)] = None
    company_discretionary_data: Optional[constr(strict=True, max_length=20, min_length=0)] = None
    company_identification: Optional[constr(strict=True, max_length=10, min_length=0)] = None
    company_entry_description: Optional[constr(strict=True, max_length=10, min_length=0)] = None
    individual_identification_number: Optional[constr(strict=True, max_length=22, min_length=0)] = None
    individual_name: Optional[constr(strict=True, max_length=35, min_length=0)] = None
    early_pay_eligible: Optional[StrictBool] = Field(False, alias="earlyPayEligible")
    __properties = ["token", "amount", "type", "account_number", "settlement_date", "standard_entry_class_code", "company_name", "company_discretionary_data", "company_identification", "company_entry_description", "individual_identification_number", "individual_name", "earlyPayEligible"]

    @validator('type')
    def type_validate_enum(cls, v):
        if v not in ('CREDIT', 'DEBIT'):
            raise ValueError("must be one of enum values ('CREDIT', 'DEBIT')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DirectDepositRequest:
        """Create an instance of DirectDepositRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DirectDepositRequest:
        """Create an instance of DirectDepositRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DirectDepositRequest.parse_obj(obj)

        _obj = DirectDepositRequest.parse_obj({
            "token": obj.get("token"),
            "amount": obj.get("amount"),
            "type": obj.get("type"),
            "account_number": obj.get("account_number"),
            "settlement_date": obj.get("settlement_date"),
            "standard_entry_class_code": obj.get("standard_entry_class_code"),
            "company_name": obj.get("company_name"),
            "company_discretionary_data": obj.get("company_discretionary_data"),
            "company_identification": obj.get("company_identification"),
            "company_entry_description": obj.get("company_entry_description"),
            "individual_identification_number": obj.get("individual_identification_number"),
            "individual_name": obj.get("individual_name"),
            "early_pay_eligible": obj.get("earlyPayEligible") if obj.get("earlyPayEligible") is not None else False
        })
        return _obj

