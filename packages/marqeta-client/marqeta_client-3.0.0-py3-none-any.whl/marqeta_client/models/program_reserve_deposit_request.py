# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class ProgramReserveDepositRequest(BaseModel):
    """
    ProgramReserveDepositRequest
    """
    idempotent_hash: Optional[StrictStr] = Field(None, alias="idempotentHash")
    token: StrictStr = ...
    amount: Union[StrictFloat, StrictInt] = ...
    currency_code: StrictStr = ...
    memo: Optional[StrictStr] = None
    tags: Optional[StrictStr] = None
    is_collateral: Optional[StrictBool] = None
    __properties = ["idempotentHash", "token", "amount", "currency_code", "memo", "tags", "is_collateral"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProgramReserveDepositRequest:
        """Create an instance of ProgramReserveDepositRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProgramReserveDepositRequest:
        """Create an instance of ProgramReserveDepositRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ProgramReserveDepositRequest.parse_obj(obj)

        _obj = ProgramReserveDepositRequest.parse_obj({
            "idempotent_hash": obj.get("idempotentHash"),
            "token": obj.get("token"),
            "amount": obj.get("amount"),
            "currency_code": obj.get("currency_code"),
            "memo": obj.get("memo"),
            "tags": obj.get("tags"),
            "is_collateral": obj.get("is_collateral")
        })
        return _obj

