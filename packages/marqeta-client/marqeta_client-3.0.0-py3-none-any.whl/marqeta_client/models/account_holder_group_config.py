# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictStr, constr, validator
from marqeta_client.models.pre_kyc_controls import PreKycControls

class AccountHolderGroupConfig(BaseModel):
    """
    AccountHolderGroupConfig
    """
    kyc_required: Optional[StrictStr] = None
    is_reloadable: Optional[StrictBool] = False
    real_time_fee_group_token: Optional[constr(strict=True, max_length=36, min_length=0)] = None
    pre_kyc_controls: Optional[PreKycControls] = None
    __properties = ["kyc_required", "is_reloadable", "real_time_fee_group_token", "pre_kyc_controls"]

    @validator('kyc_required')
    def kyc_required_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('ALWAYS', 'CONDITIONAL', 'NEVER'):
            raise ValueError("must be one of enum values ('ALWAYS', 'CONDITIONAL', 'NEVER')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountHolderGroupConfig:
        """Create an instance of AccountHolderGroupConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of pre_kyc_controls
        if self.pre_kyc_controls:
            _dict['pre_kyc_controls'] = self.pre_kyc_controls.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountHolderGroupConfig:
        """Create an instance of AccountHolderGroupConfig from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AccountHolderGroupConfig.parse_obj(obj)

        _obj = AccountHolderGroupConfig.parse_obj({
            "kyc_required": obj.get("kyc_required"),
            "is_reloadable": obj.get("is_reloadable") if obj.get("is_reloadable") is not None else False,
            "real_time_fee_group_token": obj.get("real_time_fee_group_token"),
            "pre_kyc_controls": PreKycControls.from_dict(obj.get("pre_kyc_controls")) if obj.get("pre_kyc_controls") is not None else None
        })
        return _obj

