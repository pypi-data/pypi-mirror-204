# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from marqeta_client.models.taba_pay_card import TabaPayCard
from marqeta_client.models.taba_pay_owner import TabaPayOwner

class TabaPayAddPaymentInstrumentRequest(BaseModel):
    """
    TabaPayAddPaymentInstrumentRequest
    """
    entity: Optional[TabaPayAddPaymentInstrumentRequest] = None
    tags: Optional[Dict[str, StrictStr]] = None
    reference_id: Optional[StrictStr] = Field(None, alias="referenceID")
    card: Optional[TabaPayCard] = None
    owner: Optional[TabaPayOwner] = None
    __properties = ["entity", "tags", "referenceID", "card", "owner"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TabaPayAddPaymentInstrumentRequest:
        """Create an instance of TabaPayAddPaymentInstrumentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TabaPayAddPaymentInstrumentRequest:
        """Create an instance of TabaPayAddPaymentInstrumentRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TabaPayAddPaymentInstrumentRequest.parse_obj(obj)

        _obj = TabaPayAddPaymentInstrumentRequest.parse_obj({
            "entity": TabaPayAddPaymentInstrumentRequest.from_dict(obj.get("entity")) if obj.get("entity") is not None else None,
            "tags": obj.get("tags"),
            "reference_id": obj.get("referenceID"),
            "card": TabaPayCard.from_dict(obj.get("card")) if obj.get("card") is not None else None,
            "owner": TabaPayOwner.from_dict(obj.get("owner")) if obj.get("owner") is not None else None
        })
        return _obj

