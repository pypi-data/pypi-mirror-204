# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt
from marqeta_client.models.hold_increase import HoldIncrease

class AuthControls(BaseModel):
    """
    AuthControls
    """
    hold_increase: Optional[HoldIncrease] = None
    hold_expiration_days: Optional[StrictInt] = 7
    __properties = ["hold_increase", "hold_expiration_days"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthControls:
        """Create an instance of AuthControls from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of hold_increase
        if self.hold_increase:
            _dict['hold_increase'] = self.hold_increase.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthControls:
        """Create an instance of AuthControls from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AuthControls.parse_obj(obj)

        _obj = AuthControls.parse_obj({
            "hold_increase": HoldIncrease.from_dict(obj.get("hold_increase")) if obj.get("hold_increase") is not None else None,
            "hold_expiration_days": obj.get("hold_expiration_days") if obj.get("hold_expiration_days") is not None else 7
        })
        return _obj

