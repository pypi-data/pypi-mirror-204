# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from marqeta_client.models.fulfillment_address_response import FulfillmentAddressResponse

class ShippingInformationResponse(BaseModel):
    """
    ShippingInformationResponse
    """
    method: Optional[StrictStr] = None
    return_address: Optional[FulfillmentAddressResponse] = None
    recipient_address: Optional[FulfillmentAddressResponse] = None
    care_of_line: Optional[StrictStr] = Field(None, description="255 char max")
    __properties = ["method", "return_address", "recipient_address", "care_of_line"]

    @validator('method')
    def method_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('LOCAL_MAIL', 'LOCAL_MAIL_PACKAGE', 'GROUND', 'TWO_DAY', 'OVERNIGHT', 'INTERNATIONAL', 'INTERNATIONAL_PRIORITY', 'LOCAL_PRIORITY', 'FEDEX_EXPEDITED', 'FEDEX_REGULAR', 'UPS_EXPEDITED', 'UPS_REGULAR', 'USPS_EXPEDITED', 'USPS_REGULAR'):
            raise ValueError("must be one of enum values ('LOCAL_MAIL', 'LOCAL_MAIL_PACKAGE', 'GROUND', 'TWO_DAY', 'OVERNIGHT', 'INTERNATIONAL', 'INTERNATIONAL_PRIORITY', 'LOCAL_PRIORITY', 'FEDEX_EXPEDITED', 'FEDEX_REGULAR', 'UPS_EXPEDITED', 'UPS_REGULAR', 'USPS_EXPEDITED', 'USPS_REGULAR')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ShippingInformationResponse:
        """Create an instance of ShippingInformationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of return_address
        if self.return_address:
            _dict['return_address'] = self.return_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recipient_address
        if self.recipient_address:
            _dict['recipient_address'] = self.recipient_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ShippingInformationResponse:
        """Create an instance of ShippingInformationResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ShippingInformationResponse.parse_obj(obj)

        _obj = ShippingInformationResponse.parse_obj({
            "method": obj.get("method"),
            "return_address": FulfillmentAddressResponse.from_dict(obj.get("return_address")) if obj.get("return_address") is not None else None,
            "recipient_address": FulfillmentAddressResponse.from_dict(obj.get("recipient_address")) if obj.get("recipient_address") is not None else None,
            "care_of_line": obj.get("care_of_line")
        })
        return _obj

