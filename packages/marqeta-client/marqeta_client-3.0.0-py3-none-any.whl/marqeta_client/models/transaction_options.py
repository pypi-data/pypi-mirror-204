# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr

class TransactionOptions(BaseModel):
    """
    TransactionOptions
    """
    additional_data: Optional[StrictStr] = None
    database_transaction_timeout: Optional[StrictInt] = None
    transaction_timeout_threshold_seconds: Optional[StrictInt] = None
    pre_auth_time_limit: Optional[StrictStr] = None
    send_expiration_date: Optional[StrictBool] = False
    send_track_data: Optional[StrictBool] = False
    card_expiration_date_yymm: Optional[StrictStr] = None
    encryption_key_id: Optional[StrictStr] = None
    transaction_token: Optional[StrictStr] = None
    is_async: Optional[StrictBool] = False
    __properties = ["additional_data", "database_transaction_timeout", "transaction_timeout_threshold_seconds", "pre_auth_time_limit", "send_expiration_date", "send_track_data", "card_expiration_date_yymm", "encryption_key_id", "transaction_token", "is_async"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TransactionOptions:
        """Create an instance of TransactionOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TransactionOptions:
        """Create an instance of TransactionOptions from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TransactionOptions.parse_obj(obj)

        _obj = TransactionOptions.parse_obj({
            "additional_data": obj.get("additional_data"),
            "database_transaction_timeout": obj.get("database_transaction_timeout"),
            "transaction_timeout_threshold_seconds": obj.get("transaction_timeout_threshold_seconds"),
            "pre_auth_time_limit": obj.get("pre_auth_time_limit"),
            "send_expiration_date": obj.get("send_expiration_date") if obj.get("send_expiration_date") is not None else False,
            "send_track_data": obj.get("send_track_data") if obj.get("send_track_data") is not None else False,
            "card_expiration_date_yymm": obj.get("card_expiration_date_yymm"),
            "encryption_key_id": obj.get("encryption_key_id"),
            "transaction_token": obj.get("transaction_token"),
            "is_async": obj.get("is_async") if obj.get("is_async") is not None else False
        })
        return _obj

