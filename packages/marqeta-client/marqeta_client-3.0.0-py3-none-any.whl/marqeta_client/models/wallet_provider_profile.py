# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist
from marqeta_client.models.account import Account
from marqeta_client.models.risk_assessment import RiskAssessment

class WalletProviderProfile(BaseModel):
    """
    WalletProviderProfile
    """
    account: Optional[Account] = None
    risk_assessment: Optional[RiskAssessment] = None
    device_score: Optional[StrictStr] = None
    pan_source: Optional[StrictStr] = None
    reason_code: Optional[StrictStr] = None
    recommendation_reasons: Optional[conlist(StrictStr)] = None
    __properties = ["account", "risk_assessment", "device_score", "pan_source", "reason_code", "recommendation_reasons"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WalletProviderProfile:
        """Create an instance of WalletProviderProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_assessment
        if self.risk_assessment:
            _dict['risk_assessment'] = self.risk_assessment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WalletProviderProfile:
        """Create an instance of WalletProviderProfile from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return WalletProviderProfile.parse_obj(obj)

        _obj = WalletProviderProfile.parse_obj({
            "account": Account.from_dict(obj.get("account")) if obj.get("account") is not None else None,
            "risk_assessment": RiskAssessment.from_dict(obj.get("risk_assessment")) if obj.get("risk_assessment") is not None else None,
            "device_score": obj.get("device_score"),
            "pan_source": obj.get("pan_source"),
            "reason_code": obj.get("reason_code"),
            "recommendation_reasons": obj.get("recommendation_reasons")
        })
        return _obj

