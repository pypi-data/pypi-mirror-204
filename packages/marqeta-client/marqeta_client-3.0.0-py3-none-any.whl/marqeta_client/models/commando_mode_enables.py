# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, conlist

class CommandoModeEnables(BaseModel):
    """
    CommandoModeEnables
    """
    program_funding_source: StrictStr = ...
    velocity_controls: Optional[conlist(StrictStr, max_items=2147483647, min_items=1)] = None
    auth_controls: Optional[conlist(StrictStr)] = None
    ignore_card_suspended_state: Optional[StrictBool] = False
    use_cache_balance: Optional[StrictBool] = False
    __properties = ["program_funding_source", "velocity_controls", "auth_controls", "ignore_card_suspended_state", "use_cache_balance"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CommandoModeEnables:
        """Create an instance of CommandoModeEnables from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CommandoModeEnables:
        """Create an instance of CommandoModeEnables from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CommandoModeEnables.parse_obj(obj)

        _obj = CommandoModeEnables.parse_obj({
            "program_funding_source": obj.get("program_funding_source"),
            "velocity_controls": obj.get("velocity_controls"),
            "auth_controls": obj.get("auth_controls"),
            "ignore_card_suspended_state": obj.get("ignore_card_suspended_state") if obj.get("ignore_card_suspended_state") is not None else False,
            "use_cache_balance": obj.get("use_cache_balance") if obj.get("use_cache_balance") is not None else False
        })
        return _obj

