# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr, validator

class AccountFundingReceiverData(BaseModel):
    """
    AccountFundingReceiverData
    """
    funding_source: StrictStr = ...
    receiver_account_type: StrictStr = ...
    first_name: StrictStr = ...
    last_name: Optional[StrictStr] = None
    __properties = ["funding_source", "receiver_account_type", "first_name", "last_name"]

    @validator('funding_source')
    def funding_source_validate_enum(cls, v):
        if v not in ('CREDIT', 'DEBIT', 'PREPAID', 'DEPOSIT_ACCOUNT', 'CASH', 'MOBILE_MONEY_ACCOUNT', 'NON_VISA_CREDIT'):
            raise ValueError("must be one of enum values ('CREDIT', 'DEBIT', 'PREPAID', 'DEPOSIT_ACCOUNT', 'CASH', 'MOBILE_MONEY_ACCOUNT', 'NON_VISA_CREDIT')")
        return v

    @validator('receiver_account_type')
    def receiver_account_type_validate_enum(cls, v):
        if v not in ('OTHER', 'RTN_BANK_ACCOUNT', 'IBAN', 'CARD_ACCOUNT', 'EMAIL', 'PHONE_NUMBER', 'BANK_ACCOUNT_NUMBER_AND_BANK_IDENTIFICATION_CODE', 'WALLET_ID', 'SOCIAL_NETWORK_ID'):
            raise ValueError("must be one of enum values ('OTHER', 'RTN_BANK_ACCOUNT', 'IBAN', 'CARD_ACCOUNT', 'EMAIL', 'PHONE_NUMBER', 'BANK_ACCOUNT_NUMBER_AND_BANK_IDENTIFICATION_CODE', 'WALLET_ID', 'SOCIAL_NETWORK_ID')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountFundingReceiverData:
        """Create an instance of AccountFundingReceiverData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountFundingReceiverData:
        """Create an instance of AccountFundingReceiverData from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AccountFundingReceiverData.parse_obj(obj)

        _obj = AccountFundingReceiverData.parse_obj({
            "funding_source": obj.get("funding_source"),
            "receiver_account_type": obj.get("receiver_account_type"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name")
        })
        return _obj

