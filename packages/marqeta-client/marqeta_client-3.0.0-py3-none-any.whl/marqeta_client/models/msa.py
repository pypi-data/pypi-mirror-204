# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, StrictStr, confloat, conint

class MSA(BaseModel):
    """
    MSA
    """
    campaign_token: StrictStr = ...
    trigger_amount: Union[confloat(ge=0.01, strict=True), conint(ge=1, strict=True)] = ...
    reload_amount: Union[confloat(ge=0.01, strict=True), conint(ge=1, strict=True)] = ...
    __properties = ["campaign_token", "trigger_amount", "reload_amount"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MSA:
        """Create an instance of MSA from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MSA:
        """Create an instance of MSA from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return MSA.parse_obj(obj)

        _obj = MSA.parse_obj({
            "campaign_token": obj.get("campaign_token"),
            "trigger_amount": obj.get("trigger_amount"),
            "reload_amount": obj.get("reload_amount")
        })
        return _obj

