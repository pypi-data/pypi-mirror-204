# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr, validator

class IdentificationRequestModel(BaseModel):
    """
    IdentificationRequestModel
    """
    type: StrictStr = ...
    value: Optional[StrictStr] = None
    expiration_date: Optional[StrictStr] = None
    __properties = ["type", "value", "expiration_date"]

    @validator('type')
    def type_validate_enum(cls, v):
        if v not in ('SSN', 'TIN', 'SIN', 'NIN', 'PASSPORT_NUMBER', 'DRIVERS_LICENSE', 'BUSINESS_NUMBER', 'BUSINESS_TAX_ID', 'TAXPAYER_REFERENCE'):
            raise ValueError("must be one of enum values ('SSN', 'TIN', 'SIN', 'NIN', 'PASSPORT_NUMBER', 'DRIVERS_LICENSE', 'BUSINESS_NUMBER', 'BUSINESS_TAX_ID', 'TAXPAYER_REFERENCE')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IdentificationRequestModel:
        """Create an instance of IdentificationRequestModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "type",
                            "value",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IdentificationRequestModel:
        """Create an instance of IdentificationRequestModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return IdentificationRequestModel.parse_obj(obj)

        _obj = IdentificationRequestModel.parse_obj({
            "type": obj.get("type"),
            "value": obj.get("value"),
            "expiration_date": obj.get("expiration_date")
        })
        return _obj

