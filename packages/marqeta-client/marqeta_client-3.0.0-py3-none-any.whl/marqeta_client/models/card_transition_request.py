# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictStr, constr, validator
from marqeta_client.models.validations_request import ValidationsRequest

class CardTransitionRequest(BaseModel):
    """
    CardTransitionRequest
    """
    token: Optional[constr(strict=True, max_length=36, min_length=1)] = None
    card_token: constr(strict=True, max_length=36, min_length=1) = ...
    reason: Optional[constr(strict=True, max_length=255, min_length=0)] = None
    reason_code: Optional[StrictStr] = None
    validations: Optional[ValidationsRequest] = None
    sync_state_with_dwts: Optional[StrictBool] = None
    channel: StrictStr = ...
    state: StrictStr = ...
    __properties = ["token", "card_token", "reason", "reason_code", "validations", "sync_state_with_dwts", "channel", "state"]

    @validator('reason_code')
    def reason_code_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'):
            raise ValueError("must be one of enum values ('00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31')")
        return v

    @validator('channel')
    def channel_validate_enum(cls, v):
        if v not in ('API', 'IVR', 'FRAUD', 'ADMIN', 'SYSTEM'):
            raise ValueError("must be one of enum values ('API', 'IVR', 'FRAUD', 'ADMIN', 'SYSTEM')")
        return v

    @validator('state')
    def state_validate_enum(cls, v):
        if v not in ('ACTIVE', 'SUSPENDED', 'TERMINATED'):
            raise ValueError("must be one of enum values ('ACTIVE', 'SUSPENDED', 'TERMINATED')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CardTransitionRequest:
        """Create an instance of CardTransitionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "sync_state_with_dwts",
                            "state",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of validations
        if self.validations:
            _dict['validations'] = self.validations.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CardTransitionRequest:
        """Create an instance of CardTransitionRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CardTransitionRequest.parse_obj(obj)

        _obj = CardTransitionRequest.parse_obj({
            "token": obj.get("token"),
            "card_token": obj.get("card_token"),
            "reason": obj.get("reason"),
            "reason_code": obj.get("reason_code"),
            "validations": ValidationsRequest.from_dict(obj.get("validations")) if obj.get("validations") is not None else None,
            "sync_state_with_dwts": obj.get("sync_state_with_dwts"),
            "channel": obj.get("channel"),
            "state": obj.get("state")
        })
        return _obj

