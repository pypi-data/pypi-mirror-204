# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, conlist, validator
from marqeta_client.models.funding_tranlog import FundingTranlog
from marqeta_client.models.internal_authorization_transaction import InternalAuthorizationTransaction
from marqeta_client.models.velocity_cache import VelocityCache

class InternalTransactionMessage(BaseModel):
    """
    InternalTransactionMessage
    """
    processing_start_time_millis: Optional[StrictInt] = None
    authorization_tranlog: InternalAuthorizationTransaction = ...
    funding_tranlog: Optional[FundingTranlog] = None
    velocity_caches: Optional[conlist(VelocityCache)] = None
    context: Optional[Dict[str, Dict[str, Any]]] = None
    credit_debit_indicator: Optional[StrictStr] = None
    __properties = ["processing_start_time_millis", "authorization_tranlog", "funding_tranlog", "velocity_caches", "context", "credit_debit_indicator"]

    @validator('credit_debit_indicator')
    def credit_debit_indicator_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('CREDIT', 'DEBIT', 'NONE'):
            raise ValueError("must be one of enum values ('CREDIT', 'DEBIT', 'NONE')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InternalTransactionMessage:
        """Create an instance of InternalTransactionMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of authorization_tranlog
        if self.authorization_tranlog:
            _dict['authorization_tranlog'] = self.authorization_tranlog.to_dict()
        # override the default output from pydantic by calling `to_dict()` of funding_tranlog
        if self.funding_tranlog:
            _dict['funding_tranlog'] = self.funding_tranlog.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in velocity_caches (list)
        _items = []
        if self.velocity_caches:
            for _item in self.velocity_caches:
                if _item:
                    _items.append(_item.to_dict())
            _dict['velocity_caches'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InternalTransactionMessage:
        """Create an instance of InternalTransactionMessage from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return InternalTransactionMessage.parse_obj(obj)

        _obj = InternalTransactionMessage.parse_obj({
            "processing_start_time_millis": obj.get("processing_start_time_millis"),
            "authorization_tranlog": InternalAuthorizationTransaction.from_dict(obj.get("authorization_tranlog")) if obj.get("authorization_tranlog") is not None else None,
            "funding_tranlog": FundingTranlog.from_dict(obj.get("funding_tranlog")) if obj.get("funding_tranlog") is not None else None,
            "velocity_caches": [VelocityCache.from_dict(_item) for _item in obj.get("velocity_caches")] if obj.get("velocity_caches") is not None else None,
            "context": obj.get("context"),
            "credit_debit_indicator": obj.get("credit_debit_indicator")
        })
        return _obj

