# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from marqeta_client.models.application import Application

class ClientAccessTokenResponse(BaseModel):
    """
    ClientAccessTokenResponse
    """
    application: Optional[Application] = None
    created: datetime = Field(..., description="yyyy-MM-ddTHH:mm:ssZ")
    expires: datetime = Field(..., description="yyyy-MM-ddTHH:mm:ssZ")
    token: Optional[StrictStr] = None
    card_token: Optional[StrictStr] = None
    __properties = ["application", "created", "expires", "token", "card_token"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClientAccessTokenResponse:
        """Create an instance of ClientAccessTokenResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of application
        if self.application:
            _dict['application'] = self.application.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClientAccessTokenResponse:
        """Create an instance of ClientAccessTokenResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ClientAccessTokenResponse.parse_obj(obj)

        _obj = ClientAccessTokenResponse.parse_obj({
            "application": Application.from_dict(obj.get("application")) if obj.get("application") is not None else None,
            "created": obj.get("created"),
            "expires": obj.get("expires"),
            "token": obj.get("token"),
            "card_token": obj.get("card_token")
        })
        return _obj

