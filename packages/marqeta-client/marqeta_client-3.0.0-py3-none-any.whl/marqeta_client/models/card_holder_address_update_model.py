# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, constr

class CardHolderAddressUpdateModel(BaseModel):
    """
    CardHolderAddressUpdateModel
    """
    first_name: Optional[constr(strict=True, max_length=40, min_length=0)] = None
    last_name: Optional[constr(strict=True, max_length=40, min_length=0)] = None
    address_1: Optional[constr(strict=True, max_length=255, min_length=0)] = None
    address_2: Optional[constr(strict=True, max_length=255, min_length=0)] = None
    city: Optional[constr(strict=True, max_length=40, min_length=0)] = None
    state: Optional[constr(strict=True, max_length=2, min_length=0)] = None
    zip: Optional[constr(strict=True, max_length=10, min_length=0)] = None
    country: Optional[constr(strict=True, max_length=40, min_length=0)] = None
    phone: Optional[constr(strict=True, max_length=255, min_length=0)] = None
    is_default_address: Optional[StrictBool] = False
    active: Optional[StrictBool] = True
    postal_code: Optional[constr(strict=True, max_length=10, min_length=0)] = None
    __properties = ["first_name", "last_name", "address_1", "address_2", "city", "state", "zip", "country", "phone", "is_default_address", "active", "postal_code"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CardHolderAddressUpdateModel:
        """Create an instance of CardHolderAddressUpdateModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CardHolderAddressUpdateModel:
        """Create an instance of CardHolderAddressUpdateModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CardHolderAddressUpdateModel.parse_obj(obj)

        _obj = CardHolderAddressUpdateModel.parse_obj({
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "address_1": obj.get("address_1"),
            "address_2": obj.get("address_2"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "zip": obj.get("zip"),
            "country": obj.get("country"),
            "phone": obj.get("phone"),
            "is_default_address": obj.get("is_default_address") if obj.get("is_default_address") is not None else False,
            "active": obj.get("active") if obj.get("active") is not None else True,
            "postal_code": obj.get("postal_code")
        })
        return _obj

