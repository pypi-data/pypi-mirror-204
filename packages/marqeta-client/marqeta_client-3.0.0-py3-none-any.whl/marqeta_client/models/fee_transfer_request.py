# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist, constr
from marqeta_client.models.fee_model import FeeModel

class FeeTransferRequest(BaseModel):
    """
    FeeTransferRequest
    """
    tags: Optional[constr(strict=True, max_length=255, min_length=0)] = None
    token: Optional[constr(strict=True, max_length=36, min_length=1)] = None
    user_token: constr(strict=True, max_length=36, min_length=1) = Field(..., description="Required if 'business_token' is null")
    business_token: constr(strict=True, max_length=36, min_length=1) = Field(..., description="Required if 'user_token' is null")
    fees: conlist(FeeModel) = ...
    __properties = ["tags", "token", "user_token", "business_token", "fees"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FeeTransferRequest:
        """Create an instance of FeeTransferRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in fees (list)
        _items = []
        if self.fees:
            for _item in self.fees:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fees'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FeeTransferRequest:
        """Create an instance of FeeTransferRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return FeeTransferRequest.parse_obj(obj)

        _obj = FeeTransferRequest.parse_obj({
            "tags": obj.get("tags"),
            "token": obj.get("token"),
            "user_token": obj.get("user_token"),
            "business_token": obj.get("business_token"),
            "fees": [FeeModel.from_dict(_item) for _item in obj.get("fees")] if obj.get("fees") is not None else None
        })
        return _obj

