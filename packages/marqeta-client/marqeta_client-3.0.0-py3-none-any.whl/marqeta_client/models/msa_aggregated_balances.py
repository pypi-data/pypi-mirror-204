# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Dict, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr

class MsaAggregatedBalances(BaseModel):
    """
    MsaAggregatedBalances
    """
    currency_code: StrictStr = ...
    ledger_balance: Union[StrictFloat, StrictInt] = ...
    available_balance: Union[StrictFloat, StrictInt] = ...
    credit_balance: Union[StrictFloat, StrictInt] = ...
    cached_balance: Union[StrictFloat, StrictInt] = ...
    pending_credits: Union[StrictFloat, StrictInt] = ...
    impacted_amount: Optional[Union[StrictFloat, StrictInt]] = None
    balances: Dict[str, MsaAggregatedBalances] = ...
    last_updated_time: datetime = ...
    __properties = ["currency_code", "ledger_balance", "available_balance", "credit_balance", "cached_balance", "pending_credits", "impacted_amount", "balances", "last_updated_time"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MsaAggregatedBalances:
        """Create an instance of MsaAggregatedBalances from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in balances (dict)
        _field_dict = {}
        if self.balances:
            for _key in self.balances:
                if self.balances[_key]:
                    _field_dict[_key] = self.balances[_key].to_dict()
            _dict['balances'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MsaAggregatedBalances:
        """Create an instance of MsaAggregatedBalances from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return MsaAggregatedBalances.parse_obj(obj)

        _obj = MsaAggregatedBalances.parse_obj({
            "currency_code": obj.get("currency_code"),
            "ledger_balance": obj.get("ledger_balance"),
            "available_balance": obj.get("available_balance"),
            "credit_balance": obj.get("credit_balance"),
            "cached_balance": obj.get("cached_balance"),
            "pending_credits": obj.get("pending_credits"),
            "impacted_amount": obj.get("impacted_amount"),
            "balances": dict(
                (_k, MsaAggregatedBalances.from_dict(_v))
                for _k, _v in obj.get("balances").items()
            )
            if obj.get("balances") is not None
            else None,
            "last_updated_time": obj.get("last_updated_time")
        })
        return _obj

