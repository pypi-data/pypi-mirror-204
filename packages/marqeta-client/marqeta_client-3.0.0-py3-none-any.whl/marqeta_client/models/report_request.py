# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class ReportRequest(BaseModel):
    """
    ReportRequest
    """
    partner: Optional[StrictStr] = None
    report: Optional[StrictStr] = None
    start_date: Optional[datetime] = Field(None, alias="startDate")
    end_date: Optional[datetime] = Field(None, alias="endDate")
    send_files: Optional[StrictBool] = Field(None, alias="sendFiles")
    __properties = ["partner", "report", "startDate", "endDate", "sendFiles"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReportRequest:
        """Create an instance of ReportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReportRequest:
        """Create an instance of ReportRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ReportRequest.parse_obj(obj)

        _obj = ReportRequest.parse_obj({
            "partner": obj.get("partner"),
            "report": obj.get("report"),
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "send_files": obj.get("sendFiles")
        })
        return _obj

