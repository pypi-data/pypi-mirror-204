# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from marqeta_client.models.android_push_token_request_address import AndroidPushTokenRequestAddress

class AndroidPushTokenizeRequestData(BaseModel):
    """
    AndroidPushTokenizeRequestData
    """
    display_name: Optional[StrictStr] = None
    last_digits: Optional[StrictStr] = None
    network: Optional[StrictStr] = None
    token_service_provider: Optional[StrictStr] = None
    opaque_payment_card: Optional[StrictStr] = None
    user_address: Optional[AndroidPushTokenRequestAddress] = None
    __properties = ["display_name", "last_digits", "network", "token_service_provider", "opaque_payment_card", "user_address"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AndroidPushTokenizeRequestData:
        """Create an instance of AndroidPushTokenizeRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of user_address
        if self.user_address:
            _dict['user_address'] = self.user_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AndroidPushTokenizeRequestData:
        """Create an instance of AndroidPushTokenizeRequestData from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AndroidPushTokenizeRequestData.parse_obj(obj)

        _obj = AndroidPushTokenizeRequestData.parse_obj({
            "display_name": obj.get("display_name"),
            "last_digits": obj.get("last_digits"),
            "network": obj.get("network"),
            "token_service_provider": obj.get("token_service_provider"),
            "opaque_payment_card": obj.get("opaque_payment_card"),
            "user_address": AndroidPushTokenRequestAddress.from_dict(obj.get("user_address")) if obj.get("user_address") is not None else None
        })
        return _obj

