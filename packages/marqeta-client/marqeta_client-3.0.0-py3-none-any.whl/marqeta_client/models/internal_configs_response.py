# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, StrictStr, conlist
from marqeta_client.models.internal_card_product import InternalCardProduct
from marqeta_client.models.internal_sys_config import InternalSysConfig

class InternalConfigsResponse(BaseModel):
    """
    InternalConfigsResponse
    """
    dna: Optional[Dict[str, StrictStr]] = None
    card_product: Optional[InternalCardProduct] = None
    system_config: Optional[conlist(InternalSysConfig)] = None
    __properties = ["dna", "card_product", "system_config"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InternalConfigsResponse:
        """Create an instance of InternalConfigsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of card_product
        if self.card_product:
            _dict['card_product'] = self.card_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in system_config (list)
        _items = []
        if self.system_config:
            for _item in self.system_config:
                if _item:
                    _items.append(_item.to_dict())
            _dict['system_config'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InternalConfigsResponse:
        """Create an instance of InternalConfigsResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return InternalConfigsResponse.parse_obj(obj)

        _obj = InternalConfigsResponse.parse_obj({
            "dna": obj.get("dna"),
            "card_product": InternalCardProduct.from_dict(obj.get("card_product")) if obj.get("card_product") is not None else None,
            "system_config": [InternalSysConfig.from_dict(_item) for _item in obj.get("system_config")] if obj.get("system_config") is not None else None
        })
        return _obj

