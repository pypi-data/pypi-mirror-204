# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr
from marqeta_client.models.auto_reload_association import AutoReloadAssociation
from marqeta_client.models.order_scope import OrderScope

class AutoReloadModel(BaseModel):
    """
    AutoReloadModel
    """
    token: Optional[constr(strict=True, max_length=36, min_length=1)] = None
    active: Optional[StrictBool] = True
    funding_source_token: Optional[constr(strict=True, max_length=36, min_length=1)] = Field(None, description="Required when order scope is GPA")
    funding_source_address_token: Optional[constr(strict=True, max_length=36, min_length=1)] = None
    association: Optional[AutoReloadAssociation] = None
    order_scope: OrderScope = ...
    currency_code: StrictStr = ...
    __properties = ["token", "active", "funding_source_token", "funding_source_address_token", "association", "order_scope", "currency_code"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AutoReloadModel:
        """Create an instance of AutoReloadModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of association
        if self.association:
            _dict['association'] = self.association.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_scope
        if self.order_scope:
            _dict['order_scope'] = self.order_scope.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AutoReloadModel:
        """Create an instance of AutoReloadModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AutoReloadModel.parse_obj(obj)

        _obj = AutoReloadModel.parse_obj({
            "token": obj.get("token"),
            "active": obj.get("active") if obj.get("active") is not None else True,
            "funding_source_token": obj.get("funding_source_token"),
            "funding_source_address_token": obj.get("funding_source_address_token"),
            "association": AutoReloadAssociation.from_dict(obj.get("association")) if obj.get("association") is not None else None,
            "order_scope": OrderScope.from_dict(obj.get("order_scope")) if obj.get("order_scope") is not None else None,
            "currency_code": obj.get("currency_code")
        })
        return _obj

