# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from marqeta_client.models.advanced_clearing_request_model import AdvancedClearingRequestModel

class ClearingFileRequest(BaseModel):
    """
    ClearingFileRequest
    """
    transaction_tokens: conlist(AdvancedClearingRequestModel) = Field(..., description="A list of 'clearing_transaction_request' items")
    wait_timeout: Optional[StrictInt] = Field(None, description="Timeout in seconds")
    batch_id: Optional[StrictStr] = Field(None, description="A string representing batch ID")
    clearing_folder: Optional[StrictStr] = None
    encrypt_file: Optional[StrictBool] = None
    create_completion_file: Optional[StrictBool] = None
    settlement_date: Optional[StrictStr] = None
    token_pan: Optional[StrictStr] = None
    __properties = ["transaction_tokens", "wait_timeout", "batch_id", "clearing_folder", "encrypt_file", "create_completion_file", "settlement_date", "token_pan"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClearingFileRequest:
        """Create an instance of ClearingFileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in transaction_tokens (list)
        _items = []
        if self.transaction_tokens:
            for _item in self.transaction_tokens:
                if _item:
                    _items.append(_item.to_dict())
            _dict['transaction_tokens'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClearingFileRequest:
        """Create an instance of ClearingFileRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ClearingFileRequest.parse_obj(obj)

        _obj = ClearingFileRequest.parse_obj({
            "transaction_tokens": [AdvancedClearingRequestModel.from_dict(_item) for _item in obj.get("transaction_tokens")] if obj.get("transaction_tokens") is not None else None,
            "wait_timeout": obj.get("wait_timeout"),
            "batch_id": obj.get("batch_id"),
            "clearing_folder": obj.get("clearing_folder"),
            "encrypt_file": obj.get("encrypt_file"),
            "create_completion_file": obj.get("create_completion_file"),
            "settlement_date": obj.get("settlement_date"),
            "token_pan": obj.get("token_pan")
        })
        return _obj

