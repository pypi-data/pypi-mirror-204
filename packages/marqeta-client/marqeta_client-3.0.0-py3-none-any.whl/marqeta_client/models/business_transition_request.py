# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class BusinessTransitionRequest(BaseModel):
    """
    BusinessTransitionRequest
    """
    idempotent_hash: Optional[StrictStr] = Field(None, alias="idempotentHash")
    token: Optional[StrictStr] = None
    status: StrictStr = ...
    reason_code: StrictStr = ...
    reason: Optional[StrictStr] = None
    channel: StrictStr = ...
    business_token: StrictStr = ...
    __properties = ["idempotentHash", "token", "status", "reason_code", "reason", "channel", "business_token"]

    @validator('status')
    def status_validate_enum(cls, v):
        if v not in ('UNVERIFIED', 'LIMITED', 'ACTIVE', 'SUSPENDED', 'CLOSED'):
            raise ValueError("must be one of enum values ('UNVERIFIED', 'LIMITED', 'ACTIVE', 'SUSPENDED', 'CLOSED')")
        return v

    @validator('reason_code')
    def reason_code_validate_enum(cls, v):
        if v not in ('00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'):
            raise ValueError("must be one of enum values ('00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31')")
        return v

    @validator('channel')
    def channel_validate_enum(cls, v):
        if v not in ('API', 'IVR', 'FRAUD', 'ADMIN', 'SYSTEM'):
            raise ValueError("must be one of enum values ('API', 'IVR', 'FRAUD', 'ADMIN', 'SYSTEM')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BusinessTransitionRequest:
        """Create an instance of BusinessTransitionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BusinessTransitionRequest:
        """Create an instance of BusinessTransitionRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return BusinessTransitionRequest.parse_obj(obj)

        _obj = BusinessTransitionRequest.parse_obj({
            "idempotent_hash": obj.get("idempotentHash"),
            "token": obj.get("token"),
            "status": obj.get("status"),
            "reason_code": obj.get("reason_code"),
            "reason": obj.get("reason"),
            "channel": obj.get("channel"),
            "business_token": obj.get("business_token")
        })
        return _obj

