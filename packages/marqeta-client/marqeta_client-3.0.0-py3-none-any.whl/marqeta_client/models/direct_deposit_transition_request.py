# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class DirectDepositTransitionRequest(BaseModel):
    """
    DirectDepositTransitionRequest
    """
    token: Optional[StrictStr] = None
    channel: StrictStr = ...
    idempotent_hash: Optional[StrictStr] = Field(None, alias="idempotentHash")
    direct_deposit_token: StrictStr = ...
    state: StrictStr = ...
    reason_code: Optional[StrictStr] = None
    reason: constr(strict=True, max_length=255, min_length=0) = ...
    __properties = ["token", "channel", "idempotentHash", "direct_deposit_token", "state", "reason_code", "reason"]

    @validator('channel')
    def channel_validate_enum(cls, v):
        if v not in ('API', 'SYSTEM', 'PROD_SUPPORT'):
            raise ValueError("must be one of enum values ('API', 'SYSTEM', 'PROD_SUPPORT')")
        return v

    @validator('state')
    def state_validate_enum(cls, v):
        if v not in ('PENDING', 'APPLIED', 'REVERSED', 'REJECTED'):
            raise ValueError("must be one of enum values ('PENDING', 'APPLIED', 'REVERSED', 'REJECTED')")
        return v

    @validator('reason_code')
    def reason_code_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('R01', 'R02', 'R03', 'R04', 'R06', 'R08', 'R09', 'R10', 'R11', 'R14', 'R15', 'R16', 'R17', 'R18', 'R20', 'R23', 'R24', 'R29'):
            raise ValueError("must be one of enum values ('R01', 'R02', 'R03', 'R04', 'R06', 'R08', 'R09', 'R10', 'R11', 'R14', 'R15', 'R16', 'R17', 'R18', 'R20', 'R23', 'R24', 'R29')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DirectDepositTransitionRequest:
        """Create an instance of DirectDepositTransitionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DirectDepositTransitionRequest:
        """Create an instance of DirectDepositTransitionRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DirectDepositTransitionRequest.parse_obj(obj)

        _obj = DirectDepositTransitionRequest.parse_obj({
            "token": obj.get("token"),
            "channel": obj.get("channel"),
            "idempotent_hash": obj.get("idempotentHash"),
            "direct_deposit_token": obj.get("direct_deposit_token"),
            "state": obj.get("state"),
            "reason_code": obj.get("reason_code"),
            "reason": obj.get("reason")
        })
        return _obj

