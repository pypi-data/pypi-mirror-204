# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr

class UpdateBusinessCheckRequestRequest(BaseModel):
    """
    UpdateBusinessCheckRequestRequest
    """
    check_type: StrictStr = ...
    check_name: StrictStr = ...
    check_value: StrictStr = ...
    check_status: StrictStr = ...
    user_email: StrictStr = ...
    note: Optional[StrictStr] = None
    kyb_token: Optional[StrictStr] = None
    __properties = ["check_type", "check_name", "check_value", "check_status", "user_email", "note", "kyb_token"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateBusinessCheckRequestRequest:
        """Create an instance of UpdateBusinessCheckRequestRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateBusinessCheckRequestRequest:
        """Create an instance of UpdateBusinessCheckRequestRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return UpdateBusinessCheckRequestRequest.parse_obj(obj)

        _obj = UpdateBusinessCheckRequestRequest.parse_obj({
            "check_type": obj.get("check_type"),
            "check_name": obj.get("check_name"),
            "check_value": obj.get("check_value"),
            "check_status": obj.get("check_status"),
            "user_email": obj.get("user_email"),
            "note": obj.get("note"),
            "kyb_token": obj.get("kyb_token")
        })
        return _obj

