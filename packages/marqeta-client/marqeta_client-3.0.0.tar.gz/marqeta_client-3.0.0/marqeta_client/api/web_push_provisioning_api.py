# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictStr

from marqeta_client.models.request_for_apple_pay_wpp_jwt import RequestForApplePayWppJWT
from marqeta_client.models.request_for_wpp_parameters import RequestForWppParameters
from marqeta_client.models.sending_provisioning_data_to_google_pay_backend_request import SendingProvisioningDataToGooglePayBackendRequest
from marqeta_client.models.web_push_provisioning import WebPushProvisioning
from marqeta_client.models.web_push_provisioning_apple_pay_jwt_response import WebPushProvisioningApplePayJWTResponse

from marqeta_client.api_client import ApiClient
from marqeta_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class WebPushProvisioningApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def generate_apple_pay_wppjwt(self, req_sys_id : Annotated[StrictStr, Field(..., description="Random pseudo unique value used for troubleshooting between multiple parties. 36 char max")], request_body_for_apple_pay_wpp_jwt : RequestForApplePayWppJWT, **kwargs) -> WebPushProvisioningApplePayJWTResponse:  # noqa: E501
        """API to generate a Javascript object token containing a JWT to initiate Apple Pay web push provisioning  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_apple_pay_wppjwt(req_sys_id, request_body_for_apple_pay_wpp_jwt, async_req=True)
        >>> result = thread.get()

        :param req_sys_id: Random pseudo unique value used for troubleshooting between multiple parties. 36 char max (required)
        :type req_sys_id: str
        :param request_body_for_apple_pay_wpp_jwt: (required)
        :type request_body_for_apple_pay_wpp_jwt: RequestForApplePayWppJWT
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WebPushProvisioningApplePayJWTResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_apple_pay_wppjwt_with_http_info(req_sys_id, request_body_for_apple_pay_wpp_jwt, **kwargs)  # noqa: E501

    @validate_arguments
    def generate_apple_pay_wppjwt_with_http_info(self, req_sys_id : Annotated[StrictStr, Field(..., description="Random pseudo unique value used for troubleshooting between multiple parties. 36 char max")], request_body_for_apple_pay_wpp_jwt : RequestForApplePayWppJWT, **kwargs):  # noqa: E501
        """API to generate a Javascript object token containing a JWT to initiate Apple Pay web push provisioning  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_apple_pay_wppjwt_with_http_info(req_sys_id, request_body_for_apple_pay_wpp_jwt, async_req=True)
        >>> result = thread.get()

        :param req_sys_id: Random pseudo unique value used for troubleshooting between multiple parties. 36 char max (required)
        :type req_sys_id: str
        :param request_body_for_apple_pay_wpp_jwt: (required)
        :type request_body_for_apple_pay_wpp_jwt: RequestForApplePayWppJWT
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WebPushProvisioningApplePayJWTResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'req_sys_id',
            'request_body_for_apple_pay_wpp_jwt'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_apple_pay_wppjwt" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['req_sys_id']:
            _header_params['req-sys-id'] = _params['req_sys_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request_body_for_apple_pay_wpp_jwt']:
            _body_params = _params['request_body_for_apple_pay_wpp_jwt']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "WebPushProvisioningApplePayJWTResponse",
            '400': "ErrorMessageFromWebPushProvisioningRequest",
            '401': "ErrorMessageFromWebPushProvisioningRequest",
            '500': "ErrorMessageFromWebPushProvisioningRequest",
        }

        return self.api_client.call_api(
            '/digitalwallets/wpp/applePayJWT', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_wpp_parameters(self, req_sys_id : Annotated[StrictStr, Field(..., description="Random pseudo unique value used for troubleshooting between multiple parties. 36 char max")], request_body_for_wpp_parameters : RequestForWppParameters, **kwargs) -> WebPushProvisioning:  # noqa: E501
        """API to query for the web push provisioning related parameters, such as: google piaid/integrator_id, apple partnerId, apple Card Template Identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_wpp_parameters(req_sys_id, request_body_for_wpp_parameters, async_req=True)
        >>> result = thread.get()

        :param req_sys_id: Random pseudo unique value used for troubleshooting between multiple parties. 36 char max (required)
        :type req_sys_id: str
        :param request_body_for_wpp_parameters: (required)
        :type request_body_for_wpp_parameters: RequestForWppParameters
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WebPushProvisioning
        """
        kwargs['_return_http_data_only'] = True
        return self.get_wpp_parameters_with_http_info(req_sys_id, request_body_for_wpp_parameters, **kwargs)  # noqa: E501

    @validate_arguments
    def get_wpp_parameters_with_http_info(self, req_sys_id : Annotated[StrictStr, Field(..., description="Random pseudo unique value used for troubleshooting between multiple parties. 36 char max")], request_body_for_wpp_parameters : RequestForWppParameters, **kwargs):  # noqa: E501
        """API to query for the web push provisioning related parameters, such as: google piaid/integrator_id, apple partnerId, apple Card Template Identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_wpp_parameters_with_http_info(req_sys_id, request_body_for_wpp_parameters, async_req=True)
        >>> result = thread.get()

        :param req_sys_id: Random pseudo unique value used for troubleshooting between multiple parties. 36 char max (required)
        :type req_sys_id: str
        :param request_body_for_wpp_parameters: (required)
        :type request_body_for_wpp_parameters: RequestForWppParameters
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WebPushProvisioning, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'req_sys_id',
            'request_body_for_wpp_parameters'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wpp_parameters" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['req_sys_id']:
            _header_params['req-sys-id'] = _params['req_sys_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request_body_for_wpp_parameters']:
            _body_params = _params['request_body_for_wpp_parameters']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "WebPushProvisioning",
            '400': "ErrorMessageFromWebPushProvisioningRequest",
            '401': "ErrorMessageFromWebPushProvisioningRequest",
            '500': "ErrorMessageFromWebPushProvisioningRequest",
        }

        return self.api_client.call_api(
            '/digitalwallets/wpp/parameters', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def send_opc_data_to_google_pay(self, req_sys_id : Annotated[StrictStr, Field(..., description="Random pseudo unique value used for troubleshooting between multiple parties. 36 char max")], request_body_to_initiate_google_pay_web_push_provisioning : SendingProvisioningDataToGooglePayBackendRequest, **kwargs) -> None:  # noqa: E501
        """Request sending OPC data to google pay  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_opc_data_to_google_pay(req_sys_id, request_body_to_initiate_google_pay_web_push_provisioning, async_req=True)
        >>> result = thread.get()

        :param req_sys_id: Random pseudo unique value used for troubleshooting between multiple parties. 36 char max (required)
        :type req_sys_id: str
        :param request_body_to_initiate_google_pay_web_push_provisioning: (required)
        :type request_body_to_initiate_google_pay_web_push_provisioning: SendingProvisioningDataToGooglePayBackendRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.send_opc_data_to_google_pay_with_http_info(req_sys_id, request_body_to_initiate_google_pay_web_push_provisioning, **kwargs)  # noqa: E501

    @validate_arguments
    def send_opc_data_to_google_pay_with_http_info(self, req_sys_id : Annotated[StrictStr, Field(..., description="Random pseudo unique value used for troubleshooting between multiple parties. 36 char max")], request_body_to_initiate_google_pay_web_push_provisioning : SendingProvisioningDataToGooglePayBackendRequest, **kwargs):  # noqa: E501
        """Request sending OPC data to google pay  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_opc_data_to_google_pay_with_http_info(req_sys_id, request_body_to_initiate_google_pay_web_push_provisioning, async_req=True)
        >>> result = thread.get()

        :param req_sys_id: Random pseudo unique value used for troubleshooting between multiple parties. 36 char max (required)
        :type req_sys_id: str
        :param request_body_to_initiate_google_pay_web_push_provisioning: (required)
        :type request_body_to_initiate_google_pay_web_push_provisioning: SendingProvisioningDataToGooglePayBackendRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'req_sys_id',
            'request_body_to_initiate_google_pay_web_push_provisioning'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_opc_data_to_google_pay" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['req_sys_id']:
            _header_params['req-sys-id'] = _params['req_sys_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request_body_to_initiate_google_pay_web_push_provisioning']:
            _body_params = _params['request_body_to_initiate_google_pay_web_push_provisioning']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/digitalwallets/wpp/googlePayPushProvisioningNotification', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
