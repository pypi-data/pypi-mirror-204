# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, conint

from typing import Optional

from marqeta_client.models.deposit_account_response import DepositAccountResponse
from marqeta_client.models.deposit_account_update_request import DepositAccountUpdateRequest
from marqeta_client.models.deposit_deposit_response import DepositDepositResponse
from marqeta_client.models.direct_deposit_list_response import DirectDepositListResponse
from marqeta_client.models.direct_deposit_transition_list_response import DirectDepositTransitionListResponse
from marqeta_client.models.direct_deposit_transition_request import DirectDepositTransitionRequest
from marqeta_client.models.direct_deposit_transition_response import DirectDepositTransitionResponse

from marqeta_client.api_client import ApiClient
from marqeta_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DirectDepositsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_directdeposits(self, count : Annotated[Optional[conint(strict=True, le=100)], Field(description="Number of direct deposits to retrieve")] = None, start_index : Annotated[Optional[StrictInt], Field(description="Start index")] = None, reversed_after_grace_period : Annotated[Optional[StrictBool], Field(description="Reversed after grace period")] = None, user_token : Annotated[Optional[StrictStr], Field(description="User token")] = None, business_token : Annotated[Optional[StrictStr], Field(description="Business token")] = None, direct_deposit_state : Annotated[Optional[StrictStr], Field(description="Direct deposit state")] = None, start_settlement_date : Annotated[Optional[StrictStr], Field(description="Start settlement date")] = None, end_settlement_date : Annotated[Optional[StrictStr], Field(description="End settlement date")] = None, sort_by : Annotated[Optional[StrictStr], Field(description="Sort order")] = None, **kwargs) -> DirectDepositListResponse:  # noqa: E501
        """Lists all direct deposits  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_directdeposits(count, start_index, reversed_after_grace_period, user_token, business_token, direct_deposit_state, start_settlement_date, end_settlement_date, sort_by, async_req=True)
        >>> result = thread.get()

        :param count: Number of direct deposits to retrieve
        :type count: int
        :param start_index: Start index
        :type start_index: int
        :param reversed_after_grace_period: Reversed after grace period
        :type reversed_after_grace_period: bool
        :param user_token: User token
        :type user_token: str
        :param business_token: Business token
        :type business_token: str
        :param direct_deposit_state: Direct deposit state
        :type direct_deposit_state: str
        :param start_settlement_date: Start settlement date
        :type start_settlement_date: str
        :param end_settlement_date: End settlement date
        :type end_settlement_date: str
        :param sort_by: Sort order
        :type sort_by: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DirectDepositListResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_directdeposits_with_http_info(count, start_index, reversed_after_grace_period, user_token, business_token, direct_deposit_state, start_settlement_date, end_settlement_date, sort_by, **kwargs)  # noqa: E501

    @validate_arguments
    def get_directdeposits_with_http_info(self, count : Annotated[Optional[conint(strict=True, le=100)], Field(description="Number of direct deposits to retrieve")] = None, start_index : Annotated[Optional[StrictInt], Field(description="Start index")] = None, reversed_after_grace_period : Annotated[Optional[StrictBool], Field(description="Reversed after grace period")] = None, user_token : Annotated[Optional[StrictStr], Field(description="User token")] = None, business_token : Annotated[Optional[StrictStr], Field(description="Business token")] = None, direct_deposit_state : Annotated[Optional[StrictStr], Field(description="Direct deposit state")] = None, start_settlement_date : Annotated[Optional[StrictStr], Field(description="Start settlement date")] = None, end_settlement_date : Annotated[Optional[StrictStr], Field(description="End settlement date")] = None, sort_by : Annotated[Optional[StrictStr], Field(description="Sort order")] = None, **kwargs):  # noqa: E501
        """Lists all direct deposits  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_directdeposits_with_http_info(count, start_index, reversed_after_grace_period, user_token, business_token, direct_deposit_state, start_settlement_date, end_settlement_date, sort_by, async_req=True)
        >>> result = thread.get()

        :param count: Number of direct deposits to retrieve
        :type count: int
        :param start_index: Start index
        :type start_index: int
        :param reversed_after_grace_period: Reversed after grace period
        :type reversed_after_grace_period: bool
        :param user_token: User token
        :type user_token: str
        :param business_token: Business token
        :type business_token: str
        :param direct_deposit_state: Direct deposit state
        :type direct_deposit_state: str
        :param start_settlement_date: Start settlement date
        :type start_settlement_date: str
        :param end_settlement_date: End settlement date
        :type end_settlement_date: str
        :param sort_by: Sort order
        :type sort_by: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DirectDepositListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'count',
            'start_index',
            'reversed_after_grace_period',
            'user_token',
            'business_token',
            'direct_deposit_state',
            'start_settlement_date',
            'end_settlement_date',
            'sort_by'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_directdeposits" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('count') is not None:  # noqa: E501
            _query_params.append(('count', _params['count']))

        if _params.get('start_index') is not None:  # noqa: E501
            _query_params.append(('start_index', _params['start_index']))

        if _params.get('reversed_after_grace_period') is not None:  # noqa: E501
            _query_params.append(('reversed_after_grace_period', _params['reversed_after_grace_period']))

        if _params.get('user_token') is not None:  # noqa: E501
            _query_params.append(('user_token', _params['user_token']))

        if _params.get('business_token') is not None:  # noqa: E501
            _query_params.append(('business_token', _params['business_token']))

        if _params.get('direct_deposit_state') is not None:  # noqa: E501
            _query_params.append(('direct_deposit_state', _params['direct_deposit_state'].value))

        if _params.get('start_settlement_date') is not None:  # noqa: E501
            _query_params.append(('start_settlement_date', _params['start_settlement_date']))

        if _params.get('end_settlement_date') is not None:  # noqa: E501
            _query_params.append(('end_settlement_date', _params['end_settlement_date']))

        if _params.get('sort_by') is not None:  # noqa: E501
            _query_params.append(('sort_by', _params['sort_by']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DirectDepositListResponse",
            '400': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/directdeposits', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_directdeposits_accounts_userorbusinesstoken(self, user_or_business_token : StrictStr, **kwargs) -> DepositAccountResponse:  # noqa: E501
        """Returns an account and routing number which can be used for direct deposit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_directdeposits_accounts_userorbusinesstoken(user_or_business_token, async_req=True)
        >>> result = thread.get()

        :param user_or_business_token: (required)
        :type user_or_business_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DepositAccountResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_directdeposits_accounts_userorbusinesstoken_with_http_info(user_or_business_token, **kwargs)  # noqa: E501

    @validate_arguments
    def get_directdeposits_accounts_userorbusinesstoken_with_http_info(self, user_or_business_token : StrictStr, **kwargs):  # noqa: E501
        """Returns an account and routing number which can be used for direct deposit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_directdeposits_accounts_userorbusinesstoken_with_http_info(user_or_business_token, async_req=True)
        >>> result = thread.get()

        :param user_or_business_token: (required)
        :type user_or_business_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DepositAccountResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_or_business_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_directdeposits_accounts_userorbusinesstoken" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_or_business_token']:
            _path_params['user_or_business_token'] = _params['user_or_business_token']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DepositAccountResponse",
            '400': None,
            '404': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/directdeposits/accounts/{user_or_business_token}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_directdeposits_token(self, token : StrictStr, **kwargs) -> DepositDepositResponse:  # noqa: E501
        """Returns a direct deposit entry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_directdeposits_token(token, async_req=True)
        >>> result = thread.get()

        :param token: (required)
        :type token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DepositDepositResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_directdeposits_token_with_http_info(token, **kwargs)  # noqa: E501

    @validate_arguments
    def get_directdeposits_token_with_http_info(self, token : StrictStr, **kwargs):  # noqa: E501
        """Returns a direct deposit entry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_directdeposits_token_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param token: (required)
        :type token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DepositDepositResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_directdeposits_token" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['token']:
            _path_params['token'] = _params['token']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DepositDepositResponse",
            '404': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/directdeposits/{token}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_directdeposits_transitions(self, count : Annotated[Optional[conint(strict=True, le=100)], Field(description="Number of direct deposit transitions to retrieve")] = None, user_token : Annotated[Optional[StrictStr], Field(description="User token")] = None, business_token : Annotated[Optional[StrictStr], Field(description="Business token")] = None, direct_deposit_token : Annotated[Optional[StrictStr], Field(description="Direct deposit token")] = None, start_index : Annotated[Optional[StrictInt], Field(description="Start index")] = None, sort_by : Annotated[Optional[StrictStr], Field(description="Sort order")] = None, states : Annotated[Optional[StrictStr], Field(description="Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED ")] = None, **kwargs) -> DirectDepositTransitionListResponse:  # noqa: E501
        """Returns a list of direct deposit transitions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_directdeposits_transitions(count, user_token, business_token, direct_deposit_token, start_index, sort_by, states, async_req=True)
        >>> result = thread.get()

        :param count: Number of direct deposit transitions to retrieve
        :type count: int
        :param user_token: User token
        :type user_token: str
        :param business_token: Business token
        :type business_token: str
        :param direct_deposit_token: Direct deposit token
        :type direct_deposit_token: str
        :param start_index: Start index
        :type start_index: int
        :param sort_by: Sort order
        :type sort_by: str
        :param states: Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED 
        :type states: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DirectDepositTransitionListResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_directdeposits_transitions_with_http_info(count, user_token, business_token, direct_deposit_token, start_index, sort_by, states, **kwargs)  # noqa: E501

    @validate_arguments
    def get_directdeposits_transitions_with_http_info(self, count : Annotated[Optional[conint(strict=True, le=100)], Field(description="Number of direct deposit transitions to retrieve")] = None, user_token : Annotated[Optional[StrictStr], Field(description="User token")] = None, business_token : Annotated[Optional[StrictStr], Field(description="Business token")] = None, direct_deposit_token : Annotated[Optional[StrictStr], Field(description="Direct deposit token")] = None, start_index : Annotated[Optional[StrictInt], Field(description="Start index")] = None, sort_by : Annotated[Optional[StrictStr], Field(description="Sort order")] = None, states : Annotated[Optional[StrictStr], Field(description="Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED ")] = None, **kwargs):  # noqa: E501
        """Returns a list of direct deposit transitions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_directdeposits_transitions_with_http_info(count, user_token, business_token, direct_deposit_token, start_index, sort_by, states, async_req=True)
        >>> result = thread.get()

        :param count: Number of direct deposit transitions to retrieve
        :type count: int
        :param user_token: User token
        :type user_token: str
        :param business_token: Business token
        :type business_token: str
        :param direct_deposit_token: Direct deposit token
        :type direct_deposit_token: str
        :param start_index: Start index
        :type start_index: int
        :param sort_by: Sort order
        :type sort_by: str
        :param states: Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED 
        :type states: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DirectDepositTransitionListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'count',
            'user_token',
            'business_token',
            'direct_deposit_token',
            'start_index',
            'sort_by',
            'states'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_directdeposits_transitions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('count') is not None:  # noqa: E501
            _query_params.append(('count', _params['count']))

        if _params.get('user_token') is not None:  # noqa: E501
            _query_params.append(('user_token', _params['user_token']))

        if _params.get('business_token') is not None:  # noqa: E501
            _query_params.append(('business_token', _params['business_token']))

        if _params.get('direct_deposit_token') is not None:  # noqa: E501
            _query_params.append(('direct_deposit_token', _params['direct_deposit_token']))

        if _params.get('start_index') is not None:  # noqa: E501
            _query_params.append(('start_index', _params['start_index']))

        if _params.get('sort_by') is not None:  # noqa: E501
            _query_params.append(('sort_by', _params['sort_by']))

        if _params.get('states') is not None:  # noqa: E501
            _query_params.append(('states', _params['states']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DirectDepositTransitionListResponse",
            '404': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/directdeposits/transitions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_directdeposits_transitions_token(self, token : StrictStr, **kwargs) -> DirectDepositTransitionResponse:  # noqa: E501
        """Returns a direct deposit transition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_directdeposits_transitions_token(token, async_req=True)
        >>> result = thread.get()

        :param token: (required)
        :type token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DirectDepositTransitionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_directdeposits_transitions_token_with_http_info(token, **kwargs)  # noqa: E501

    @validate_arguments
    def get_directdeposits_transitions_token_with_http_info(self, token : StrictStr, **kwargs):  # noqa: E501
        """Returns a direct deposit transition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_directdeposits_transitions_token_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param token: (required)
        :type token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DirectDepositTransitionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_directdeposits_transitions_token" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['token']:
            _path_params['token'] = _params['token']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DirectDepositTransitionResponse",
            '404': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/directdeposits/transitions/{token}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def post_directdeposits_transitions(self, body : Optional[DirectDepositTransitionRequest] = None, **kwargs) -> DirectDepositTransitionResponse:  # noqa: E501
        """Creates a direct deposit transition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_directdeposits_transitions(body, async_req=True)
        >>> result = thread.get()

        :param body:
        :type body: DirectDepositTransitionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DirectDepositTransitionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.post_directdeposits_transitions_with_http_info(body, **kwargs)  # noqa: E501

    @validate_arguments
    def post_directdeposits_transitions_with_http_info(self, body : Optional[DirectDepositTransitionRequest] = None, **kwargs):  # noqa: E501
        """Creates a direct deposit transition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_directdeposits_transitions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body:
        :type body: DirectDepositTransitionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DirectDepositTransitionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_directdeposits_transitions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body']:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DirectDepositTransitionResponse",
            '400': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/directdeposits/transitions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def put_directdeposits_accounts_userorbusinesstoken(self, user_or_business_token : Annotated[StrictStr, Field(..., description="User or business token")], body : Annotated[DepositAccountUpdateRequest, Field(..., description="Deposit account update request")], **kwargs) -> DepositAccountResponse:  # noqa: E501
        """Updates a specific direct deposit account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_directdeposits_accounts_userorbusinesstoken(user_or_business_token, body, async_req=True)
        >>> result = thread.get()

        :param user_or_business_token: User or business token (required)
        :type user_or_business_token: str
        :param body: Deposit account update request (required)
        :type body: DepositAccountUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DepositAccountResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.put_directdeposits_accounts_userorbusinesstoken_with_http_info(user_or_business_token, body, **kwargs)  # noqa: E501

    @validate_arguments
    def put_directdeposits_accounts_userorbusinesstoken_with_http_info(self, user_or_business_token : Annotated[StrictStr, Field(..., description="User or business token")], body : Annotated[DepositAccountUpdateRequest, Field(..., description="Deposit account update request")], **kwargs):  # noqa: E501
        """Updates a specific direct deposit account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_directdeposits_accounts_userorbusinesstoken_with_http_info(user_or_business_token, body, async_req=True)
        >>> result = thread.get()

        :param user_or_business_token: User or business token (required)
        :type user_or_business_token: str
        :param body: Deposit account update request (required)
        :type body: DepositAccountUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DepositAccountResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_or_business_token',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_directdeposits_accounts_userorbusinesstoken" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_or_business_token']:
            _path_params['user_or_business_token'] = _params['user_or_business_token']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body']:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DepositAccountResponse",
            '400': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/directdeposits/accounts/{user_or_business_token}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
