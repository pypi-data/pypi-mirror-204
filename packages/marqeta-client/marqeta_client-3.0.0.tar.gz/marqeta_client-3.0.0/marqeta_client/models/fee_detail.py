# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr
from marqeta_client.models.fee import Fee

class FeeDetail(BaseModel):
    """
    FeeDetail
    """
    token: constr(strict=True, max_length=36, min_length=1) = Field(..., description="36 char max")
    memo: Optional[constr(strict=True, max_length=99, min_length=1)] = None
    tags: Optional[constr(strict=True, max_length=255, min_length=0)] = None
    transaction_token: StrictStr = ...
    fee: Fee = ...
    __properties = ["token", "memo", "tags", "transaction_token", "fee"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FeeDetail:
        """Create an instance of FeeDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of fee
        if self.fee:
            _dict['fee'] = self.fee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FeeDetail:
        """Create an instance of FeeDetail from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return FeeDetail.parse_obj(obj)

        _obj = FeeDetail.parse_obj({
            "token": obj.get("token"),
            "memo": obj.get("memo"),
            "tags": obj.get("tags"),
            "transaction_token": obj.get("transaction_token"),
            "fee": Fee.from_dict(obj.get("fee")) if obj.get("fee") is not None else None
        })
        return _obj

