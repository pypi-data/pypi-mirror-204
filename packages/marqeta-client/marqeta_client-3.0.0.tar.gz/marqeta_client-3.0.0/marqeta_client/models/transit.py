# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr, validator

class Transit(BaseModel):
    """
    Transit
    """
    transaction_type: Optional[StrictStr] = None
    transportation_mode: Optional[StrictStr] = None
    __properties = ["transaction_type", "transportation_mode"]

    @validator('transaction_type')
    def transaction_type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('PRE_FUNDED', 'REAL_TIME_AUTHORIZED', 'POST_AUTHORIZED_AGGREGATED', 'AUTHORIZED_AGGREGATED_SPLIT_CLEARING', 'OTHER', 'DEBIT_RECOVERY'):
            raise ValueError("must be one of enum values ('PRE_FUNDED', 'REAL_TIME_AUTHORIZED', 'POST_AUTHORIZED_AGGREGATED', 'AUTHORIZED_AGGREGATED_SPLIT_CLEARING', 'OTHER', 'DEBIT_RECOVERY')")
        return v

    @validator('transportation_mode')
    def transportation_mode_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('BUS', 'TRAIN', 'WATER_BORNE_VEHICLE', 'TOLL', 'PARKING', 'TAXI', 'PARA_TRANSIT', 'SELF_DRIVE_VEHICLE', 'COACH', 'LOCOMOTIVE', 'POWERED_MOTOR_VEHICLE', 'TRAILER', 'INTER_CITY', 'CABLE_CAR'):
            raise ValueError("must be one of enum values ('BUS', 'TRAIN', 'WATER_BORNE_VEHICLE', 'TOLL', 'PARKING', 'TAXI', 'PARA_TRANSIT', 'SELF_DRIVE_VEHICLE', 'COACH', 'LOCOMOTIVE', 'POWERED_MOTOR_VEHICLE', 'TRAILER', 'INTER_CITY', 'CABLE_CAR')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Transit:
        """Create an instance of Transit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Transit:
        """Create an instance of Transit from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Transit.parse_obj(obj)

        _obj = Transit.parse_obj({
            "transaction_type": obj.get("transaction_type"),
            "transportation_mode": obj.get("transportation_mode")
        })
        return _obj

