# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from marqeta_client.models.installment_payment import InstallmentPayment

class NetworkMetadata(BaseModel):
    """
    NetworkMetadata
    """
    product_id: Optional[StrictStr] = None
    program_id: Optional[StrictStr] = None
    spend_qualifier: Optional[StrictStr] = None
    surcharge_free_atm_network: Optional[StrictStr] = None
    account_identification_1: Optional[StrictStr] = None
    installment_payment: Optional[InstallmentPayment] = None
    __properties = ["product_id", "program_id", "spend_qualifier", "surcharge_free_atm_network", "account_identification_1", "installment_payment"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NetworkMetadata:
        """Create an instance of NetworkMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of installment_payment
        if self.installment_payment:
            _dict['installment_payment'] = self.installment_payment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NetworkMetadata:
        """Create an instance of NetworkMetadata from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return NetworkMetadata.parse_obj(obj)

        _obj = NetworkMetadata.parse_obj({
            "product_id": obj.get("product_id"),
            "program_id": obj.get("program_id"),
            "spend_qualifier": obj.get("spend_qualifier"),
            "surcharge_free_atm_network": obj.get("surcharge_free_atm_network"),
            "account_identification_1": obj.get("account_identification_1"),
            "installment_payment": InstallmentPayment.from_dict(obj.get("installment_payment")) if obj.get("installment_payment") is not None else None
        })
        return _obj

