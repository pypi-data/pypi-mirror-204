# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from marqeta_client.models.internal_card import InternalCard
from marqeta_client.models.internal_card_product import InternalCardProduct
from marqeta_client.models.internal_transaction_data_model import InternalTransactionDataModel
from marqeta_client.models.internal_user import InternalUser

class VelocityControlCheckRequest(BaseModel):
    """
    VelocityControlCheckRequest
    """
    card_product: InternalCardProduct = ...
    transaction: InternalTransactionDataModel = ...
    card_holder: InternalUser = ...
    card: Optional[InternalCard] = None
    context: Optional[Dict[str, StrictStr]] = None
    write_cache: Optional[StrictBool] = None
    debug: Optional[StrictBool] = None
    __properties = ["card_product", "transaction", "card_holder", "card", "context", "write_cache", "debug"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VelocityControlCheckRequest:
        """Create an instance of VelocityControlCheckRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of card_product
        if self.card_product:
            _dict['card_product'] = self.card_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction
        if self.transaction:
            _dict['transaction'] = self.transaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card_holder
        if self.card_holder:
            _dict['card_holder'] = self.card_holder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VelocityControlCheckRequest:
        """Create an instance of VelocityControlCheckRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return VelocityControlCheckRequest.parse_obj(obj)

        _obj = VelocityControlCheckRequest.parse_obj({
            "card_product": InternalCardProduct.from_dict(obj.get("card_product")) if obj.get("card_product") is not None else None,
            "transaction": InternalTransactionDataModel.from_dict(obj.get("transaction")) if obj.get("transaction") is not None else None,
            "card_holder": InternalUser.from_dict(obj.get("card_holder")) if obj.get("card_holder") is not None else None,
            "card": InternalCard.from_dict(obj.get("card")) if obj.get("card") is not None else None,
            "context": obj.get("context"),
            "write_cache": obj.get("write_cache"),
            "debug": obj.get("debug")
        })
        return _obj

