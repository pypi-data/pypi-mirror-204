# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictStr, constr, validator

class CardholderNoteRequestModel(BaseModel):
    """
    CardholderNoteRequestModel
    """
    token: Optional[constr(strict=True, max_length=36, min_length=1)] = None
    description: StrictStr = ...
    created_by: constr(strict=True, max_length=255, min_length=0) = ...
    created_by_user_role: Optional[StrictStr] = None
    private: Optional[StrictBool] = False
    __properties = ["token", "description", "created_by", "created_by_user_role", "private"]

    @validator('created_by_user_role')
    def created_by_user_role_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('USER', 'ADMIN', 'BANK_USER', 'BANK_ADMIN', 'MARQETA_PD', 'MARQETA_ADMIN'):
            raise ValueError("must be one of enum values ('USER', 'ADMIN', 'BANK_USER', 'BANK_ADMIN', 'MARQETA_PD', 'MARQETA_ADMIN')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CardholderNoteRequestModel:
        """Create an instance of CardholderNoteRequestModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CardholderNoteRequestModel:
        """Create an instance of CardholderNoteRequestModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CardholderNoteRequestModel.parse_obj(obj)

        _obj = CardholderNoteRequestModel.parse_obj({
            "token": obj.get("token"),
            "description": obj.get("description"),
            "created_by": obj.get("created_by"),
            "created_by_user_role": obj.get("created_by_user_role"),
            "private": obj.get("private") if obj.get("private") is not None else False
        })
        return _obj

