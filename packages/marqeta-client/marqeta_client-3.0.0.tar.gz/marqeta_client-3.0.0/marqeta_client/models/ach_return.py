# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class ACHReturn(BaseModel):
    """
    ACHReturn
    """
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    var_date: Optional[datetime] = Field(None, alias="date")
    date_initiated: Optional[datetime] = Field(None, alias="dateInitiated")
    order_id: Optional[StrictStr] = Field(None, alias="orderId")
    reason_code: Optional[StrictStr] = Field(None, alias="reasonCode")
    direct_deposit: Optional[StrictBool] = Field(None, alias="directDeposit")
    ach_type: Optional[StrictStr] = Field(None, alias="achType")
    __properties = ["amount", "date", "dateInitiated", "orderId", "reasonCode", "directDeposit", "achType"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ACHReturn:
        """Create an instance of ACHReturn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ACHReturn:
        """Create an instance of ACHReturn from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ACHReturn.parse_obj(obj)

        _obj = ACHReturn.parse_obj({
            "amount": obj.get("amount"),
            "var_date": obj.get("date"),
            "date_initiated": obj.get("dateInitiated"),
            "order_id": obj.get("orderId"),
            "reason_code": obj.get("reasonCode"),
            "direct_deposit": obj.get("directDeposit"),
            "ach_type": obj.get("achType")
        })
        return _obj

