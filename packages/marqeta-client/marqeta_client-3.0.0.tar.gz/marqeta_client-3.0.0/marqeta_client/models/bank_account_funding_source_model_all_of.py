# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class BankAccountFundingSourceModelAllOf(BaseModel):
    """
    BankAccountFundingSourceModelAllOf
    """
    user_token: Optional[StrictStr] = Field(None, description="Required if 'business_token' is null")
    business_token: Optional[StrictStr] = Field(None, description="Required if 'user_token' is null")
    account_suffix: StrictStr = ...
    account_type: StrictStr = ...
    name_on_account: StrictStr = ...
    routing_number: StrictStr = ...
    verification_status: StrictStr = ...
    __properties = ["user_token", "business_token", "account_suffix", "account_type", "name_on_account", "routing_number", "verification_status"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BankAccountFundingSourceModelAllOf:
        """Create an instance of BankAccountFundingSourceModelAllOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BankAccountFundingSourceModelAllOf:
        """Create an instance of BankAccountFundingSourceModelAllOf from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return BankAccountFundingSourceModelAllOf.parse_obj(obj)

        _obj = BankAccountFundingSourceModelAllOf.parse_obj({
            "user_token": obj.get("user_token"),
            "business_token": obj.get("business_token"),
            "account_suffix": obj.get("account_suffix"),
            "account_type": obj.get("account_type"),
            "name_on_account": obj.get("name_on_account"),
            "routing_number": obj.get("routing_number"),
            "verification_status": obj.get("verification_status")
        })
        return _obj

