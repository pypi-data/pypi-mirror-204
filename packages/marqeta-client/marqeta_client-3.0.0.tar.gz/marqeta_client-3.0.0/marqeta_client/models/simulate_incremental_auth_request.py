# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, validator
from marqeta_client.models.network_fee_model import NetworkFeeModel
from marqeta_client.models.webhook import Webhook

class SimulateIncrementalAuthRequest(BaseModel):
    """
    SimulateIncrementalAuthRequest
    """
    card_token: StrictStr = Field(..., description="The card token of the original transaction")
    amount: Union[StrictFloat, StrictInt] = Field(..., description="The amount of the transaction in the clearing currency")
    settlement_currency: Optional[StrictStr] = Field(None, description="The ISO-3166-1 Alpha-3 or Numeric code for the clearing currency for the transaction")
    local_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The amount of the transaction in the local currency")
    local_currency: Optional[StrictStr] = Field(None, description="The ISO-3166-1 Alpha-3 or Numeric code for the local currency")
    currency_conversion_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The conversion rate between the local and settlement currencies")
    network: StrictStr = Field(..., description="The transaction network for the authorization")
    sub_network: Optional[StrictStr] = Field(None, description="The transaction sub-network for the authorization")
    merchant_id: StrictStr = Field(..., description="The merchant id for the transaction")
    webhook: Optional[Webhook] = None
    network_fees: Optional[conlist(NetworkFeeModel)] = Field(None, description="The network fees for the transaction")
    network_reference_id: StrictStr = Field(..., description="The network reference id from the original transaction")
    __properties = ["card_token", "amount", "settlement_currency", "local_amount", "local_currency", "currency_conversion_rate", "network", "sub_network", "merchant_id", "webhook", "network_fees", "network_reference_id"]

    @validator('network')
    def network_validate_enum(cls, v):
        if v not in ('MARQETA', 'DISCOVER', 'MASTERCARD', 'PULSE', 'VISA'):
            raise ValueError("must be one of enum values ('MARQETA', 'DISCOVER', 'MASTERCARD', 'PULSE', 'VISA')")
        return v

    @validator('sub_network')
    def sub_network_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('VISANET', 'VISANETDEBIT', 'VISAINTERLINK', 'VISAPLUS', 'MAESTRO', 'CIRRUS', 'MASTERCARDDEBIT', 'GATEWAY_JIT', 'MANAGED_JIT'):
            raise ValueError("must be one of enum values ('VISANET', 'VISANETDEBIT', 'VISAINTERLINK', 'VISAPLUS', 'MAESTRO', 'CIRRUS', 'MASTERCARDDEBIT', 'GATEWAY_JIT', 'MANAGED_JIT')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SimulateIncrementalAuthRequest:
        """Create an instance of SimulateIncrementalAuthRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of webhook
        if self.webhook:
            _dict['webhook'] = self.webhook.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in network_fees (list)
        _items = []
        if self.network_fees:
            for _item in self.network_fees:
                if _item:
                    _items.append(_item.to_dict())
            _dict['network_fees'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SimulateIncrementalAuthRequest:
        """Create an instance of SimulateIncrementalAuthRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SimulateIncrementalAuthRequest.parse_obj(obj)

        _obj = SimulateIncrementalAuthRequest.parse_obj({
            "card_token": obj.get("card_token"),
            "amount": obj.get("amount"),
            "settlement_currency": obj.get("settlement_currency"),
            "local_amount": obj.get("local_amount"),
            "local_currency": obj.get("local_currency"),
            "currency_conversion_rate": obj.get("currency_conversion_rate"),
            "network": obj.get("network"),
            "sub_network": obj.get("sub_network"),
            "merchant_id": obj.get("merchant_id"),
            "webhook": Webhook.from_dict(obj.get("webhook")) if obj.get("webhook") is not None else None,
            "network_fees": [NetworkFeeModel.from_dict(_item) for _item in obj.get("network_fees")] if obj.get("network_fees") is not None else None,
            "network_reference_id": obj.get("network_reference_id")
        })
        return _obj

