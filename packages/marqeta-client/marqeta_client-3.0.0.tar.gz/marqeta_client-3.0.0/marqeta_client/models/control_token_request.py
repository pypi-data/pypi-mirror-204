# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class ControlTokenRequest(BaseModel):
    """
    ControlTokenRequest
    """
    card_token: constr(strict=True, max_length=36, min_length=1) = Field(..., description="Token associated with the card")
    controltoken_type: Optional[StrictStr] = Field(None, description="Type of control token required")
    __properties = ["card_token", "controltoken_type"]

    @validator('controltoken_type')
    def controltoken_type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('SET_PIN', 'SHOW_PIN'):
            raise ValueError("must be one of enum values ('SET_PIN', 'SHOW_PIN')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ControlTokenRequest:
        """Create an instance of ControlTokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ControlTokenRequest:
        """Create an instance of ControlTokenRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ControlTokenRequest.parse_obj(obj)

        _obj = ControlTokenRequest.parse_obj({
            "card_token": obj.get("card_token"),
            "controltoken_type": obj.get("controltoken_type")
        })
        return _obj

