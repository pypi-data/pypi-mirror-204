# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt
from marqeta_client.models.cardholder_address_response import CardholderAddressResponse
from marqeta_client.models.funding_source_model import FundingSourceModel
from marqeta_client.models.gateway_log_model import GatewayLogModel

class Funding(BaseModel):
    """
    Funding
    """
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    source: FundingSourceModel = ...
    source_address: Optional[CardholderAddressResponse] = None
    gateway_log: Optional[GatewayLogModel] = None
    __properties = ["amount", "source", "source_address", "gateway_log"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Funding:
        """Create an instance of Funding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_address
        if self.source_address:
            _dict['source_address'] = self.source_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gateway_log
        if self.gateway_log:
            _dict['gateway_log'] = self.gateway_log.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Funding:
        """Create an instance of Funding from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Funding.parse_obj(obj)

        _obj = Funding.parse_obj({
            "amount": obj.get("amount"),
            "source": FundingSourceModel.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "source_address": CardholderAddressResponse.from_dict(obj.get("source_address")) if obj.get("source_address") is not None else None,
            "gateway_log": GatewayLogModel.from_dict(obj.get("gateway_log")) if obj.get("gateway_log") is not None else None
        })
        return _obj

