# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool

class RealTimeStandinCriteria(BaseModel):
    """
    RealTimeStandinCriteria
    """
    enabled: Optional[StrictBool] = False
    include_connection_errors: Optional[StrictBool] = False
    include_response_timeouts: Optional[StrictBool] = False
    include_application_errors: Optional[StrictBool] = False
    __properties = ["enabled", "include_connection_errors", "include_response_timeouts", "include_application_errors"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RealTimeStandinCriteria:
        """Create an instance of RealTimeStandinCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RealTimeStandinCriteria:
        """Create an instance of RealTimeStandinCriteria from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return RealTimeStandinCriteria.parse_obj(obj)

        _obj = RealTimeStandinCriteria.parse_obj({
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "include_connection_errors": obj.get("include_connection_errors") if obj.get("include_connection_errors") is not None else False,
            "include_response_timeouts": obj.get("include_response_timeouts") if obj.get("include_response_timeouts") is not None else False,
            "include_application_errors": obj.get("include_application_errors") if obj.get("include_application_errors") is not None else False
        })
        return _obj

