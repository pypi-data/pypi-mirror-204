# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, conlist
from marqeta_client.models.riskcontrol_tags import RiskcontrolTags
from marqeta_client.models.triggered_rule import TriggeredRule

class Issuer(BaseModel):
    """
    Issuer
    """
    success: Optional[StrictBool] = False
    fraud_score: Optional[StrictInt] = None
    fraud_rating: Optional[StrictStr] = None
    rule_violations: Optional[conlist(StrictStr)] = None
    fraud_score_reasons: Optional[conlist(StrictStr)] = None
    recommended_action: Optional[StrictStr] = None
    model: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    riskcontrol_tags: Optional[conlist(RiskcontrolTags)] = None
    triggered_rules: Optional[conlist(TriggeredRule)] = None
    __properties = ["success", "fraud_score", "fraud_rating", "rule_violations", "fraud_score_reasons", "recommended_action", "model", "message", "riskcontrol_tags", "triggered_rules"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Issuer:
        """Create an instance of Issuer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in riskcontrol_tags (list)
        _items = []
        if self.riskcontrol_tags:
            for _item in self.riskcontrol_tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['riskcontrol_tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in triggered_rules (list)
        _items = []
        if self.triggered_rules:
            for _item in self.triggered_rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['triggered_rules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Issuer:
        """Create an instance of Issuer from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Issuer.parse_obj(obj)

        _obj = Issuer.parse_obj({
            "success": obj.get("success") if obj.get("success") is not None else False,
            "fraud_score": obj.get("fraud_score"),
            "fraud_rating": obj.get("fraud_rating"),
            "rule_violations": obj.get("rule_violations"),
            "fraud_score_reasons": obj.get("fraud_score_reasons"),
            "recommended_action": obj.get("recommended_action"),
            "model": obj.get("model"),
            "message": obj.get("message"),
            "riskcontrol_tags": [RiskcontrolTags.from_dict(_item) for _item in obj.get("riskcontrol_tags")] if obj.get("riskcontrol_tags") is not None else None,
            "triggered_rules": [TriggeredRule.from_dict(_item) for _item in obj.get("triggered_rules")] if obj.get("triggered_rules") is not None else None
        })
        return _obj

