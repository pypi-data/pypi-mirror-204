# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist
from marqeta_client.models.internal_funding_source import InternalFundingSource
from marqeta_client.models.internal_gateway_response import InternalGatewayResponse
from marqeta_client.models.velocity_control_check_request import VelocityControlCheckRequest

class AutoCommandoModeRequest(BaseModel):
    """
    AutoCommandoModeRequest
    """
    program_gateway_funding_source: InternalFundingSource = ...
    gateway_response: InternalGatewayResponse = ...
    velocity_control_request: VelocityControlCheckRequest = ...
    mcc_groups: Optional[conlist(StrictStr)] = None
    __properties = ["program_gateway_funding_source", "gateway_response", "velocity_control_request", "mcc_groups"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AutoCommandoModeRequest:
        """Create an instance of AutoCommandoModeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of program_gateway_funding_source
        if self.program_gateway_funding_source:
            _dict['program_gateway_funding_source'] = self.program_gateway_funding_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gateway_response
        if self.gateway_response:
            _dict['gateway_response'] = self.gateway_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of velocity_control_request
        if self.velocity_control_request:
            _dict['velocity_control_request'] = self.velocity_control_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AutoCommandoModeRequest:
        """Create an instance of AutoCommandoModeRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AutoCommandoModeRequest.parse_obj(obj)

        _obj = AutoCommandoModeRequest.parse_obj({
            "program_gateway_funding_source": InternalFundingSource.from_dict(obj.get("program_gateway_funding_source")) if obj.get("program_gateway_funding_source") is not None else None,
            "gateway_response": InternalGatewayResponse.from_dict(obj.get("gateway_response")) if obj.get("gateway_response") is not None else None,
            "velocity_control_request": VelocityControlCheckRequest.from_dict(obj.get("velocity_control_request")) if obj.get("velocity_control_request") is not None else None,
            "mcc_groups": obj.get("mcc_groups")
        })
        return _obj

