# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr
from marqeta_client.models.internal_card import InternalCard
from marqeta_client.models.transaction import Transaction

class InternalUserTransactionRequest(BaseModel):
    """
    InternalUserTransactionRequest
    """
    token: constr(strict=True, max_length=36, min_length=1) = ...
    card: InternalCard = ...
    digital_wallet_token: Optional[StrictStr] = Field(None, alias="digitalWalletToken")
    transaction: Optional[Transaction] = None
    __properties = ["token", "card", "digitalWalletToken", "transaction"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InternalUserTransactionRequest:
        """Create an instance of InternalUserTransactionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction
        if self.transaction:
            _dict['transaction'] = self.transaction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InternalUserTransactionRequest:
        """Create an instance of InternalUserTransactionRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return InternalUserTransactionRequest.parse_obj(obj)

        _obj = InternalUserTransactionRequest.parse_obj({
            "token": obj.get("token"),
            "card": InternalCard.from_dict(obj.get("card")) if obj.get("card") is not None else None,
            "digital_wallet_token": obj.get("digitalWalletToken"),
            "transaction": Transaction.from_dict(obj.get("transaction")) if obj.get("transaction") is not None else None
        })
        return _obj

