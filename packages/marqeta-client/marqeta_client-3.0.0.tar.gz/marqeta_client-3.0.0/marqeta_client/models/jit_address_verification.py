# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from marqeta_client.models.address_verification_source import AddressVerificationSource
from marqeta_client.models.avs_information import AvsInformation

class JitAddressVerification(BaseModel):
    """
    JitAddressVerification
    """
    request: Optional[AvsInformation] = None
    issuer: Optional[AddressVerificationSource] = None
    gateway: Optional[AddressVerificationSource] = None
    __properties = ["request", "issuer", "gateway"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JitAddressVerification:
        """Create an instance of JitAddressVerification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issuer
        if self.issuer:
            _dict['issuer'] = self.issuer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gateway
        if self.gateway:
            _dict['gateway'] = self.gateway.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JitAddressVerification:
        """Create an instance of JitAddressVerification from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return JitAddressVerification.parse_obj(obj)

        _obj = JitAddressVerification.parse_obj({
            "request": AvsInformation.from_dict(obj.get("request")) if obj.get("request") is not None else None,
            "issuer": AddressVerificationSource.from_dict(obj.get("issuer")) if obj.get("issuer") is not None else None,
            "gateway": AddressVerificationSource.from_dict(obj.get("gateway")) if obj.get("gateway") is not None else None
        })
        return _obj

