# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, constr
from marqeta_client.models.billing_address import BillingAddress

class CardOptions(BaseModel):
    """
    CardOptions
    """
    cvv: Optional[constr(strict=True, max_length=3, min_length=0)] = None
    card_present: Optional[StrictBool] = False
    expiration: Optional[constr(strict=True, max_length=4, min_length=4)] = None
    billing_address: Optional[BillingAddress] = None
    __properties = ["cvv", "card_present", "expiration", "billing_address"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CardOptions:
        """Create an instance of CardOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CardOptions:
        """Create an instance of CardOptions from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CardOptions.parse_obj(obj)

        _obj = CardOptions.parse_obj({
            "cvv": obj.get("cvv"),
            "card_present": obj.get("card_present") if obj.get("card_present") is not None else False,
            "expiration": obj.get("expiration"),
            "billing_address": BillingAddress.from_dict(obj.get("billing_address")) if obj.get("billing_address") is not None else None
        })
        return _obj

