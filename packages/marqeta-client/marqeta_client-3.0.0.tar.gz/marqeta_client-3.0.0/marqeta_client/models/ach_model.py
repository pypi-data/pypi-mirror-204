# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr, validator

class AchModel(BaseModel):
    """
    AchModel
    """
    token: Optional[constr(strict=True, max_length=36, min_length=1)] = None
    account_number: StrictStr = ...
    routing_number: StrictStr = ...
    name_on_account: constr(strict=True, max_length=50, min_length=1) = ...
    account_type: StrictStr = ...
    bank_name: Optional[StrictStr] = None
    verification_override: Optional[StrictBool] = False
    verification_notes: Optional[StrictStr] = None
    user_token: Optional[constr(strict=True, max_length=36, min_length=1)] = Field(None, description="Required if 'business_token' is null")
    business_token: Optional[constr(strict=True, max_length=36, min_length=1)] = Field(None, description="Required if 'user_token' is null")
    is_default_account: Optional[StrictBool] = False
    __properties = ["token", "account_number", "routing_number", "name_on_account", "account_type", "bank_name", "verification_override", "verification_notes", "user_token", "business_token", "is_default_account"]

    @validator('account_type')
    def account_type_validate_enum(cls, v):
        if v not in ('checking', 'savings', 'corporate', 'loan'):
            raise ValueError("must be one of enum values ('checking', 'savings', 'corporate', 'loan')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AchModel:
        """Create an instance of AchModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "routing_number",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AchModel:
        """Create an instance of AchModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AchModel.parse_obj(obj)

        _obj = AchModel.parse_obj({
            "token": obj.get("token"),
            "account_number": obj.get("account_number"),
            "routing_number": obj.get("routing_number"),
            "name_on_account": obj.get("name_on_account"),
            "account_type": obj.get("account_type"),
            "bank_name": obj.get("bank_name"),
            "verification_override": obj.get("verification_override") if obj.get("verification_override") is not None else False,
            "verification_notes": obj.get("verification_notes"),
            "user_token": obj.get("user_token"),
            "business_token": obj.get("business_token"),
            "is_default_account": obj.get("is_default_account") if obj.get("is_default_account") is not None else False
        })
        return _obj

