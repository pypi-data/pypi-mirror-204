# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictStr, confloat, conint, constr

class FundingRequestModel(BaseModel):
    """
    FundingRequestModel
    """
    user_token: constr(strict=True, max_length=36, min_length=1) = ...
    order_number: StrictStr = ...
    amount: Union[confloat(ge=0.1, strict=True), conint(ge=1, strict=True)] = ...
    funding_source: Optional[StrictStr] = Field(None, description="Payment card or ACH account number")
    funding_address: Optional[StrictStr] = None
    fundgpadetail: Optional[StrictStr] = None
    order_token: Optional[constr(strict=True, max_length=36, min_length=1)] = None
    currency_code: Optional[StrictStr] = None
    __properties = ["user_token", "order_number", "amount", "funding_source", "funding_address", "fundgpadetail", "order_token", "currency_code"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FundingRequestModel:
        """Create an instance of FundingRequestModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FundingRequestModel:
        """Create an instance of FundingRequestModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return FundingRequestModel.parse_obj(obj)

        _obj = FundingRequestModel.parse_obj({
            "user_token": obj.get("user_token"),
            "order_number": obj.get("order_number"),
            "amount": obj.get("amount"),
            "funding_source": obj.get("funding_source"),
            "funding_address": obj.get("funding_address"),
            "fundgpadetail": obj.get("fundgpadetail"),
            "order_token": obj.get("order_token"),
            "currency_code": obj.get("currency_code")
        })
        return _obj

