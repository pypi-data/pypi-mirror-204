# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from marqeta_client.models.auto_commando_mode_program_funding_source_response import AutoCommandoModeProgramFundingSourceResponse
from marqeta_client.models.commando_mode_response import CommandoModeResponse
from marqeta_client.models.response import Response
from marqeta_client.models.velocity_control_check_response import VelocityControlCheckResponse

class AutoCommandoModeResponse(BaseModel):
    """
    AutoCommandoModeResponse
    """
    response: Optional[Response] = None
    commando_mode_response: Optional[CommandoModeResponse] = None
    velocity_control_response: Optional[VelocityControlCheckResponse] = None
    program_funding_source_response: Optional[AutoCommandoModeProgramFundingSourceResponse] = None
    __properties = ["response", "commando_mode_response", "velocity_control_response", "program_funding_source_response"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AutoCommandoModeResponse:
        """Create an instance of AutoCommandoModeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of commando_mode_response
        if self.commando_mode_response:
            _dict['commando_mode_response'] = self.commando_mode_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of velocity_control_response
        if self.velocity_control_response:
            _dict['velocity_control_response'] = self.velocity_control_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of program_funding_source_response
        if self.program_funding_source_response:
            _dict['program_funding_source_response'] = self.program_funding_source_response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AutoCommandoModeResponse:
        """Create an instance of AutoCommandoModeResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AutoCommandoModeResponse.parse_obj(obj)

        _obj = AutoCommandoModeResponse.parse_obj({
            "response": Response.from_dict(obj.get("response")) if obj.get("response") is not None else None,
            "commando_mode_response": CommandoModeResponse.from_dict(obj.get("commando_mode_response")) if obj.get("commando_mode_response") is not None else None,
            "velocity_control_response": VelocityControlCheckResponse.from_dict(obj.get("velocity_control_response")) if obj.get("velocity_control_response") is not None else None,
            "program_funding_source_response": AutoCommandoModeProgramFundingSourceResponse.from_dict(obj.get("program_funding_source_response")) if obj.get("program_funding_source_response") is not None else None
        })
        return _obj

