# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist

class CardholderAuthenticationData(BaseModel):
    """
    CardholderAuthenticationData
    """
    electronic_commerce_indicator: Optional[StrictStr] = None
    verification_result: Optional[StrictStr] = None
    verification_value_created_by: Optional[StrictStr] = None
    acquirer_exemption: Optional[conlist(StrictStr)] = None
    three_ds_message_version: Optional[StrictStr] = None
    authentication_method: Optional[StrictStr] = None
    authentication_status: Optional[StrictStr] = None
    issuer_exemption: Optional[StrictStr] = None
    __properties = ["electronic_commerce_indicator", "verification_result", "verification_value_created_by", "acquirer_exemption", "three_ds_message_version", "authentication_method", "authentication_status", "issuer_exemption"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CardholderAuthenticationData:
        """Create an instance of CardholderAuthenticationData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CardholderAuthenticationData:
        """Create an instance of CardholderAuthenticationData from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CardholderAuthenticationData.parse_obj(obj)

        _obj = CardholderAuthenticationData.parse_obj({
            "electronic_commerce_indicator": obj.get("electronic_commerce_indicator"),
            "verification_result": obj.get("verification_result"),
            "verification_value_created_by": obj.get("verification_value_created_by"),
            "acquirer_exemption": obj.get("acquirer_exemption"),
            "three_ds_message_version": obj.get("three_ds_message_version"),
            "authentication_method": obj.get("authentication_method"),
            "authentication_status": obj.get("authentication_status"),
            "issuer_exemption": obj.get("issuer_exemption")
        })
        return _obj

