# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr

class StrongCustomerAuthenticationLimits(BaseModel):
    """
    StrongCustomerAuthenticationLimits
    """
    sca_contactless_transaction_limit: Optional[Union[StrictFloat, StrictInt]] = None
    sca_contactless_cumulative_amount_limit: Optional[Union[StrictFloat, StrictInt]] = None
    sca_contactless_transactions_count_limit: Optional[StrictInt] = None
    sca_contactless_transactions_currency: Optional[StrictStr] = None
    sca_lvp_transaction_limit: Optional[Union[StrictFloat, StrictInt]] = None
    sca_lvp_cumulative_amount_limit: Optional[Union[StrictFloat, StrictInt]] = None
    sca_lvp_transactions_count_limit: Optional[StrictInt] = None
    sca_lvp_transactions_currency: Optional[StrictStr] = None
    sca_tra_exemption_amount_limit: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["sca_contactless_transaction_limit", "sca_contactless_cumulative_amount_limit", "sca_contactless_transactions_count_limit", "sca_contactless_transactions_currency", "sca_lvp_transaction_limit", "sca_lvp_cumulative_amount_limit", "sca_lvp_transactions_count_limit", "sca_lvp_transactions_currency", "sca_tra_exemption_amount_limit"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StrongCustomerAuthenticationLimits:
        """Create an instance of StrongCustomerAuthenticationLimits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "sca_contactless_transaction_limit",
                            "sca_contactless_cumulative_amount_limit",
                            "sca_contactless_transactions_count_limit",
                            "sca_contactless_transactions_currency",
                            "sca_lvp_transaction_limit",
                            "sca_lvp_cumulative_amount_limit",
                            "sca_lvp_transactions_count_limit",
                            "sca_lvp_transactions_currency",
                            "sca_tra_exemption_amount_limit",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StrongCustomerAuthenticationLimits:
        """Create an instance of StrongCustomerAuthenticationLimits from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return StrongCustomerAuthenticationLimits.parse_obj(obj)

        _obj = StrongCustomerAuthenticationLimits.parse_obj({
            "sca_contactless_transaction_limit": obj.get("sca_contactless_transaction_limit"),
            "sca_contactless_cumulative_amount_limit": obj.get("sca_contactless_cumulative_amount_limit"),
            "sca_contactless_transactions_count_limit": obj.get("sca_contactless_transactions_count_limit"),
            "sca_contactless_transactions_currency": obj.get("sca_contactless_transactions_currency"),
            "sca_lvp_transaction_limit": obj.get("sca_lvp_transaction_limit"),
            "sca_lvp_cumulative_amount_limit": obj.get("sca_lvp_cumulative_amount_limit"),
            "sca_lvp_transactions_count_limit": obj.get("sca_lvp_transactions_count_limit"),
            "sca_lvp_transactions_currency": obj.get("sca_lvp_transactions_currency"),
            "sca_tra_exemption_amount_limit": obj.get("sca_tra_exemption_amount_limit")
        })
        return _obj

