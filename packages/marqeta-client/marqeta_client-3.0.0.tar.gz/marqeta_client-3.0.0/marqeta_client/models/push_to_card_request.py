# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr, constr

class PushToCardRequest(BaseModel):
    """
    PushToCardRequest
    """
    address_1: constr(strict=True, max_length=255, min_length=1) = ...
    address_2: Optional[constr(strict=True, max_length=255, min_length=1)] = None
    city: constr(strict=True, max_length=40, min_length=1) = ...
    state: constr(strict=True, max_length=2, min_length=1) = ...
    postal_code: constr(strict=True, max_length=10, min_length=1) = ...
    country: StrictStr = ...
    token: Optional[constr(strict=True, max_length=36, min_length=1)] = None
    user_token: constr(strict=True, max_length=36, min_length=1) = ...
    name_on_card: constr(strict=True, max_length=50, min_length=1) = ...
    pan: constr(strict=True, max_length=19, min_length=14) = ...
    cvv: StrictStr = ...
    exp_date: StrictStr = ...
    __properties = ["address_1", "address_2", "city", "state", "postal_code", "country", "token", "user_token", "name_on_card", "pan", "cvv", "exp_date"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PushToCardRequest:
        """Create an instance of PushToCardRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PushToCardRequest:
        """Create an instance of PushToCardRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PushToCardRequest.parse_obj(obj)

        _obj = PushToCardRequest.parse_obj({
            "address_1": obj.get("address_1"),
            "address_2": obj.get("address_2"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "postal_code": obj.get("postal_code"),
            "country": obj.get("country"),
            "token": obj.get("token"),
            "user_token": obj.get("user_token"),
            "name_on_card": obj.get("name_on_card"),
            "pan": obj.get("pan"),
            "cvv": obj.get("cvv"),
            "exp_date": obj.get("exp_date")
        })
        return _obj

