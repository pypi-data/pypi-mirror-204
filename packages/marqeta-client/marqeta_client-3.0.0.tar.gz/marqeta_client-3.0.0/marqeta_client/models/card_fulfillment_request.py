# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr, validator
from marqeta_client.models.card_personalization import CardPersonalization
from marqeta_client.models.shipping import Shipping

class CardFulfillmentRequest(BaseModel):
    """
    CardFulfillmentRequest
    """
    shipping: Optional[Shipping] = None
    card_personalization: CardPersonalization = ...
    card_fulfillment_reason: Optional[StrictStr] = None
    __properties = ["shipping", "card_personalization", "card_fulfillment_reason"]

    @validator('card_fulfillment_reason')
    def card_fulfillment_reason_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('NEW', 'LOST_STOLEN', 'EXPIRED'):
            raise ValueError("must be one of enum values ('NEW', 'LOST_STOLEN', 'EXPIRED')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CardFulfillmentRequest:
        """Create an instance of CardFulfillmentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of shipping
        if self.shipping:
            _dict['shipping'] = self.shipping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card_personalization
        if self.card_personalization:
            _dict['card_personalization'] = self.card_personalization.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CardFulfillmentRequest:
        """Create an instance of CardFulfillmentRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CardFulfillmentRequest.parse_obj(obj)

        _obj = CardFulfillmentRequest.parse_obj({
            "shipping": Shipping.from_dict(obj.get("shipping")) if obj.get("shipping") is not None else None,
            "card_personalization": CardPersonalization.from_dict(obj.get("card_personalization")) if obj.get("card_personalization") is not None else None,
            "card_fulfillment_reason": obj.get("card_fulfillment_reason")
        })
        return _obj

