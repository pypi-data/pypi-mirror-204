# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, confloat, conint

class PreKycControls(BaseModel):
    """
    PreKycControls
    """
    cash_access_enabled: Optional[StrictBool] = False
    international_enabled: Optional[StrictBool] = False
    balance_max: Optional[Union[confloat(ge=0.01, strict=True), conint(ge=1, strict=True)]] = Field(None, description="Minimum is 0.01")
    enable_non_program_loads: Optional[StrictBool] = False
    is_reloadable_pre_kyc: Optional[StrictBool] = False
    __properties = ["cash_access_enabled", "international_enabled", "balance_max", "enable_non_program_loads", "is_reloadable_pre_kyc"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreKycControls:
        """Create an instance of PreKycControls from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreKycControls:
        """Create an instance of PreKycControls from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PreKycControls.parse_obj(obj)

        _obj = PreKycControls.parse_obj({
            "cash_access_enabled": obj.get("cash_access_enabled") if obj.get("cash_access_enabled") is not None else False,
            "international_enabled": obj.get("international_enabled") if obj.get("international_enabled") is not None else False,
            "balance_max": obj.get("balance_max"),
            "enable_non_program_loads": obj.get("enable_non_program_loads") if obj.get("enable_non_program_loads") is not None else False,
            "is_reloadable_pre_kyc": obj.get("is_reloadable_pre_kyc") if obj.get("is_reloadable_pre_kyc") is not None else False
        })
        return _obj

