# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from marqeta_client.models.web_push_provisioning_apple_pay_jws_model import WebPushProvisioningApplePayJWSModel

class WebPushProvisioningApplePayJWTResponse(BaseModel):
    """
    WebPushProvisioningApplePayJWTResponse
    """
    jws: WebPushProvisioningApplePayJWSModel = ...
    state: StrictStr = Field(..., description="Unique state associated with the token. MQ will return a UUID here.")
    __properties = ["jws", "state"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WebPushProvisioningApplePayJWTResponse:
        """Create an instance of WebPushProvisioningApplePayJWTResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of jws
        if self.jws:
            _dict['jws'] = self.jws.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WebPushProvisioningApplePayJWTResponse:
        """Create an instance of WebPushProvisioningApplePayJWTResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return WebPushProvisioningApplePayJWTResponse.parse_obj(obj)

        _obj = WebPushProvisioningApplePayJWTResponse.parse_obj({
            "jws": WebPushProvisioningApplePayJWSModel.from_dict(obj.get("jws")) if obj.get("jws") is not None else None,
            "state": obj.get("state")
        })
        return _obj

