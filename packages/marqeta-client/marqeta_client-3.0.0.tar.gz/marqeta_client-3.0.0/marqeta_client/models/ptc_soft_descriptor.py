# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr, constr
from marqeta_client.models.ptc_address import PTCAddress
from marqeta_client.models.ptc_phone import PTCPhone

class PTCSoftDescriptor(BaseModel):
    """
    PTCSoftDescriptor
    """
    name: constr(strict=True, max_length=50, min_length=0) = ...
    address: PTCAddress = ...
    phone: Optional[PTCPhone] = None
    email: Optional[StrictStr] = None
    __properties = ["name", "address", "phone", "email"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PTCSoftDescriptor:
        """Create an instance of PTCSoftDescriptor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phone
        if self.phone:
            _dict['phone'] = self.phone.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PTCSoftDescriptor:
        """Create an instance of PTCSoftDescriptor from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PTCSoftDescriptor.parse_obj(obj)

        _obj = PTCSoftDescriptor.parse_obj({
            "name": obj.get("name"),
            "address": PTCAddress.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "phone": PTCPhone.from_dict(obj.get("phone")) if obj.get("phone") is not None else None,
            "email": obj.get("email")
        })
        return _obj

