# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class FundingAccountResponseModel(BaseModel):
    """
    FundingAccountResponseModel
    """
    created_time: datetime = Field(..., description="yyyy-MM-ddTHH:mm:ssZ")
    last_modified_time: datetime = Field(..., description="yyyy-MM-ddTHH:mm:ssZ")
    type: Optional[StrictStr] = None
    token: Optional[StrictStr] = None
    account_suffix: Optional[StrictStr] = None
    account_type: Optional[StrictStr] = None
    active: Optional[StrictBool] = False
    is_default_account: Optional[StrictBool] = False
    exp_date: Optional[StrictStr] = None
    verification_status: Optional[StrictStr] = None
    date_verified: Optional[datetime] = None
    user_token: Optional[StrictStr] = None
    business_token: Optional[StrictStr] = None
    name_on_account: Optional[StrictStr] = None
    date_sent_for_verification: Optional[datetime] = None
    verification_override: Optional[StrictBool] = False
    verification_notes: Optional[StrictStr] = None
    link_partner_account_reference_token: Optional[StrictStr] = None
    partner: Optional[StrictStr] = None
    __properties = ["created_time", "last_modified_time", "type", "token", "account_suffix", "account_type", "active", "is_default_account", "exp_date", "verification_status", "date_verified", "user_token", "business_token", "name_on_account", "date_sent_for_verification", "verification_override", "verification_notes", "link_partner_account_reference_token", "partner"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FundingAccountResponseModel:
        """Create an instance of FundingAccountResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FundingAccountResponseModel:
        """Create an instance of FundingAccountResponseModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return FundingAccountResponseModel.parse_obj(obj)

        _obj = FundingAccountResponseModel.parse_obj({
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time"),
            "type": obj.get("type"),
            "token": obj.get("token"),
            "account_suffix": obj.get("account_suffix"),
            "account_type": obj.get("account_type"),
            "active": obj.get("active") if obj.get("active") is not None else False,
            "is_default_account": obj.get("is_default_account") if obj.get("is_default_account") is not None else False,
            "exp_date": obj.get("exp_date"),
            "verification_status": obj.get("verification_status"),
            "date_verified": obj.get("date_verified"),
            "user_token": obj.get("user_token"),
            "business_token": obj.get("business_token"),
            "name_on_account": obj.get("name_on_account"),
            "date_sent_for_verification": obj.get("date_sent_for_verification"),
            "verification_override": obj.get("verification_override") if obj.get("verification_override") is not None else False,
            "verification_notes": obj.get("verification_notes"),
            "link_partner_account_reference_token": obj.get("link_partner_account_reference_token"),
            "partner": obj.get("partner")
        })
        return _obj

