# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictStr, confloat, conint, constr, validator

class ChargebackTransitionRequest(BaseModel):
    """
    ChargebackTransitionRequest
    """
    token: Optional[constr(strict=True, max_length=36, min_length=1)] = None
    state: StrictStr = ...
    chargeback_token: constr(strict=True, max_length=36, min_length=1) = ...
    reason: Optional[constr(strict=True, max_length=1024, min_length=1)] = None
    amount: Optional[Union[confloat(ge=0.01, strict=True), conint(ge=1, strict=True)]] = Field(None, description="Representment or prearbitration amount; this is for transitioning to Representment or Prearbitration only")
    regulation_type: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    __properties = ["token", "state", "chargeback_token", "reason", "amount", "regulation_type", "type"]

    @validator('state')
    def state_validate_enum(cls, v):
        if v not in ('REPRESENTMENT', 'PREARBITRATION', 'PREARB_RESPONDED', 'ARBITRATION', 'CASE_WON', 'CASE_LOST', 'WRITTEN_OFF_ISSUER', 'WRITTEN_OFF_PROGRAM'):
            raise ValueError("must be one of enum values ('REPRESENTMENT', 'PREARBITRATION', 'PREARB_RESPONDED', 'ARBITRATION', 'CASE_WON', 'CASE_LOST', 'WRITTEN_OFF_ISSUER', 'WRITTEN_OFF_PROGRAM')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChargebackTransitionRequest:
        """Create an instance of ChargebackTransitionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChargebackTransitionRequest:
        """Create an instance of ChargebackTransitionRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ChargebackTransitionRequest.parse_obj(obj)

        _obj = ChargebackTransitionRequest.parse_obj({
            "token": obj.get("token"),
            "state": obj.get("state"),
            "chargeback_token": obj.get("chargeback_token"),
            "reason": obj.get("reason"),
            "amount": obj.get("amount"),
            "regulation_type": obj.get("regulation_type"),
            "type": obj.get("type")
        })
        return _obj

