# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from marqeta_client.models.result_code_info import ResultCodeInfo

class ResultCode(BaseModel):
    """
    ResultCode
    """
    id: Optional[StrictInt] = None
    mnemonic: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    locales: Optional[Dict[str, ResultCodeInfo]] = None
    __properties = ["id", "mnemonic", "description", "locales"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ResultCode:
        """Create an instance of ResultCode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in locales (dict)
        _field_dict = {}
        if self.locales:
            for _key in self.locales:
                if self.locales[_key]:
                    _field_dict[_key] = self.locales[_key].to_dict()
            _dict['locales'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ResultCode:
        """Create an instance of ResultCode from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ResultCode.parse_obj(obj)

        _obj = ResultCode.parse_obj({
            "id": obj.get("id"),
            "mnemonic": obj.get("mnemonic"),
            "description": obj.get("description"),
            "locales": dict(
                (_k, ResultCodeInfo.from_dict(_v))
                for _k, _v in obj.get("locales").items()
            )
            if obj.get("locales") is not None
            else None
        })
        return _obj

