# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, conlist
from marqeta_client.models.response import Response
from marqeta_client.models.velocity_cache import VelocityCache
from marqeta_client.models.velocity_control_check_request import VelocityControlCheckRequest

class VelocityControlCheckResponse(BaseModel):
    """
    VelocityControlCheckResponse
    """
    velocity_control_check_request: Optional[VelocityControlCheckRequest] = None
    velocity_check_name: Optional[StrictStr] = None
    balance: Optional[Union[StrictFloat, StrictInt]] = None
    response: Optional[Response] = None
    context: Optional[Dict[str, StrictStr]] = None
    caches: Optional[conlist(VelocityCache)] = None
    __properties = ["velocity_control_check_request", "velocity_check_name", "balance", "response", "context", "caches"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VelocityControlCheckResponse:
        """Create an instance of VelocityControlCheckResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of velocity_control_check_request
        if self.velocity_control_check_request:
            _dict['velocity_control_check_request'] = self.velocity_control_check_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in caches (list)
        _items = []
        if self.caches:
            for _item in self.caches:
                if _item:
                    _items.append(_item.to_dict())
            _dict['caches'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VelocityControlCheckResponse:
        """Create an instance of VelocityControlCheckResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return VelocityControlCheckResponse.parse_obj(obj)

        _obj = VelocityControlCheckResponse.parse_obj({
            "velocity_control_check_request": VelocityControlCheckRequest.from_dict(obj.get("velocity_control_check_request")) if obj.get("velocity_control_check_request") is not None else None,
            "velocity_check_name": obj.get("velocity_check_name"),
            "balance": obj.get("balance"),
            "response": Response.from_dict(obj.get("response")) if obj.get("response") is not None else None,
            "context": obj.get("context"),
            "caches": [VelocityCache.from_dict(_item) for _item in obj.get("caches")] if obj.get("caches") is not None else None
        })
        return _obj

