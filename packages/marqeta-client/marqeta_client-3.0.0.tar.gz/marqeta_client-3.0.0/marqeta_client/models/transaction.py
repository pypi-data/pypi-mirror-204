# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictStr, validator
from marqeta_client.models.internal_address_verification_request import InternalAddressVerificationRequest

class Transaction(BaseModel):
    """
    Transaction
    """
    international: Optional[StrictBool] = None
    address_verification: Optional[InternalAddressVerificationRequest] = None
    is_international: Optional[StrictBool] = None
    network: StrictStr = ...
    currency: Optional[StrictStr] = None
    issuer_country: Optional[StrictStr] = None
    __properties = ["international", "address_verification", "is_international", "network", "currency", "issuer_country"]

    @validator('network')
    def network_validate_enum(cls, v):
        if v not in ('MASTERCARD', 'DISCOVER', 'PULSE', 'VISA'):
            raise ValueError("must be one of enum values ('MASTERCARD', 'DISCOVER', 'PULSE', 'VISA')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Transaction:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address_verification
        if self.address_verification:
            _dict['address_verification'] = self.address_verification.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Transaction:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Transaction.parse_obj(obj)

        _obj = Transaction.parse_obj({
            "international": obj.get("international"),
            "address_verification": InternalAddressVerificationRequest.from_dict(obj.get("address_verification")) if obj.get("address_verification") is not None else None,
            "is_international": obj.get("is_international"),
            "network": obj.get("network"),
            "currency": obj.get("currency"),
            "issuer_country": obj.get("issuer_country")
        })
        return _obj

