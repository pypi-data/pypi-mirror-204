# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr
from marqeta_client.models.webhook_config_model import WebhookConfigModel

class WebhookResponseModel(BaseModel):
    """
    WebhookResponseModel
    """
    token: Optional[constr(strict=True, max_length=36, min_length=1)] = None
    name: constr(strict=True, max_length=64, min_length=1) = ...
    active: Optional[StrictBool] = True
    config: WebhookConfigModel = ...
    events: conlist(StrictStr) = Field(..., description="An array of event types")
    created_time: Optional[datetime] = None
    last_modified_time: Optional[datetime] = None
    __properties = ["token", "name", "active", "config", "events", "created_time", "last_modified_time"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WebhookResponseModel:
        """Create an instance of WebhookResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WebhookResponseModel:
        """Create an instance of WebhookResponseModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return WebhookResponseModel.parse_obj(obj)

        _obj = WebhookResponseModel.parse_obj({
            "token": obj.get("token"),
            "name": obj.get("name"),
            "active": obj.get("active") if obj.get("active") is not None else True,
            "config": WebhookConfigModel.from_dict(obj.get("config")) if obj.get("config") is not None else None,
            "events": obj.get("events"),
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time")
        })
        return _obj

