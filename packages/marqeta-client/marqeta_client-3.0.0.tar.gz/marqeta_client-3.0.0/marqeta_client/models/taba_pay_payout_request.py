# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from marqeta_client.models.taba_pay_accounts import TabaPayAccounts
from marqeta_client.models.tabapay_soft_descriptor import TabapaySoftDescriptor

class TabaPayPayoutRequest(BaseModel):
    """
    TabaPayPayoutRequest
    """
    entity: Optional[TabaPayPayoutRequest] = None
    tags: Optional[Dict[str, StrictStr]] = None
    currency: Optional[StrictStr] = None
    amount: Optional[StrictStr] = None
    reference_id: Optional[StrictStr] = Field(None, alias="referenceID")
    accounts: Optional[TabaPayAccounts] = None
    memo: Optional[StrictStr] = None
    timeout: Optional[StrictStr] = None
    soft_descriptor: Optional[TabapaySoftDescriptor] = Field(None, alias="softDescriptor")
    type: Optional[StrictStr] = None
    __properties = ["entity", "tags", "currency", "amount", "referenceID", "accounts", "memo", "timeout", "softDescriptor", "type"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TabaPayPayoutRequest:
        """Create an instance of TabaPayPayoutRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "type",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accounts
        if self.accounts:
            _dict['accounts'] = self.accounts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of soft_descriptor
        if self.soft_descriptor:
            _dict['softDescriptor'] = self.soft_descriptor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TabaPayPayoutRequest:
        """Create an instance of TabaPayPayoutRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TabaPayPayoutRequest.parse_obj(obj)

        _obj = TabaPayPayoutRequest.parse_obj({
            "entity": TabaPayPayoutRequest.from_dict(obj.get("entity")) if obj.get("entity") is not None else None,
            "tags": obj.get("tags"),
            "currency": obj.get("currency"),
            "amount": obj.get("amount"),
            "reference_id": obj.get("referenceID"),
            "accounts": TabaPayAccounts.from_dict(obj.get("accounts")) if obj.get("accounts") is not None else None,
            "memo": obj.get("memo"),
            "timeout": obj.get("timeout"),
            "soft_descriptor": TabapaySoftDescriptor.from_dict(obj.get("softDescriptor")) if obj.get("softDescriptor") is not None else None,
            "type": obj.get("type")
        })
        return _obj

