# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr
from marqeta_client.models.spend_control_association import SpendControlAssociation

class AuthControlExemptMidsRequest(BaseModel):
    """
    AuthControlExemptMidsRequest
    """
    token: Optional[StrictStr] = None
    name: constr(strict=True, max_length=255, min_length=0) = ...
    association: Optional[SpendControlAssociation] = None
    mid: Optional[constr(strict=True, max_length=36, min_length=1)] = None
    merchant_group_token: Optional[constr(strict=True, max_length=36, min_length=1)] = Field(None, description="36 char max")
    start_time: Optional[datetime] = None
    end_time: Optional[datetime] = None
    __properties = ["token", "name", "association", "mid", "merchant_group_token", "start_time", "end_time"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthControlExemptMidsRequest:
        """Create an instance of AuthControlExemptMidsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of association
        if self.association:
            _dict['association'] = self.association.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthControlExemptMidsRequest:
        """Create an instance of AuthControlExemptMidsRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AuthControlExemptMidsRequest.parse_obj(obj)

        _obj = AuthControlExemptMidsRequest.parse_obj({
            "token": obj.get("token"),
            "name": obj.get("name"),
            "association": SpendControlAssociation.from_dict(obj.get("association")) if obj.get("association") is not None else None,
            "mid": obj.get("mid"),
            "merchant_group_token": obj.get("merchant_group_token"),
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time")
        })
        return _obj

