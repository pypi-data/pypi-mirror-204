# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from marqeta_client.models.commando_mode_enables import CommandoModeEnables
from marqeta_client.models.real_time_standin_criteria import RealTimeStandinCriteria

class CommandoModeRequest(BaseModel):
    """
    CommandoModeRequest
    """
    program_gateway_funding_source_token: StrictStr = ...
    real_time_standin_criteria: Optional[RealTimeStandinCriteria] = None
    commando_mode_enables: CommandoModeEnables = ...
    token: Optional[StrictStr] = None
    __properties = ["program_gateway_funding_source_token", "real_time_standin_criteria", "commando_mode_enables", "token"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CommandoModeRequest:
        """Create an instance of CommandoModeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of real_time_standin_criteria
        if self.real_time_standin_criteria:
            _dict['real_time_standin_criteria'] = self.real_time_standin_criteria.to_dict()
        # override the default output from pydantic by calling `to_dict()` of commando_mode_enables
        if self.commando_mode_enables:
            _dict['commando_mode_enables'] = self.commando_mode_enables.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CommandoModeRequest:
        """Create an instance of CommandoModeRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CommandoModeRequest.parse_obj(obj)

        _obj = CommandoModeRequest.parse_obj({
            "program_gateway_funding_source_token": obj.get("program_gateway_funding_source_token"),
            "real_time_standin_criteria": RealTimeStandinCriteria.from_dict(obj.get("real_time_standin_criteria")) if obj.get("real_time_standin_criteria") is not None else None,
            "commando_mode_enables": CommandoModeEnables.from_dict(obj.get("commando_mode_enables")) if obj.get("commando_mode_enables") is not None else None,
            "token": obj.get("token")
        })
        return _obj

