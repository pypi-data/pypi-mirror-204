# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from marqeta_client.models.gpa import GPA
from marqeta_client.models.msa import MSA

class OrderScope(BaseModel):
    """
    OrderScope
    """
    gpa: Optional[GPA] = None
    msa: Optional[MSA] = None
    __properties = ["gpa", "msa"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderScope:
        """Create an instance of OrderScope from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of gpa
        if self.gpa:
            _dict['gpa'] = self.gpa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of msa
        if self.msa:
            _dict['msa'] = self.msa.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderScope:
        """Create an instance of OrderScope from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return OrderScope.parse_obj(obj)

        _obj = OrderScope.parse_obj({
            "gpa": GPA.from_dict(obj.get("gpa")) if obj.get("gpa") is not None else None,
            "msa": MSA.from_dict(obj.get("msa")) if obj.get("msa") is not None else None
        })
        return _obj

