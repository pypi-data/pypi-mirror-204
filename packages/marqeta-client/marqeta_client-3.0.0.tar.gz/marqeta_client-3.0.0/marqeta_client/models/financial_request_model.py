# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, constr
from marqeta_client.models.card_acceptor_model import CardAcceptorModel
from marqeta_client.models.transaction_options import TransactionOptions
from marqeta_client.models.webhook import Webhook

class FinancialRequestModel(BaseModel):
    """
    FinancialRequestModel
    """
    amount: Union[StrictFloat, StrictInt] = ...
    card_token: constr(strict=True, max_length=36, min_length=1) = ...
    pin: Optional[constr(strict=True, max_length=15, min_length=1)] = None
    mid: constr(strict=True, max_length=50, min_length=1) = ...
    cash_back_amount: Optional[Union[StrictFloat, StrictInt]] = None
    is_pre_auth: Optional[StrictBool] = False
    card_acceptor: CardAcceptorModel = ...
    transaction_options: Optional[TransactionOptions] = None
    webhook: Optional[Webhook] = None
    __properties = ["amount", "card_token", "pin", "mid", "cash_back_amount", "is_pre_auth", "card_acceptor", "transaction_options", "webhook"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FinancialRequestModel:
        """Create an instance of FinancialRequestModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of card_acceptor
        if self.card_acceptor:
            _dict['card_acceptor'] = self.card_acceptor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction_options
        if self.transaction_options:
            _dict['transaction_options'] = self.transaction_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webhook
        if self.webhook:
            _dict['webhook'] = self.webhook.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FinancialRequestModel:
        """Create an instance of FinancialRequestModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return FinancialRequestModel.parse_obj(obj)

        _obj = FinancialRequestModel.parse_obj({
            "amount": obj.get("amount"),
            "card_token": obj.get("card_token"),
            "pin": obj.get("pin"),
            "mid": obj.get("mid"),
            "cash_back_amount": obj.get("cash_back_amount"),
            "is_pre_auth": obj.get("is_pre_auth") if obj.get("is_pre_auth") is not None else False,
            "card_acceptor": CardAcceptorModel.from_dict(obj.get("card_acceptor")) if obj.get("card_acceptor") is not None else None,
            "transaction_options": TransactionOptions.from_dict(obj.get("transaction_options")) if obj.get("transaction_options") is not None else None,
            "webhook": Webhook.from_dict(obj.get("webhook")) if obj.get("webhook") is not None else None
        })
        return _obj

