# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, StrictBool, StrictStr, constr
from marqeta_client.models.card_fulfillment_request import CardFulfillmentRequest

class CardUpdateRequest(BaseModel):
    """
    CardUpdateRequest
    """
    token: constr(strict=True, max_length=36, min_length=1) = ...
    user_token: Optional[constr(strict=True, max_length=36, min_length=1)] = None
    expedite: Optional[StrictBool] = False
    fulfillment: Optional[CardFulfillmentRequest] = None
    metadata: Optional[Dict[str, StrictStr]] = None
    __properties = ["token", "user_token", "expedite", "fulfillment", "metadata"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CardUpdateRequest:
        """Create an instance of CardUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of fulfillment
        if self.fulfillment:
            _dict['fulfillment'] = self.fulfillment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CardUpdateRequest:
        """Create an instance of CardUpdateRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CardUpdateRequest.parse_obj(obj)

        _obj = CardUpdateRequest.parse_obj({
            "token": obj.get("token"),
            "user_token": obj.get("user_token"),
            "expedite": obj.get("expedite") if obj.get("expedite") is not None else False,
            "fulfillment": CardFulfillmentRequest.from_dict(obj.get("fulfillment")) if obj.get("fulfillment") is not None else None,
            "metadata": obj.get("metadata")
        })
        return _obj

