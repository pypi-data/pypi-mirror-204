# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist, validator
from marqeta_client.models.internal_card import InternalCard
from marqeta_client.models.internal_user import InternalUser

class InternalAuthControlRequest(BaseModel):
    """
    InternalAuthControlRequest
    """
    card: InternalCard = ...
    cardholder: InternalUser = ...
    mid: Optional[StrictStr] = None
    mcc: Optional[StrictStr] = None
    mcc_groups: Optional[conlist(StrictStr)] = None
    controls_indicator: StrictStr = ...
    network: Optional[StrictStr] = None
    itc: Optional[StrictStr] = None
    business_application_identifier: Optional[StrictStr] = None
    __properties = ["card", "cardholder", "mid", "mcc", "mcc_groups", "controls_indicator", "network", "itc", "business_application_identifier"]

    @validator('controls_indicator')
    def controls_indicator_validate_enum(cls, v):
        if v not in ('LOAD', 'SPEND'):
            raise ValueError("must be one of enum values ('LOAD', 'SPEND')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InternalAuthControlRequest:
        """Create an instance of InternalAuthControlRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cardholder
        if self.cardholder:
            _dict['cardholder'] = self.cardholder.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InternalAuthControlRequest:
        """Create an instance of InternalAuthControlRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return InternalAuthControlRequest.parse_obj(obj)

        _obj = InternalAuthControlRequest.parse_obj({
            "card": InternalCard.from_dict(obj.get("card")) if obj.get("card") is not None else None,
            "cardholder": InternalUser.from_dict(obj.get("cardholder")) if obj.get("cardholder") is not None else None,
            "mid": obj.get("mid"),
            "mcc": obj.get("mcc"),
            "mcc_groups": obj.get("mcc_groups"),
            "controls_indicator": obj.get("controls_indicator"),
            "network": obj.get("network"),
            "itc": obj.get("itc"),
            "business_application_identifier": obj.get("business_application_identifier")
        })
        return _obj

