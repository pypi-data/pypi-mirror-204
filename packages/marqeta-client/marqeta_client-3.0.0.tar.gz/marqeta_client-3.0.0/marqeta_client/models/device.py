# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr

class Device(BaseModel):
    """
    Device
    """
    token: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    language_code: Optional[StrictStr] = None
    device_id: Optional[StrictStr] = None
    phone_number: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    location: Optional[StrictStr] = None
    ip_address: Optional[StrictStr] = None
    __properties = ["token", "type", "language_code", "device_id", "phone_number", "name", "location", "ip_address"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Device:
        """Create an instance of Device from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Device:
        """Create an instance of Device from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Device.parse_obj(obj)

        _obj = Device.parse_obj({
            "token": obj.get("token"),
            "type": obj.get("type"),
            "language_code": obj.get("language_code"),
            "device_id": obj.get("device_id"),
            "phone_number": obj.get("phone_number"),
            "name": obj.get("name"),
            "location": obj.get("location"),
            "ip_address": obj.get("ip_address")
        })
        return _obj

