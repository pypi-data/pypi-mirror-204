# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class TokenServiceProvider(BaseModel):
    """
    TokenServiceProvider
    """
    token_reference_id: Optional[StrictStr] = None
    pan_reference_id: StrictStr = Field(..., description="50 char max")
    correlation_id: Optional[StrictStr] = None
    token_requestor_id: Optional[StrictStr] = None
    token_requestor_name: Optional[StrictStr] = None
    token_type: Optional[StrictStr] = None
    token_pan: Optional[StrictStr] = None
    token_expiration: Optional[StrictStr] = None
    token_score: Optional[StrictStr] = None
    token_assurance_level: Optional[StrictStr] = None
    token_eligibility_decision: Optional[StrictStr] = None
    __properties = ["token_reference_id", "pan_reference_id", "correlation_id", "token_requestor_id", "token_requestor_name", "token_type", "token_pan", "token_expiration", "token_score", "token_assurance_level", "token_eligibility_decision"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TokenServiceProvider:
        """Create an instance of TokenServiceProvider from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TokenServiceProvider:
        """Create an instance of TokenServiceProvider from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TokenServiceProvider.parse_obj(obj)

        _obj = TokenServiceProvider.parse_obj({
            "token_reference_id": obj.get("token_reference_id"),
            "pan_reference_id": obj.get("pan_reference_id"),
            "correlation_id": obj.get("correlation_id"),
            "token_requestor_id": obj.get("token_requestor_id"),
            "token_requestor_name": obj.get("token_requestor_name"),
            "token_type": obj.get("token_type"),
            "token_pan": obj.get("token_pan"),
            "token_expiration": obj.get("token_expiration"),
            "token_score": obj.get("token_score"),
            "token_assurance_level": obj.get("token_assurance_level"),
            "token_eligibility_decision": obj.get("token_eligibility_decision")
        })
        return _obj

