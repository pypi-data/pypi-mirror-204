# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, conlist, constr
from marqeta_client.models.account_model import AccountModel

class BalanceCacheModel(BaseModel):
    """
    BalanceCacheModel
    """
    token: constr(strict=True, max_length=36, min_length=1) = ...
    account: AccountModel = ...
    balance: Union[StrictFloat, StrictInt] = ...
    layers: conlist(StrictInt) = ...
    user_token: StrictStr = ...
    created_time: Optional[datetime] = None
    last_modified_time: Optional[datetime] = None
    __properties = ["token", "account", "balance", "layers", "user_token", "created_time", "last_modified_time"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BalanceCacheModel:
        """Create an instance of BalanceCacheModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BalanceCacheModel:
        """Create an instance of BalanceCacheModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return BalanceCacheModel.parse_obj(obj)

        _obj = BalanceCacheModel.parse_obj({
            "token": obj.get("token"),
            "account": AccountModel.from_dict(obj.get("account")) if obj.get("account") is not None else None,
            "balance": obj.get("balance"),
            "layers": obj.get("layers"),
            "user_token": obj.get("user_token"),
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time")
        })
        return _obj

