# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, StrictStr
from marqeta_client.models.internal_digital_wallet_token import InternalDigitalWalletToken
from marqeta_client.models.internal_transaction_data_model import InternalTransactionDataModel

class CardValidationRequest(BaseModel):
    """
    CardValidationRequest
    """
    hash: StrictStr = ...
    expiration_date: Optional[StrictStr] = None
    config: Optional[Dict[str, StrictStr]] = None
    digital_wallet: Optional[InternalDigitalWalletToken] = None
    transaction: Optional[InternalTransactionDataModel] = None
    __properties = ["hash", "expiration_date", "config", "digital_wallet", "transaction"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CardValidationRequest:
        """Create an instance of CardValidationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of digital_wallet
        if self.digital_wallet:
            _dict['digital_wallet'] = self.digital_wallet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction
        if self.transaction:
            _dict['transaction'] = self.transaction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CardValidationRequest:
        """Create an instance of CardValidationRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CardValidationRequest.parse_obj(obj)

        _obj = CardValidationRequest.parse_obj({
            "hash": obj.get("hash"),
            "expiration_date": obj.get("expiration_date"),
            "config": obj.get("config"),
            "digital_wallet": InternalDigitalWalletToken.from_dict(obj.get("digital_wallet")) if obj.get("digital_wallet") is not None else None,
            "transaction": InternalTransactionDataModel.from_dict(obj.get("transaction")) if obj.get("transaction") is not None else None
        })
        return _obj

