# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictStr
from marqeta_client.models.address_request_model import AddressRequestModel

class BeneficialOwnerRequest(BaseModel):
    """
    BeneficialOwnerRequest
    """
    first_name: Optional[StrictStr] = None
    middle_name: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    home: Optional[AddressRequestModel] = None
    ssn: Optional[StrictStr] = None
    dob: Optional[datetime] = None
    phone: Optional[StrictStr] = None
    __properties = ["first_name", "middle_name", "last_name", "title", "home", "ssn", "dob", "phone"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BeneficialOwnerRequest:
        """Create an instance of BeneficialOwnerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of home
        if self.home:
            _dict['home'] = self.home.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BeneficialOwnerRequest:
        """Create an instance of BeneficialOwnerRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return BeneficialOwnerRequest.parse_obj(obj)

        _obj = BeneficialOwnerRequest.parse_obj({
            "first_name": obj.get("first_name"),
            "middle_name": obj.get("middle_name"),
            "last_name": obj.get("last_name"),
            "title": obj.get("title"),
            "home": AddressRequestModel.from_dict(obj.get("home")) if obj.get("home") is not None else None,
            "ssn": obj.get("ssn"),
            "dob": obj.get("dob"),
            "phone": obj.get("phone")
        })
        return _obj

