# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictBool, StrictStr
from marqeta_client.models.internal_account import InternalAccount

class InternalFundingSource(BaseModel):
    """
    InternalFundingSource
    """
    name: Optional[StrictStr] = None
    active: Optional[StrictBool] = None
    account: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    token: StrictStr = ...
    created_time: Optional[datetime] = None
    last_modified_time: Optional[datetime] = None
    debit_account: Optional[InternalAccount] = None
    is_default_account: Optional[StrictBool] = None
    __properties = ["name", "active", "account", "type", "id", "token", "created_time", "last_modified_time", "debit_account", "is_default_account"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InternalFundingSource:
        """Create an instance of InternalFundingSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of debit_account
        if self.debit_account:
            _dict['debit_account'] = self.debit_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InternalFundingSource:
        """Create an instance of InternalFundingSource from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return InternalFundingSource.parse_obj(obj)

        _obj = InternalFundingSource.parse_obj({
            "name": obj.get("name"),
            "active": obj.get("active"),
            "account": obj.get("account"),
            "type": obj.get("type"),
            "id": obj.get("id"),
            "token": obj.get("token"),
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time"),
            "debit_account": InternalAccount.from_dict(obj.get("debit_account")) if obj.get("debit_account") is not None else None,
            "is_default_account": obj.get("is_default_account")
        })
        return _obj

