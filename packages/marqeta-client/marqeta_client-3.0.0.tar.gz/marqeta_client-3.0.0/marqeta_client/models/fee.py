# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from marqeta_client.models.real_time_fee_assessment import RealTimeFeeAssessment

class Fee(BaseModel):
    """
    Fee
    """
    token: StrictStr = Field(..., description="36 char max")
    name: StrictStr = Field(..., description="50 char max")
    amount: Union[StrictFloat, StrictInt] = ...
    tags: Optional[StrictStr] = Field(None, description="255 char max")
    created_time: datetime = Field(..., description="yyyy-MM-ddTHH:mm:ssZ")
    last_modified_time: datetime = Field(..., description="yyyy-MM-ddTHH:mm:ssZ")
    active: StrictBool = ...
    currency_code: StrictStr = ...
    real_time_assessment: Optional[RealTimeFeeAssessment] = None
    __properties = ["token", "name", "amount", "tags", "created_time", "last_modified_time", "active", "currency_code", "real_time_assessment"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Fee:
        """Create an instance of Fee from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of real_time_assessment
        if self.real_time_assessment:
            _dict['real_time_assessment'] = self.real_time_assessment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Fee:
        """Create an instance of Fee from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Fee.parse_obj(obj)

        _obj = Fee.parse_obj({
            "token": obj.get("token"),
            "name": obj.get("name"),
            "amount": obj.get("amount"),
            "tags": obj.get("tags"),
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time"),
            "active": obj.get("active") if obj.get("active") is not None else False,
            "currency_code": obj.get("currency_code"),
            "real_time_assessment": RealTimeFeeAssessment.from_dict(obj.get("real_time_assessment")) if obj.get("real_time_assessment") is not None else None
        })
        return _obj

