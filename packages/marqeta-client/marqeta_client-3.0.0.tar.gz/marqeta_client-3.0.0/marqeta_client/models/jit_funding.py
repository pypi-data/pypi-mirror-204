# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from marqeta_client.models.jit_funding_paymentcard_funding_source import JitFundingPaymentcardFundingSource
from marqeta_client.models.jit_funding_program_funding_source import JitFundingProgramFundingSource
from marqeta_client.models.jit_funding_programgateway_funding_source import JitFundingProgramgatewayFundingSource

class JitFunding(BaseModel):
    """
    JitFunding
    """
    paymentcard_funding_source: Optional[JitFundingPaymentcardFundingSource] = None
    programgateway_funding_source: Optional[JitFundingProgramgatewayFundingSource] = None
    program_funding_source: Optional[JitFundingProgramFundingSource] = None
    __properties = ["paymentcard_funding_source", "programgateway_funding_source", "program_funding_source"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JitFunding:
        """Create an instance of JitFunding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of paymentcard_funding_source
        if self.paymentcard_funding_source:
            _dict['paymentcard_funding_source'] = self.paymentcard_funding_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of programgateway_funding_source
        if self.programgateway_funding_source:
            _dict['programgateway_funding_source'] = self.programgateway_funding_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of program_funding_source
        if self.program_funding_source:
            _dict['program_funding_source'] = self.program_funding_source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JitFunding:
        """Create an instance of JitFunding from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return JitFunding.parse_obj(obj)

        _obj = JitFunding.parse_obj({
            "paymentcard_funding_source": JitFundingPaymentcardFundingSource.from_dict(obj.get("paymentcard_funding_source")) if obj.get("paymentcard_funding_source") is not None else None,
            "programgateway_funding_source": JitFundingProgramgatewayFundingSource.from_dict(obj.get("programgateway_funding_source")) if obj.get("programgateway_funding_source") is not None else None,
            "program_funding_source": JitFundingProgramFundingSource.from_dict(obj.get("program_funding_source")) if obj.get("program_funding_source") is not None else None
        })
        return _obj

