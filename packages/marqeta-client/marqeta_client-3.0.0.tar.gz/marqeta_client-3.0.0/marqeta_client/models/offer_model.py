# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, constr

class OfferModel(BaseModel):
    """
    OfferModel
    """
    token: Optional[constr(strict=True, max_length=36, min_length=1)] = None
    active: Optional[StrictBool] = True
    name: constr(strict=True, max_length=255, min_length=0) = ...
    start_date: Optional[datetime] = None
    end_date: Optional[datetime] = None
    purchase_amount: Union[StrictFloat, StrictInt] = ...
    reward_amount: Union[StrictFloat, StrictInt] = ...
    reward_trigger_amount: Optional[Union[StrictFloat, StrictInt]] = None
    campaign_token: constr(strict=True, max_length=36, min_length=1) = ...
    currency_code: StrictStr = ...
    __properties = ["token", "active", "name", "start_date", "end_date", "purchase_amount", "reward_amount", "reward_trigger_amount", "campaign_token", "currency_code"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OfferModel:
        """Create an instance of OfferModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OfferModel:
        """Create an instance of OfferModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return OfferModel.parse_obj(obj)

        _obj = OfferModel.parse_obj({
            "token": obj.get("token"),
            "active": obj.get("active") if obj.get("active") is not None else True,
            "name": obj.get("name"),
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "purchase_amount": obj.get("purchase_amount"),
            "reward_amount": obj.get("reward_amount"),
            "reward_trigger_amount": obj.get("reward_trigger_amount"),
            "campaign_token": obj.get("campaign_token"),
            "currency_code": obj.get("currency_code")
        })
        return _obj

