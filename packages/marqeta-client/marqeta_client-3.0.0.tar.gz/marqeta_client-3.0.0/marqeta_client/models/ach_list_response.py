# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, conlist
from marqeta_client.models.base_ach_response_model import BaseAchResponseModel

class ACHListResponse(BaseModel):
    """
    ACHListResponse
    """
    count: Optional[StrictInt] = None
    start_index: Optional[StrictInt] = None
    end_index: Optional[StrictInt] = None
    is_more: Optional[StrictBool] = False
    data: Optional[conlist(BaseAchResponseModel)] = None
    __properties = ["count", "start_index", "end_index", "is_more", "data"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ACHListResponse:
        """Create an instance of ACHListResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item in self.data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['data'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ACHListResponse:
        """Create an instance of ACHListResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ACHListResponse.parse_obj(obj)

        _obj = ACHListResponse.parse_obj({
            "count": obj.get("count"),
            "start_index": obj.get("start_index"),
            "end_index": obj.get("end_index"),
            "is_more": obj.get("is_more") if obj.get("is_more") is not None else False,
            "data": [BaseAchResponseModel.from_dict(_item) for _item in obj.get("data")] if obj.get("data") is not None else None
        })
        return _obj

