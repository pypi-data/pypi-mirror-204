# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from marqeta_client.models.result import Result

class KycResponse(BaseModel):
    """
    KycResponse
    """
    created_time: datetime = Field(..., description="yyyy-MM-ddTHH:mm:ssZ")
    last_modified_time: datetime = Field(..., description="yyyy-MM-ddTHH:mm:ssZ")
    token: Optional[StrictStr] = None
    user_token: Optional[StrictStr] = None
    business_token: Optional[StrictStr] = None
    result: Optional[Result] = None
    manual_override: Optional[StrictBool] = False
    notes: Optional[StrictStr] = None
    reference_id: Optional[StrictStr] = None
    __properties = ["created_time", "last_modified_time", "token", "user_token", "business_token", "result", "manual_override", "notes", "reference_id"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> KycResponse:
        """Create an instance of KycResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "manual_override",
                            "notes",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> KycResponse:
        """Create an instance of KycResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return KycResponse.parse_obj(obj)

        _obj = KycResponse.parse_obj({
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time"),
            "token": obj.get("token"),
            "user_token": obj.get("user_token"),
            "business_token": obj.get("business_token"),
            "result": Result.from_dict(obj.get("result")) if obj.get("result") is not None else None,
            "manual_override": obj.get("manual_override") if obj.get("manual_override") is not None else False,
            "notes": obj.get("notes"),
            "reference_id": obj.get("reference_id")
        })
        return _obj

