# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictStr, validator
from marqeta_client.models.advanced_auth_other_poi import AdvancedAuthOtherPOI

class AdvancedAuthPOI(BaseModel):
    """
    AdvancedAuthPOI
    """
    other: Optional[AdvancedAuthOtherPOI] = None
    ecommerce: Optional[StrictBool] = None
    atm: Optional[StrictBool] = None
    moto: Optional[StrictBool] = None
    moto_indicator: Optional[StrictStr] = None
    __properties = ["other", "ecommerce", "atm", "moto", "moto_indicator"]

    @validator('moto_indicator')
    def moto_indicator_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('UNKNOWN', 'MANUAL', 'RECURRING', 'INSTALLMENT', 'OTHERS', 'EMPTY', 'AUTH_SUCCESS', 'NON_AUTH_3D_SECURE', 'NON_AUTH_SECURE_SUBMISSION'):
            raise ValueError("must be one of enum values ('UNKNOWN', 'MANUAL', 'RECURRING', 'INSTALLMENT', 'OTHERS', 'EMPTY', 'AUTH_SUCCESS', 'NON_AUTH_3D_SECURE', 'NON_AUTH_SECURE_SUBMISSION')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdvancedAuthPOI:
        """Create an instance of AdvancedAuthPOI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of other
        if self.other:
            _dict['other'] = self.other.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdvancedAuthPOI:
        """Create an instance of AdvancedAuthPOI from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AdvancedAuthPOI.parse_obj(obj)

        _obj = AdvancedAuthPOI.parse_obj({
            "other": AdvancedAuthOtherPOI.from_dict(obj.get("other")) if obj.get("other") is not None else None,
            "ecommerce": obj.get("ecommerce"),
            "atm": obj.get("atm"),
            "moto": obj.get("moto"),
            "moto_indicator": obj.get("moto_indicator")
        })
        return _obj

