# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist

class BulkRequestModel(BaseModel):
    """
    BulkRequestModel
    """
    user_tokens: Optional[conlist(StrictStr, max_items=500, min_items=1, unique_items=True)] = None
    business_tokens: Optional[conlist(StrictStr, max_items=500, min_items=1, unique_items=True)] = None
    card_tokens: Optional[conlist(StrictStr, max_items=500, min_items=1, unique_items=True)] = None
    kyc_tokens: Optional[conlist(StrictStr, max_items=500, min_items=1, unique_items=True)] = None
    dda_tokens: Optional[conlist(StrictStr, max_items=500, min_items=1, unique_items=True)] = None
    deposit_accounts: Optional[conlist(StrictStr, max_items=500, min_items=1, unique_items=True)] = None
    __properties = ["user_tokens", "business_tokens", "card_tokens", "kyc_tokens", "dda_tokens", "deposit_accounts"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BulkRequestModel:
        """Create an instance of BulkRequestModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BulkRequestModel:
        """Create an instance of BulkRequestModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return BulkRequestModel.parse_obj(obj)

        _obj = BulkRequestModel.parse_obj({
            "user_tokens": obj.get("user_tokens"),
            "business_tokens": obj.get("business_tokens"),
            "card_tokens": obj.get("card_tokens"),
            "kyc_tokens": obj.get("kyc_tokens"),
            "dda_tokens": obj.get("dda_tokens"),
            "deposit_accounts": obj.get("deposit_accounts")
        })
        return _obj

