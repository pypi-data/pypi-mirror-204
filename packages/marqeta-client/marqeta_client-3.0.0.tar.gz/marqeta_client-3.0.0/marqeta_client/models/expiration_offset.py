# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator
from marqeta_client.models.min_offset import MinOffset

class ExpirationOffset(BaseModel):
    """
    ExpirationOffset
    """
    unit: Optional[StrictStr] = Field(None, description="specify if a value is provided; default is YEARS")
    value: Optional[StrictInt] = Field(None, description="specify if unit is provided; default is 4")
    min_offset: Optional[MinOffset] = None
    __properties = ["unit", "value", "min_offset"]

    @validator('unit')
    def unit_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('YEARS', 'MONTHS', 'DAYS', 'HOURS', 'MINUTES', 'SECONDS'):
            raise ValueError("must be one of enum values ('YEARS', 'MONTHS', 'DAYS', 'HOURS', 'MINUTES', 'SECONDS')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExpirationOffset:
        """Create an instance of ExpirationOffset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of min_offset
        if self.min_offset:
            _dict['min_offset'] = self.min_offset.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExpirationOffset:
        """Create an instance of ExpirationOffset from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ExpirationOffset.parse_obj(obj)

        _obj = ExpirationOffset.parse_obj({
            "unit": obj.get("unit"),
            "value": obj.get("value"),
            "min_offset": MinOffset.from_dict(obj.get("min_offset")) if obj.get("min_offset") is not None else None
        })
        return _obj

