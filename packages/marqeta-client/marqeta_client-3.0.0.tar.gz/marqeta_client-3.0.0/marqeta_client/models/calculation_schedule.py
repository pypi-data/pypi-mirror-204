# coding: utf-8

"""
    Marqeta Core API

    Simplified management of your payment programs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, conlist, constr, validator

class CalculationSchedule(BaseModel):
    """
    CalculationSchedule
    """
    token: constr(strict=True, max_length=36, min_length=1) = ...
    value_type: Optional[StrictStr] = 'PERCENT'
    name: constr(strict=True, max_length=32, min_length=1) = ...
    steps: conlist(Union[StrictFloat, StrictInt]) = ...
    step_values: conlist(Union[StrictFloat, StrictInt]) = ...
    __properties = ["token", "value_type", "name", "steps", "step_values"]

    @validator('value_type')
    def value_type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('AMOUNT', 'PERCENT'):
            raise ValueError("must be one of enum values ('AMOUNT', 'PERCENT')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CalculationSchedule:
        """Create an instance of CalculationSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CalculationSchedule:
        """Create an instance of CalculationSchedule from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CalculationSchedule.parse_obj(obj)

        _obj = CalculationSchedule.parse_obj({
            "token": obj.get("token"),
            "value_type": obj.get("value_type") if obj.get("value_type") is not None else 'PERCENT',
            "name": obj.get("name"),
            "steps": obj.get("steps"),
            "step_values": obj.get("step_values")
        })
        return _obj

