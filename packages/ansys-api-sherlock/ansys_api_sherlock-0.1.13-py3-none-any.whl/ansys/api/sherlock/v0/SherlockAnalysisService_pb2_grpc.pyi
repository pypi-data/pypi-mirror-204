"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.sherlock.v0.SherlockAnalysisService_pb2
import ansys.api.sherlock.v0.SherlockCommonService_pb2
import grpc

class SherlockAnalysisServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    runAnalysis: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.RunAnalysisRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Runs one or more Sherlock analysis."""

    runStrainMapAnalysis: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.RunStrainMapAnalysisRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Run Sherlock strain map analysis."""

    getRandomVibeInputFields: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetRandomVibeInputFieldsRequest,
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetRandomVibeInputFieldsResponse] = ...
    """Returns the list of valid Random Vibe input fields for the provided model source and user configuration."""

    updateRandomVibeProps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateRandomVibePropsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Updates the analysis properties for Random Vibe analysis."""

    getNaturalFrequencyInputFields: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetNaturalFrequencyInputFieldsRequest,
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetNaturalFrequencyInputFieldsResponse] = ...
    """Returns the list of valid Natural Frequency property fields given the user configuration."""

    updateNaturalFrequencyProps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateNaturalFrequencyPropsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Updates the analysis properties for Natural Frequency analysis."""


class SherlockAnalysisServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def runAnalysis(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.RunAnalysisRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Runs one or more Sherlock analysis."""
        pass

    @abc.abstractmethod
    def runStrainMapAnalysis(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.RunStrainMapAnalysisRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Run Sherlock strain map analysis."""
        pass

    @abc.abstractmethod
    def getRandomVibeInputFields(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetRandomVibeInputFieldsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetRandomVibeInputFieldsResponse:
        """Returns the list of valid Random Vibe input fields for the provided model source and user configuration."""
        pass

    @abc.abstractmethod
    def updateRandomVibeProps(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateRandomVibePropsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Updates the analysis properties for Random Vibe analysis."""
        pass

    @abc.abstractmethod
    def getNaturalFrequencyInputFields(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetNaturalFrequencyInputFieldsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetNaturalFrequencyInputFieldsResponse:
        """Returns the list of valid Natural Frequency property fields given the user configuration."""
        pass

    @abc.abstractmethod
    def updateNaturalFrequencyProps(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateNaturalFrequencyPropsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Updates the analysis properties for Natural Frequency analysis."""
        pass


def add_SherlockAnalysisServiceServicer_to_server(servicer: SherlockAnalysisServiceServicer, server: grpc.Server) -> None: ...
