[{"name": "app.py", "content": "# to add a shiny app to public dir:\n# shinylive export shinyapps/basic public/dashboard --subdir basic\nfrom shiny import App, reactive, render, ui\n\nimport ipyleaflet as L\nfrom shinywidgets import output_widget, reactive_read, register_widget\n\n\n# Import modules for plot rendering\nimport numpy as np\nimport matplotlib.pyplot as plt\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"n\", \"N\", 0, 100, 20),\n            ui.input_slider(\"zoom\", \"Map zoom level\", value=12, min=1, max=18),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"histogram\"),\n            output_widget(\"map\"),\n            ui.output_ui(\"map_bounds\"),\n        ),\n    ),\n)\n\n\ndef server(input, output, session):\n    map = L.Map(center=(51.476852, -0.000500), zoom=12, scroll_wheel_zoom=True)\n    # Add a distance scale\n    map.add_control(L.leaflet.ScaleControl(position=\"bottomleft\"))\n    register_widget(\"map\", map)\n\n    # When the slider changes, update the map's zoom attribute (2)\n    @reactive.Effect\n    def _():\n        map.zoom = input.zoom()\n\n    @reactive.Effect\n    def _():\n        ui.update_slider(\"zoom\", value=reactive_read(map, \"zoom\"))\n\n    @output\n    @render.ui\n    def map_bounds():\n        center = reactive_read(map, \"center\")\n        if len(center) == 0:\n            return\n\n        lat = round(center[0], 4)\n        lon = (center[1] + 180) % 360 - 180\n        lon = round(lon, 4)\n\n        return ui.p(f\"Latitude: {lat}\", ui.br(), f\"Longitude: {lon}\")\n\n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n        plt.hist(x, input.n(), density=True)\n\n\napp = App(app_ui, server, debug=True)\n", "type": "text"}]