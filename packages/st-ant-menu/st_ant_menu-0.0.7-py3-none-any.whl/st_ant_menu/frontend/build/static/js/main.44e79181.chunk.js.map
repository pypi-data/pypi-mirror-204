{"version":3,"sources":["AntMenu.tsx","index.tsx"],"names":["Icons","parseMenuItems","data","map","item","menuItem","key","label","icon","undefined","children","Icon","React","createElement","error","console","warn","get_height_menu","menu_array","Array","from","document","getElementsByClassName","menu_height","forEach","element","height","offsetHeight","Object","keys","AllIcons","withStreamlitConnection","props","args","menu_data","defaultSelectedKeys","defaultOpenKeys","additionalHeight","multiple","useState","openKeys","setOpenKeys","rootSubmenuKeys","useEffect","Streamlit","setFrameHeight","id","mode","onOpenChange","latestOpenKey","find","indexOf","setTimeout","setComponentValue","style","width","borderRight","overflow","borderRadius","backgroundColor","items","onClick","ReactDOM","render","StrictMode","getElementById"],"mappings":"wOAYMA,EAA4C,GAmBlD,SAASC,EAAeC,GACtB,OAAOA,EAAKC,KAAI,SAACC,GACf,IAAMC,EAAqB,CACzBC,IAAKF,EAAKE,IACVC,MAAOH,EAAKG,MACZC,UAAMC,EACNC,SAAUN,EAAKM,SAAWT,EAAeG,EAAKM,eAAYD,GAE5D,GAAIL,EAAKI,KACP,IACE,IAAMG,EAAOX,EAAMI,EAAKI,MACpBG,IACFN,EAASG,KAAOI,IAAMC,cAAcF,IAEtC,MAAOG,GACPC,QAAQC,KAAK,8BAAD,OAA+BZ,EAAKI,KAAI,MAAMM,GAG9D,OAAOT,KAQX,SAASY,IACP,IAAIC,EAAaC,MAAMC,KAAKC,SAASC,uBAAuB,aACxDC,EAAc,EAelB,OAdAL,EAAWM,SAAQ,SAACC,GAClB,IAAIC,EAAUD,EAAwBE,aAGlCD,GAEEA,EAAS,IAAM,IACjBH,EAAcG,MAKpBH,GAA4B,IA3D9BK,OAAOC,KAAKC,GAAUN,SAAQ,SAAClB,GAC7BN,EAAMM,GAAgCwB,EAASxB,MAkEjD,IAwDeyB,eAxDO,SAACC,GACrB,MAA6FA,EAAMC,KAA3FC,EAAS,EAATA,UAAW5B,EAAG,EAAHA,IAAK6B,EAAmB,EAAnBA,oBAAqBC,EAAe,EAAfA,gBAAiBC,EAAgB,EAAhBA,iBAAkBC,EAAQ,EAARA,SAChF,EAAgCC,mBAAmB,IAAG,mBAA/CC,EAAQ,KAAEC,EAAW,KAEtBC,EAAkBR,EAAU/B,KAAI,SAACC,GAAS,OAAKA,EAAKE,OAG1DqC,qBAAU,WACRC,IAAUC,mBACT,IAqBH,OACE,kBAAC,IAAI,CACJC,GAAOxC,EACNyC,KAAK,SACLP,SAAUA,EACVQ,aAxB4C,SAACnB,GAC/C,IAAMoB,EAAgBpB,EAAKqB,MAAK,SAAC5C,GAAG,OAAgC,IAA3BkC,EAASW,QAAQ7C,OACT,IAA7CoC,EAAgBS,QAAQF,IAC1BR,EAAYZ,GACZuB,YAAW,WACT,IAAI1B,EAAST,IACb2B,IAAUC,eAAenB,EAASW,KACjC,OAEHO,IAAUS,kBAAkBxB,GAC5BY,EAAYQ,EAAgB,CAACA,GAAiB,IAE9CG,YAAW,WACT,IAAI1B,EAAST,IACb2B,IAAUC,eAAenB,EAASW,KACjC,OAUHiB,MAAO,CACLC,MAAO,OACP7B,OAAQ,OACR8B,YAAa,EACbC,SAAU,OACVC,aAAc,OACdC,gBAAiB,QAEnBC,MAAO3D,EAAeiC,GACtB2B,QAAS,YAAc,IAAXvD,EAAG,EAAHA,IACVsC,IAAUS,kBAAkB/C,IAE9BgC,SAAUA,EACVH,oBAAqB,CAACA,GACtBC,gBAAiB,CAACA,QCzHxB0B,IAASC,OACP,kBAAC,IAAMC,WAAU,KACf,kBAAC,EAAa,OAEhB3C,SAAS4C,eAAe,W","file":"static/js/main.44e79181.chunk.js","sourcesContent":["import { Menu } from \"antd\";\r\nimport { MenuProps } from \"antd/lib/menu\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport * as AllIcons from \"@ant-design/icons\";\r\nimport { ComponentType } from \"react\";\r\n\r\n// Create a mapping of all available Ant Design icons\r\nconst Icons: Record<string, ComponentType<any>> = {};\r\nObject.keys(AllIcons).forEach((key) => {\r\n  Icons[key as keyof typeof AllIcons] = AllIcons[key as keyof typeof AllIcons] as ComponentType<any>;\r\n});\r\n\r\n// Define the shape of each menu item\r\ninterface MenuItem {\r\n  key: string;\r\n  label: string;\r\n  icon?: React.ReactNode;\r\n  children?: MenuItem[];\r\n  type?: \"group\";\r\n}\r\n\r\n/**\r\n * Recursively parse a hierarchical list of menu items into the expected format.\r\n * @param data The raw menu data to be parsed\r\n * @returns An array of MenuItem objects\r\n */\r\nfunction parseMenuItems(data: any[]): MenuItem[] {\r\n  return data.map((item: any) => {\r\n    const menuItem: MenuItem = {\r\n      key: item.key,\r\n      label: item.label,\r\n      icon: undefined,\r\n      children: item.children ? parseMenuItems(item.children) : undefined,\r\n    };\r\n    if (item.icon) {\r\n      try {\r\n        const Icon = Icons[item.icon];\r\n        if (Icon) {\r\n          menuItem.icon = React.createElement(Icon);\r\n        }\r\n      } catch (error) {\r\n        console.warn(`Failed to create icon for \"${item.icon}\":`, error);\r\n      }\r\n    }\r\n    return menuItem;\r\n  });\r\n}\r\n\r\n/**\r\n * Get the height of the menu component, taking into account any additional height specified by the user.\r\n * @returns The total height of the menu, in pixels\r\n */\r\nfunction get_height_menu() {\r\n  var menu_array = Array.from(document.getElementsByClassName(\"ant-menu\"));\r\n  var menu_height = 0;\r\n  menu_array.forEach((element) => {\r\n    var height = (element as HTMLElement).offsetHeight;\r\n\r\n    //if height is an integer return it\r\n    if (height) {\r\n      //test integer\r\n      if (height % 1 === 0) {\r\n        menu_height = height;\r\n      }\r\n    }\r\n  });\r\n\r\n  menu_height = menu_height + 100;\r\n\r\n  return menu_height;\r\n}\r\n\r\n/**\r\n * A React component that renders an Ant Design menu based on the provided menu data.\r\n */\r\nconst MenuComponent = (props: ComponentProps) => {\r\n  const { menu_data, key, defaultSelectedKeys, defaultOpenKeys, additionalHeight, multiple } = props.args;\r\n  const [openKeys, setOpenKeys] = useState<string[]>([]);\r\n\r\n  const rootSubmenuKeys = menu_data.map((item: any) => item.key);\r\n\r\n  // Set the height of the Streamlit iframe to match the height of the menu\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight();\r\n  }, []);\r\n\r\n  const onOpenChange: MenuProps['onOpenChange'] = (keys) => {\r\n    const latestOpenKey = keys.find((key) => openKeys.indexOf(key) === -1);\r\n    if (rootSubmenuKeys.indexOf(latestOpenKey!) === -1) {\r\n      setOpenKeys(keys);\r\n      setTimeout(() => {\r\n        var height = get_height_menu()\r\n        Streamlit.setFrameHeight(height + additionalHeight);\r\n      }, 500);\r\n    } else {\r\n      Streamlit.setComponentValue(keys);\r\n      setOpenKeys(latestOpenKey ? [latestOpenKey] : []);\r\n  \r\n      setTimeout(() => {\r\n        var height = get_height_menu()\r\n        Streamlit.setFrameHeight(height + additionalHeight);\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Menu\r\n     id  = {key}\r\n      mode=\"inline\"\r\n      openKeys={openKeys}\r\n      onOpenChange={onOpenChange}\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        borderRight: 0,\r\n        overflow: \"auto\",\r\n        borderRadius: \"20px\",\r\n        backgroundColor: \"#fff\",\r\n      }}\r\n      items={parseMenuItems(menu_data)}\r\n      onClick={({ key }) => {\r\n        Streamlit.setComponentValue(key);\r\n      }}\r\n      multiple={multiple}\r\n      defaultSelectedKeys={[defaultSelectedKeys]}\r\n      defaultOpenKeys={[defaultOpenKeys]}\r\n\r\n    />\r\n  );\r\n};\r\n\r\nexport default withStreamlitConnection(MenuComponent);","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport MenuComponent from \"./AntMenu\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MenuComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}