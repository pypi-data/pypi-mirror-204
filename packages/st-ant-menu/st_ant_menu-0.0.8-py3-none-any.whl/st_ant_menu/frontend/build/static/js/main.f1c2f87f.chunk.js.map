{"version":3,"sources":["AntMenu.tsx","index.tsx"],"names":["Icons","parseMenuItems","data","iconSize","map","item","menuItem","key","label","icon","undefined","children","disabled","Icon","React","createElement","style","fontSize","error","console","warn","match","dangerouslySetInnerHTML","__html","get_height_menu","menu_array","Array","from","document","getElementsByClassName","menu_height","forEach","element","height","offsetHeight","Object","keys","AllIcons","withStreamlitConnection","props","args","menu_data","defaultSelectedKeys","defaultOpenKeys","additionalHeight","multiple","css_styling","theme","menu_click","useState","openKeys","setOpenKeys","selectedKeys","setSelectedKeys","rootSubmenuKeys","useEffect","Streamlit","setFrameHeight","parseInt","setComponentValue","id","mode","onOpenChange","latestOpenKey","find","indexOf","setTimeout","width","borderRight","overflow","borderRadius","items","onClick","log","includes","filter","k","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f1c2f87f.chunk.js","sourcesContent":["import { Menu } from \"antd\";\r\nimport { MenuProps } from \"antd/lib/menu\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport * as AllIcons from \"@ant-design/icons\";\r\nimport { ComponentType } from \"react\";\r\n\r\n\r\n\r\n\r\n// Create a mapping of all available Ant Design icons\r\nconst Icons: Record<string, ComponentType<any>> = {};\r\nObject.keys(AllIcons).forEach((key) => {\r\n  Icons[key as keyof typeof AllIcons] = AllIcons[key as keyof typeof AllIcons] as ComponentType<any>;\r\n});\r\n\r\n\r\n\r\n//Define the shape of each menu item\r\ninterface MenuItem {\r\n  key: string;\r\n  label: string;\r\n  icon?: React.ReactNode;\r\n  children?: MenuItem[];\r\n  type?: \"group\";\r\n\r\n  disabled?: boolean;\r\n}\r\n\r\n// // /**\r\n//  * Recursively parse a hierarchical list of menu items into the expected format.\r\n//  * @param data The raw menu data to be parsed\r\n//  * @returns An array of MenuItem objects\r\n//  */\r\n\r\nfunction parseMenuItems(data: any[], iconSize: string): MenuItem[] {\r\n  return data.map((item: any) => {\r\n    const menuItem: MenuItem = {\r\n      key: item.key,\r\n      label: \"\",\r\n      icon: undefined,\r\n      children: item.children ? parseMenuItems(item.children, iconSize) : undefined,\r\n      disabled: item.disabled ? true : false,\r\n    };\r\n    if (item.icon) {\r\n      try {\r\n        const Icon = Icons[item.icon];\r\n        if (Icon) {\r\n          menuItem.icon = React.createElement(Icon, {\r\n            style: { fontSize: iconSize }\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.warn(`Failed to create icon for \"${item.icon}\":`, error);\r\n      }\r\n    }\r\n    if (item.label) {\r\n      if (item.label.match(/<(.*?)>/)) {\r\n        menuItem.label = (\r\n          <span\r\n            dangerouslySetInnerHTML={{ __html: item.label }}\r\n          ></span>\r\n        ) as unknown as string;\r\n      } else {\r\n        menuItem.label = item.label as string;\r\n      }\r\n    }\r\n    return menuItem;\r\n  });\r\n}\r\n\r\n/**\r\n * Get the height of the menu component, taking into account any additional height specified by the user.\r\n * @returns The total height of the menu, in pixels\r\n */\r\nfunction get_height_menu() {\r\n  var menu_array = Array.from(document.getElementsByClassName(\"ant-menu\"));\r\n  var menu_height = 0;\r\n  menu_array.forEach((element) => {\r\n    var height = (element as HTMLElement).offsetHeight;\r\n\r\n    //if height is an integer return it\r\n    if (height) {\r\n      //test integer\r\n      if (height % 1 === 0) {\r\n        menu_height = height;\r\n      }\r\n    }\r\n  });\r\n\r\n  menu_height = menu_height + 150;\r\n\r\n  return menu_height;\r\n}\r\n\r\n/**\r\n * A React component that renders an Ant Design menu based on the provided menu data.\r\n */\r\nconst MenuComponent = (props: ComponentProps) => {\r\n  const { menu_data, key, defaultSelectedKeys, defaultOpenKeys, additionalHeight, multiple, css_styling, theme,menu_click, iconSize} = props.args;\r\n  const [openKeys, setOpenKeys] = useState<string[]>([]);\r\n  const [selectedKeys, setSelectedKeys] = useState<string[]>([]);\r\n  const rootSubmenuKeys = menu_data.map((item: any) => item.key);\r\n\r\n // Set the height of the Streamlit iframe to match the height of the menu\r\n useEffect(() => {\r\n  const height = get_height_menu() + additionalHeight;\r\n  Streamlit.setFrameHeight(parseInt(`${height}`, 10));\r\n}, []);\r\n\r\n  const onOpenChange: MenuProps['onOpenChange'] = (keys) => {\r\n    const latestOpenKey = keys.find((key) => openKeys.indexOf(key) === -1);\r\n    if (rootSubmenuKeys.indexOf(latestOpenKey!) === -1) {\r\n      setOpenKeys(keys);\r\n      setTimeout(() => {\r\n        var height = get_height_menu()\r\n        Streamlit.setFrameHeight(height + additionalHeight);\r\n      }, 300);\r\n    } else {\r\n      if (menu_click == true) {\r\n      Streamlit.setComponentValue(keys);\r\n      }\r\n      setOpenKeys(latestOpenKey ? [latestOpenKey] : []);\r\n  \r\n      setTimeout(() => {\r\n        var height = get_height_menu()\r\n        Streamlit.setFrameHeight(height + additionalHeight);\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  const onClick = ({ key }: { key: string }) => {\r\n    console.log(key);\r\n    if (multiple) {\r\n      if (selectedKeys.includes(key)) {\r\n        setSelectedKeys(selectedKeys.filter(k => k !== key));\r\n      } else {\r\n        setSelectedKeys([...selectedKeys, key]);\r\n      }\r\n    } else {\r\n      setSelectedKeys([key]);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    Streamlit.setComponentValue(selectedKeys);\r\n  }, [selectedKeys]);\r\n\r\n  return (\r\n    <Menu\r\n     id  = {key}\r\n      mode=\"inline\"\r\n      openKeys={openKeys}\r\n      onOpenChange={onOpenChange}\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        borderRight: 0,\r\n        overflow: \"auto\",\r\n        borderRadius: \"20px\",\r\n       // backgroundColor: \"#fff\",\r\n        ...css_styling\r\n      }}\r\n      theme={theme}\r\n      items={parseMenuItems(menu_data, iconSize)}\r\n          \r\n      multiple={multiple}\r\n      defaultSelectedKeys={[defaultSelectedKeys]}\r\n      defaultOpenKeys={[defaultOpenKeys]}\r\n      onClick={onClick}\r\n\r\n    />\r\n  );\r\n};\r\n\r\nexport default withStreamlitConnection(MenuComponent);","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport MenuComponent from \"./AntMenu\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MenuComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}