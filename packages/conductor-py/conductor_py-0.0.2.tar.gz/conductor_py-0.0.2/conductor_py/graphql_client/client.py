# Generated by ariadne-codegen on 2023-04-24 15:32
# Source: ./operations.graphql

from .base_client import BaseClient
from .create_integration_connection import CreateIntegrationConnection
from .get_integration_connection import GetIntegrationConnection
from .get_integration_connections import GetIntegrationConnections
from .input_types import (
    CreateIntegrationConnectionInput,
    PingIntegrationConnectionInput,
    SendIntegrationRequestInput,
)
from .ping_integration_connection import PingIntegrationConnection
from .send_integration_request import SendIntegrationRequest


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def get_integration_connection(
        self, integration_connection_id: str
    ) -> GetIntegrationConnection:
        query = gql(
            """
            query getIntegrationConnection($integrationConnectionId: ID!) {
              integrationConnection(id: $integrationConnectionId) {
                ...IntegrationConnection
              }
            }

            fragment IntegrationConnection on IntegrationConnection {
              id
              integrationKey
              endUserSourceId
              endUserEmail
              endUserCompanyName
              lastHeartbeatAt
            }
            """
        )
        variables: dict[str, object] = {
            "integrationConnectionId": integration_connection_id
        }
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetIntegrationConnection.parse_obj(data)

    def get_integration_connections(self) -> GetIntegrationConnections:
        query = gql(
            """
            query getIntegrationConnections {
              integrationConnections {
                ...IntegrationConnection
              }
            }

            fragment IntegrationConnection on IntegrationConnection {
              id
              integrationKey
              endUserSourceId
              endUserEmail
              endUserCompanyName
              lastHeartbeatAt
            }
            """
        )
        variables: dict[str, object] = {}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetIntegrationConnections.parse_obj(data)

    def create_integration_connection(
        self, input: CreateIntegrationConnectionInput
    ) -> CreateIntegrationConnection:
        query = gql(
            """
            mutation createIntegrationConnection($input: CreateIntegrationConnectionInput!) {
              createIntegrationConnection(input: $input) {
                integrationConnection {
                  ...IntegrationConnection
                }
              }
            }

            fragment IntegrationConnection on IntegrationConnection {
              id
              integrationKey
              endUserSourceId
              endUserEmail
              endUserCompanyName
              lastHeartbeatAt
            }
            """
        )
        variables: dict[str, object] = {"input": input}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CreateIntegrationConnection.parse_obj(data)

    def ping_integration_connection(
        self, input: PingIntegrationConnectionInput
    ) -> PingIntegrationConnection:
        query = gql(
            """
            mutation pingIntegrationConnection($input: PingIntegrationConnectionInput!) {
              pingIntegrationConnection(input: $input) {
                duration
              }
            }
            """
        )
        variables: dict[str, object] = {"input": input}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PingIntegrationConnection.parse_obj(data)

    def send_integration_request(
        self, input: SendIntegrationRequestInput
    ) -> SendIntegrationRequest:
        query = gql(
            """
            mutation sendIntegrationRequest($input: SendIntegrationRequestInput!) {
              sendIntegrationRequest(input: $input) {
                response
              }
            }
            """
        )
        variables: dict[str, object] = {"input": input}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return SendIntegrationRequest.parse_obj(data)
