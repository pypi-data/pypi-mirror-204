{"version":3,"sources":["RtOptionMenu.tsx","index.tsx"],"names":["MyComponent","_StreamlitComponentBa","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","render","choices","args","options","selectedChoice","state","baseElementStyle","padding","marginBottom","verticalElementStyle","_objectSpread","width","horizontalElementStyle","flex","finalContainerStyle","finalElementStyle","orientation","display","flexDirection","alignItems","justifyContent","columnGap","React","createElement","style","map","choice","index","Button","color","variant","key","onClick","handleChoiceClick","clickedChoice","setState","prevState","Streamlit","setComponentValue","undefined","default_index","_createClass","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","RtOptionMenu","document","getElementById"],"mappings":"gRAuBMA,EAAW,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GACf,SAAAA,EAAYK,GAAa,IAADC,EAAAC,YAAA,KAAAP,IACtBM,EAAAH,EAAAK,KAAA,KAAMH,IAaDI,OAAS,WAGd,IAAMC,EAAoBJ,EAAKD,MAAMM,KAAc,QAC7CC,EAA4BN,EAAKD,MAAMM,KAAc,SAAK,GAE1DE,EAAiBP,EAAKQ,MAAMD,eAgB5BE,EAAmB,CACvBC,QAAS,QACTC,aAAc,SAEVC,EAAoBC,wBAAA,GACrBJ,GAAgB,IACnBK,MAAO,SAEHC,EAAsBF,wBAAA,GACvBJ,GAAgB,IACnBO,KAAM,IAGJC,EAAsB,GACtBC,EAAoB,GAWxB,MAT4B,eAAxBZ,EAAQa,aACVF,EA/B+B,CAC/BG,QAAS,OACTC,cAAe,MACfC,WAAY,SACZC,eAAgB,eAChBC,UAAW,SA2BXN,EAAoBH,IAGpBE,EA5B6B,CAC7BG,QAAS,OACTC,cAAe,SACfE,eAAgB,eAChBD,WAAY,cAyBZJ,EAAoBN,GAIpBa,IAAAC,cAAA,OAAKC,MAAOV,GACTb,EAAQwB,KAAI,SAACC,EAAQC,GACpB,OAAOL,IAAAC,cAACK,IAAM,CAACC,MAAM,UAAUC,QAAS1B,GAAkBsB,EAAS,YAAc,WAAYK,IAAKJ,EAAOH,MAAOT,EAAmBiB,QAAS,kBAAMnC,EAAKoC,kBAAkBP,KAAUA,QAI1L7B,EAEOoC,kBAAoB,SAACC,GAC3BrC,EAAKsC,SAAS,CAAE/B,eAAgB8B,IAEhCrC,EAAKsC,UACH,SAAAC,GAAS,MAAK,CAAChC,eAAgB8B,MAC/B,kBAAMG,IAAUC,kBAAkBzC,EAAKQ,MAAMD,oBAzE/C,IAAMH,EAAoBJ,EAAKD,MAAMM,KAAc,QAE7CC,EAA2BN,EAAKD,MAAMM,KAAc,SAAK,GAM9D,YAL6BqC,IAA1BpC,EAAQqC,cACV3C,EAAKQ,MAAQ,CAAED,eAAgBH,EAAQE,EAAQqC,gBAG/C3C,EAAKQ,MAAQ,CAAED,eAAgB,IAChCP,EAEF,OAAA4C,YAAAlD,GAbc,CAASmD,KAuFXC,cAAwBpD,GC1GvCqD,IAAS5C,OACPsB,IAAAC,cAACD,IAAMuB,WAAU,KACfvB,IAAAC,cAACuB,EAAY,OAEfC,SAASC,eAAe,W","file":"static/js/main.a963dd12.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport {\n  Button\n} from \"@mui/material\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  selectedChoice: string\n}\n\ninterface ComponentOptions {\n  orientation?: string;\n  default_index?: number;\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  constructor(props: any) {\n    super(props);\n    const choices: string[] = this.props.args[\"choices\"];\n    \n    const options: ComponentOptions= this.props.args[\"options\"] || {};\n    if (options.default_index !== undefined) {\n      this.state = { selectedChoice: choices[options.default_index] };\n    }\n    else {\n      this.state = { selectedChoice: \"\"};\n    }\n\n  }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const choices: string[] = this.props.args[\"choices\"];\n    const options: ComponentOptions = this.props.args[\"options\"] || {};\n\n    const selectedChoice = this.state.selectedChoice;\n\n    const horizontalContainerStyle = {\n      display: 'flex',\n      flexDirection: 'row' as 'row',\n      alignItems: 'center',\n      justifyContent: 'space-evenly',\n      columnGap: '0.5em'\n    }\n    const verticalContainerStyle = {\n      display: 'flex',\n      flexDirection: 'column' as 'column',\n      justifyContent: 'space-evenly',\n      alignItems: 'flex-start',\n    }\n\n    const baseElementStyle = {\n      padding: '0.5em',\n      marginBottom: '0.5em'\n    }\n    const verticalElementStyle = {\n      ...baseElementStyle,\n      width: '100%',\n    }\n    const horizontalElementStyle = {\n      ...baseElementStyle,\n      flex: 1\n    }\n    \n    var finalContainerStyle = {}\n    var finalElementStyle = {}\n    // if options has a key 'orientation' and it is 'horizontal'\n    if (options.orientation === 'horizontal') {\n      finalContainerStyle = horizontalContainerStyle;\n      finalElementStyle = horizontalElementStyle;\n    }\n    else {\n      finalContainerStyle = verticalContainerStyle;\n      finalElementStyle = verticalElementStyle;\n    }\n\n    return (\n      <div style={finalContainerStyle}>\n        {choices.map((choice, index) => {\n          return <Button color=\"success\" variant={selectedChoice == choice ? 'contained' : 'outlined'} key={index} style={finalElementStyle} onClick={() => this.handleChoiceClick(choice)}>{choice}</Button>\n        })}\n      </div>\n    )\n  }\n\n  private handleChoiceClick = (clickedChoice: string): void => {\n    this.setState({ selectedChoice: clickedChoice })\n\n    this.setState(\n      prevState => ({selectedChoice: clickedChoice}),\n      () => Streamlit.setComponentValue(this.state.selectedChoice)\n    )\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport RtOptionMenu from \"./RtOptionMenu\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <RtOptionMenu />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}