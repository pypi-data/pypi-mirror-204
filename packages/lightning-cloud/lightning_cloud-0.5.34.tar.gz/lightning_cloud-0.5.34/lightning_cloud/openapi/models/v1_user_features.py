# coding: utf-8
"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set

    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_cloud.openapi.models import *


class V1UserFeatures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'b2c_experience': 'bool',
        'byoc_enabled': 'bool',
        'byom': 'bool',
        'cloudspace_fast_dataconnection': 'bool',
        'cluster_running_notification': 'bool',
        'code_tab': 'bool',
        'csv_viz_app': 'bool',
        'custom_app_domain': 'bool',
        'flows_ec2': 'bool',
        'lightweight_byoc': 'bool',
        'mount_all_project_files': 'bool',
        'mount_all_visible_data_connections': 'bool',
        'orgs': 'bool',
        'pricing_updates': 'bool',
        'private_aws_data': 'bool',
        'product_generator': 'bool',
        'project_selector': 'bool',
        'tensorboard_plugin': 'bool',
        'tired_proxy_dataconnection': 'bool',
        'tired_proxy_sync': 'bool'
    }

    attribute_map = {
        'b2c_experience': 'b2cExperience',
        'byoc_enabled': 'byocEnabled',
        'byom': 'byom',
        'cloudspace_fast_dataconnection': 'cloudspaceFastDataconnection',
        'cluster_running_notification': 'clusterRunningNotification',
        'code_tab': 'codeTab',
        'csv_viz_app': 'csvVizApp',
        'custom_app_domain': 'customAppDomain',
        'flows_ec2': 'flowsEc2',
        'lightweight_byoc': 'lightweightByoc',
        'mount_all_project_files': 'mountAllProjectFiles',
        'mount_all_visible_data_connections': 'mountAllVisibleDataConnections',
        'orgs': 'orgs',
        'pricing_updates': 'pricingUpdates',
        'private_aws_data': 'privateAwsData',
        'product_generator': 'productGenerator',
        'project_selector': 'projectSelector',
        'tensorboard_plugin': 'tensorboardPlugin',
        'tired_proxy_dataconnection': 'tiredProxyDataconnection',
        'tired_proxy_sync': 'tiredProxySync'
    }

    def __init__(self,
                 b2c_experience: 'bool' = None,
                 byoc_enabled: 'bool' = None,
                 byom: 'bool' = None,
                 cloudspace_fast_dataconnection: 'bool' = None,
                 cluster_running_notification: 'bool' = None,
                 code_tab: 'bool' = None,
                 csv_viz_app: 'bool' = None,
                 custom_app_domain: 'bool' = None,
                 flows_ec2: 'bool' = None,
                 lightweight_byoc: 'bool' = None,
                 mount_all_project_files: 'bool' = None,
                 mount_all_visible_data_connections: 'bool' = None,
                 orgs: 'bool' = None,
                 pricing_updates: 'bool' = None,
                 private_aws_data: 'bool' = None,
                 product_generator: 'bool' = None,
                 project_selector: 'bool' = None,
                 tensorboard_plugin: 'bool' = None,
                 tired_proxy_dataconnection: 'bool' = None,
                 tired_proxy_sync: 'bool' = None):  # noqa: E501
        """V1UserFeatures - a model defined in Swagger"""  # noqa: E501
        self._b2c_experience = None
        self._byoc_enabled = None
        self._byom = None
        self._cloudspace_fast_dataconnection = None
        self._cluster_running_notification = None
        self._code_tab = None
        self._csv_viz_app = None
        self._custom_app_domain = None
        self._flows_ec2 = None
        self._lightweight_byoc = None
        self._mount_all_project_files = None
        self._mount_all_visible_data_connections = None
        self._orgs = None
        self._pricing_updates = None
        self._private_aws_data = None
        self._product_generator = None
        self._project_selector = None
        self._tensorboard_plugin = None
        self._tired_proxy_dataconnection = None
        self._tired_proxy_sync = None
        self.discriminator = None
        if b2c_experience is not None:
            self.b2c_experience = b2c_experience
        if byoc_enabled is not None:
            self.byoc_enabled = byoc_enabled
        if byom is not None:
            self.byom = byom
        if cloudspace_fast_dataconnection is not None:
            self.cloudspace_fast_dataconnection = cloudspace_fast_dataconnection
        if cluster_running_notification is not None:
            self.cluster_running_notification = cluster_running_notification
        if code_tab is not None:
            self.code_tab = code_tab
        if csv_viz_app is not None:
            self.csv_viz_app = csv_viz_app
        if custom_app_domain is not None:
            self.custom_app_domain = custom_app_domain
        if flows_ec2 is not None:
            self.flows_ec2 = flows_ec2
        if lightweight_byoc is not None:
            self.lightweight_byoc = lightweight_byoc
        if mount_all_project_files is not None:
            self.mount_all_project_files = mount_all_project_files
        if mount_all_visible_data_connections is not None:
            self.mount_all_visible_data_connections = mount_all_visible_data_connections
        if orgs is not None:
            self.orgs = orgs
        if pricing_updates is not None:
            self.pricing_updates = pricing_updates
        if private_aws_data is not None:
            self.private_aws_data = private_aws_data
        if product_generator is not None:
            self.product_generator = product_generator
        if project_selector is not None:
            self.project_selector = project_selector
        if tensorboard_plugin is not None:
            self.tensorboard_plugin = tensorboard_plugin
        if tired_proxy_dataconnection is not None:
            self.tired_proxy_dataconnection = tired_proxy_dataconnection
        if tired_proxy_sync is not None:
            self.tired_proxy_sync = tired_proxy_sync

    @property
    def b2c_experience(self) -> 'bool':
        """Gets the b2c_experience of this V1UserFeatures.  # noqa: E501


        :return: The b2c_experience of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._b2c_experience

    @b2c_experience.setter
    def b2c_experience(self, b2c_experience: 'bool'):
        """Sets the b2c_experience of this V1UserFeatures.


        :param b2c_experience: The b2c_experience of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._b2c_experience = b2c_experience

    @property
    def byoc_enabled(self) -> 'bool':
        """Gets the byoc_enabled of this V1UserFeatures.  # noqa: E501


        :return: The byoc_enabled of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._byoc_enabled

    @byoc_enabled.setter
    def byoc_enabled(self, byoc_enabled: 'bool'):
        """Sets the byoc_enabled of this V1UserFeatures.


        :param byoc_enabled: The byoc_enabled of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._byoc_enabled = byoc_enabled

    @property
    def byom(self) -> 'bool':
        """Gets the byom of this V1UserFeatures.  # noqa: E501


        :return: The byom of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._byom

    @byom.setter
    def byom(self, byom: 'bool'):
        """Sets the byom of this V1UserFeatures.


        :param byom: The byom of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._byom = byom

    @property
    def cloudspace_fast_dataconnection(self) -> 'bool':
        """Gets the cloudspace_fast_dataconnection of this V1UserFeatures.  # noqa: E501


        :return: The cloudspace_fast_dataconnection of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._cloudspace_fast_dataconnection

    @cloudspace_fast_dataconnection.setter
    def cloudspace_fast_dataconnection(self,
                                       cloudspace_fast_dataconnection: 'bool'):
        """Sets the cloudspace_fast_dataconnection of this V1UserFeatures.


        :param cloudspace_fast_dataconnection: The cloudspace_fast_dataconnection of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._cloudspace_fast_dataconnection = cloudspace_fast_dataconnection

    @property
    def cluster_running_notification(self) -> 'bool':
        """Gets the cluster_running_notification of this V1UserFeatures.  # noqa: E501


        :return: The cluster_running_notification of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._cluster_running_notification

    @cluster_running_notification.setter
    def cluster_running_notification(self,
                                     cluster_running_notification: 'bool'):
        """Sets the cluster_running_notification of this V1UserFeatures.


        :param cluster_running_notification: The cluster_running_notification of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._cluster_running_notification = cluster_running_notification

    @property
    def code_tab(self) -> 'bool':
        """Gets the code_tab of this V1UserFeatures.  # noqa: E501


        :return: The code_tab of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._code_tab

    @code_tab.setter
    def code_tab(self, code_tab: 'bool'):
        """Sets the code_tab of this V1UserFeatures.


        :param code_tab: The code_tab of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._code_tab = code_tab

    @property
    def csv_viz_app(self) -> 'bool':
        """Gets the csv_viz_app of this V1UserFeatures.  # noqa: E501


        :return: The csv_viz_app of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._csv_viz_app

    @csv_viz_app.setter
    def csv_viz_app(self, csv_viz_app: 'bool'):
        """Sets the csv_viz_app of this V1UserFeatures.


        :param csv_viz_app: The csv_viz_app of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._csv_viz_app = csv_viz_app

    @property
    def custom_app_domain(self) -> 'bool':
        """Gets the custom_app_domain of this V1UserFeatures.  # noqa: E501


        :return: The custom_app_domain of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._custom_app_domain

    @custom_app_domain.setter
    def custom_app_domain(self, custom_app_domain: 'bool'):
        """Sets the custom_app_domain of this V1UserFeatures.


        :param custom_app_domain: The custom_app_domain of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._custom_app_domain = custom_app_domain

    @property
    def flows_ec2(self) -> 'bool':
        """Gets the flows_ec2 of this V1UserFeatures.  # noqa: E501


        :return: The flows_ec2 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._flows_ec2

    @flows_ec2.setter
    def flows_ec2(self, flows_ec2: 'bool'):
        """Sets the flows_ec2 of this V1UserFeatures.


        :param flows_ec2: The flows_ec2 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._flows_ec2 = flows_ec2

    @property
    def lightweight_byoc(self) -> 'bool':
        """Gets the lightweight_byoc of this V1UserFeatures.  # noqa: E501


        :return: The lightweight_byoc of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._lightweight_byoc

    @lightweight_byoc.setter
    def lightweight_byoc(self, lightweight_byoc: 'bool'):
        """Sets the lightweight_byoc of this V1UserFeatures.


        :param lightweight_byoc: The lightweight_byoc of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._lightweight_byoc = lightweight_byoc

    @property
    def mount_all_project_files(self) -> 'bool':
        """Gets the mount_all_project_files of this V1UserFeatures.  # noqa: E501


        :return: The mount_all_project_files of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._mount_all_project_files

    @mount_all_project_files.setter
    def mount_all_project_files(self, mount_all_project_files: 'bool'):
        """Sets the mount_all_project_files of this V1UserFeatures.


        :param mount_all_project_files: The mount_all_project_files of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._mount_all_project_files = mount_all_project_files

    @property
    def mount_all_visible_data_connections(self) -> 'bool':
        """Gets the mount_all_visible_data_connections of this V1UserFeatures.  # noqa: E501


        :return: The mount_all_visible_data_connections of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._mount_all_visible_data_connections

    @mount_all_visible_data_connections.setter
    def mount_all_visible_data_connections(
            self, mount_all_visible_data_connections: 'bool'):
        """Sets the mount_all_visible_data_connections of this V1UserFeatures.


        :param mount_all_visible_data_connections: The mount_all_visible_data_connections of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._mount_all_visible_data_connections = mount_all_visible_data_connections

    @property
    def orgs(self) -> 'bool':
        """Gets the orgs of this V1UserFeatures.  # noqa: E501


        :return: The orgs of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._orgs

    @orgs.setter
    def orgs(self, orgs: 'bool'):
        """Sets the orgs of this V1UserFeatures.


        :param orgs: The orgs of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._orgs = orgs

    @property
    def pricing_updates(self) -> 'bool':
        """Gets the pricing_updates of this V1UserFeatures.  # noqa: E501


        :return: The pricing_updates of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._pricing_updates

    @pricing_updates.setter
    def pricing_updates(self, pricing_updates: 'bool'):
        """Sets the pricing_updates of this V1UserFeatures.


        :param pricing_updates: The pricing_updates of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._pricing_updates = pricing_updates

    @property
    def private_aws_data(self) -> 'bool':
        """Gets the private_aws_data of this V1UserFeatures.  # noqa: E501


        :return: The private_aws_data of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._private_aws_data

    @private_aws_data.setter
    def private_aws_data(self, private_aws_data: 'bool'):
        """Sets the private_aws_data of this V1UserFeatures.


        :param private_aws_data: The private_aws_data of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._private_aws_data = private_aws_data

    @property
    def product_generator(self) -> 'bool':
        """Gets the product_generator of this V1UserFeatures.  # noqa: E501


        :return: The product_generator of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._product_generator

    @product_generator.setter
    def product_generator(self, product_generator: 'bool'):
        """Sets the product_generator of this V1UserFeatures.


        :param product_generator: The product_generator of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._product_generator = product_generator

    @property
    def project_selector(self) -> 'bool':
        """Gets the project_selector of this V1UserFeatures.  # noqa: E501


        :return: The project_selector of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._project_selector

    @project_selector.setter
    def project_selector(self, project_selector: 'bool'):
        """Sets the project_selector of this V1UserFeatures.


        :param project_selector: The project_selector of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._project_selector = project_selector

    @property
    def tensorboard_plugin(self) -> 'bool':
        """Gets the tensorboard_plugin of this V1UserFeatures.  # noqa: E501


        :return: The tensorboard_plugin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._tensorboard_plugin

    @tensorboard_plugin.setter
    def tensorboard_plugin(self, tensorboard_plugin: 'bool'):
        """Sets the tensorboard_plugin of this V1UserFeatures.


        :param tensorboard_plugin: The tensorboard_plugin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._tensorboard_plugin = tensorboard_plugin

    @property
    def tired_proxy_dataconnection(self) -> 'bool':
        """Gets the tired_proxy_dataconnection of this V1UserFeatures.  # noqa: E501


        :return: The tired_proxy_dataconnection of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._tired_proxy_dataconnection

    @tired_proxy_dataconnection.setter
    def tired_proxy_dataconnection(self, tired_proxy_dataconnection: 'bool'):
        """Sets the tired_proxy_dataconnection of this V1UserFeatures.


        :param tired_proxy_dataconnection: The tired_proxy_dataconnection of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._tired_proxy_dataconnection = tired_proxy_dataconnection

    @property
    def tired_proxy_sync(self) -> 'bool':
        """Gets the tired_proxy_sync of this V1UserFeatures.  # noqa: E501


        :return: The tired_proxy_sync of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._tired_proxy_sync

    @tired_proxy_sync.setter
    def tired_proxy_sync(self, tired_proxy_sync: 'bool'):
        """Sets the tired_proxy_sync of this V1UserFeatures.


        :param tired_proxy_sync: The tired_proxy_sync of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._tired_proxy_sync = tired_proxy_sync

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value
        if issubclass(V1UserFeatures, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1UserFeatures') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1UserFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1UserFeatures') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
