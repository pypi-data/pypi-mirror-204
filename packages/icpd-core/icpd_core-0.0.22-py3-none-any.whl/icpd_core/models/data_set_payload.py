# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataSetPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_source': 'str',
        'database': 'str',
        'description': 'str',
        'file': 'str',
        'name': 'str',
        'noun': 'str',
        'query': 'str',
        'schema': 'str',
        'table': 'str'
    }

    attribute_map = {
        'data_source': 'DataSource',
        'database': 'Database',
        'description': 'Description',
        'file': 'File',
        'name': 'Name',
        'noun': 'Noun',
        'query': 'Query',
        'schema': 'Schema',
        'table': 'Table'
    }

    def __init__(self, data_source=None, database=None, description=None, file=None, name=None, noun=None, query=None, schema=None, table=None):  # noqa: E501
        """DataSetPayload - a model defined in Swagger"""  # noqa: E501

        self._data_source = None
        self._database = None
        self._description = None
        self._file = None
        self._name = None
        self._noun = None
        self._query = None
        self._schema = None
        self._table = None
        self.discriminator = None

        if data_source is not None:
            self.data_source = data_source
        if database is not None:
            self.database = database
        if description is not None:
            self.description = description
        if file is not None:
            self.file = file
        if name is not None:
            self.name = name
        if noun is not None:
            self.noun = noun
        if query is not None:
            self.query = query
        if schema is not None:
            self.schema = schema
        if table is not None:
            self.table = table

    @property
    def data_source(self):
        """Gets the data_source of this DataSetPayload.  # noqa: E501


        :return: The data_source of this DataSetPayload.  # noqa: E501
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this DataSetPayload.


        :param data_source: The data_source of this DataSetPayload.  # noqa: E501
        :type: str
        """

        self._data_source = data_source

    @property
    def database(self):
        """Gets the database of this DataSetPayload.  # noqa: E501


        :return: The database of this DataSetPayload.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this DataSetPayload.


        :param database: The database of this DataSetPayload.  # noqa: E501
        :type: str
        """

        self._database = database

    @property
    def description(self):
        """Gets the description of this DataSetPayload.  # noqa: E501


        :return: The description of this DataSetPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataSetPayload.


        :param description: The description of this DataSetPayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def file(self):
        """Gets the file of this DataSetPayload.  # noqa: E501


        :return: The file of this DataSetPayload.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this DataSetPayload.


        :param file: The file of this DataSetPayload.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def name(self):
        """Gets the name of this DataSetPayload.  # noqa: E501


        :return: The name of this DataSetPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataSetPayload.


        :param name: The name of this DataSetPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def noun(self):
        """Gets the noun of this DataSetPayload.  # noqa: E501


        :return: The noun of this DataSetPayload.  # noqa: E501
        :rtype: str
        """
        return self._noun

    @noun.setter
    def noun(self, noun):
        """Sets the noun of this DataSetPayload.


        :param noun: The noun of this DataSetPayload.  # noqa: E501
        :type: str
        """

        self._noun = noun

    @property
    def query(self):
        """Gets the query of this DataSetPayload.  # noqa: E501


        :return: The query of this DataSetPayload.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this DataSetPayload.


        :param query: The query of this DataSetPayload.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def schema(self):
        """Gets the schema of this DataSetPayload.  # noqa: E501


        :return: The schema of this DataSetPayload.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this DataSetPayload.


        :param schema: The schema of this DataSetPayload.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def table(self):
        """Gets the table of this DataSetPayload.  # noqa: E501


        :return: The table of this DataSetPayload.  # noqa: E501
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this DataSetPayload.


        :param table: The table of this DataSetPayload.  # noqa: E501
        :type: str
        """

        self._table = table

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataSetPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSetPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
