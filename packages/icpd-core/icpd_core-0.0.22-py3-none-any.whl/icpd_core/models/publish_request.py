# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PublishRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_on_type': 'str',
        'asset_display_name': 'str',
        'asset_meta': 'PublishRequestAssetMeta',
        'asset_name': 'str',
        'assets': 'list[PublishTable]',
        'connection_url': 'str',
        'database': 'str',
        'host': 'str',
        'instance_id': 'str',
        'long_description': 'str',
        'port': 'str',
        'publish_asset_name': 'str',
        'publish_asset_type': 'str',
        'short_description': 'str',
        'ssl_certificate': 'str',
        'ssl_jdbc_url': 'str'
    }

    attribute_map = {
        'add_on_type': 'addOnType',
        'asset_display_name': 'assetDisplayName',
        'asset_meta': 'assetMeta',
        'asset_name': 'assetName',
        'assets': 'assets',
        'connection_url': 'connectionURL',
        'database': 'database',
        'host': 'host',
        'instance_id': 'instanceID',
        'long_description': 'longDescription',
        'port': 'port',
        'publish_asset_name': 'publishAssetName',
        'publish_asset_type': 'publishAssetType',
        'short_description': 'shortDescription',
        'ssl_certificate': 'ssl_certificate',
        'ssl_jdbc_url': 'ssl_jdbc_url'
    }

    def __init__(self, add_on_type=None, asset_display_name=None, asset_meta=None, asset_name=None, assets=None, connection_url=None, database=None, host=None, instance_id=None, long_description=None, port=None, publish_asset_name=None, publish_asset_type=None, short_description=None, ssl_certificate=None, ssl_jdbc_url=None):  # noqa: E501
        """PublishRequest - a model defined in Swagger"""  # noqa: E501

        self._add_on_type = None
        self._asset_display_name = None
        self._asset_meta = None
        self._asset_name = None
        self._assets = None
        self._connection_url = None
        self._database = None
        self._host = None
        self._instance_id = None
        self._long_description = None
        self._port = None
        self._publish_asset_name = None
        self._publish_asset_type = None
        self._short_description = None
        self._ssl_certificate = None
        self._ssl_jdbc_url = None
        self.discriminator = None

        if add_on_type is not None:
            self.add_on_type = add_on_type
        if asset_display_name is not None:
            self.asset_display_name = asset_display_name
        if asset_meta is not None:
            self.asset_meta = asset_meta
        if asset_name is not None:
            self.asset_name = asset_name
        if assets is not None:
            self.assets = assets
        if connection_url is not None:
            self.connection_url = connection_url
        if database is not None:
            self.database = database
        if host is not None:
            self.host = host
        if instance_id is not None:
            self.instance_id = instance_id
        if long_description is not None:
            self.long_description = long_description
        if port is not None:
            self.port = port
        if publish_asset_name is not None:
            self.publish_asset_name = publish_asset_name
        if publish_asset_type is not None:
            self.publish_asset_type = publish_asset_type
        if short_description is not None:
            self.short_description = short_description
        if ssl_certificate is not None:
            self.ssl_certificate = ssl_certificate
        if ssl_jdbc_url is not None:
            self.ssl_jdbc_url = ssl_jdbc_url

    @property
    def add_on_type(self):
        """Gets the add_on_type of this PublishRequest.  # noqa: E501


        :return: The add_on_type of this PublishRequest.  # noqa: E501
        :rtype: str
        """
        return self._add_on_type

    @add_on_type.setter
    def add_on_type(self, add_on_type):
        """Sets the add_on_type of this PublishRequest.


        :param add_on_type: The add_on_type of this PublishRequest.  # noqa: E501
        :type: str
        """

        self._add_on_type = add_on_type

    @property
    def asset_display_name(self):
        """Gets the asset_display_name of this PublishRequest.  # noqa: E501


        :return: The asset_display_name of this PublishRequest.  # noqa: E501
        :rtype: str
        """
        return self._asset_display_name

    @asset_display_name.setter
    def asset_display_name(self, asset_display_name):
        """Sets the asset_display_name of this PublishRequest.


        :param asset_display_name: The asset_display_name of this PublishRequest.  # noqa: E501
        :type: str
        """

        self._asset_display_name = asset_display_name

    @property
    def asset_meta(self):
        """Gets the asset_meta of this PublishRequest.  # noqa: E501


        :return: The asset_meta of this PublishRequest.  # noqa: E501
        :rtype: PublishRequestAssetMeta
        """
        return self._asset_meta

    @asset_meta.setter
    def asset_meta(self, asset_meta):
        """Sets the asset_meta of this PublishRequest.


        :param asset_meta: The asset_meta of this PublishRequest.  # noqa: E501
        :type: PublishRequestAssetMeta
        """

        self._asset_meta = asset_meta

    @property
    def asset_name(self):
        """Gets the asset_name of this PublishRequest.  # noqa: E501


        :return: The asset_name of this PublishRequest.  # noqa: E501
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this PublishRequest.


        :param asset_name: The asset_name of this PublishRequest.  # noqa: E501
        :type: str
        """

        self._asset_name = asset_name

    @property
    def assets(self):
        """Gets the assets of this PublishRequest.  # noqa: E501


        :return: The assets of this PublishRequest.  # noqa: E501
        :rtype: list[PublishTable]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this PublishRequest.


        :param assets: The assets of this PublishRequest.  # noqa: E501
        :type: list[PublishTable]
        """

        self._assets = assets

    @property
    def connection_url(self):
        """Gets the connection_url of this PublishRequest.  # noqa: E501


        :return: The connection_url of this PublishRequest.  # noqa: E501
        :rtype: str
        """
        return self._connection_url

    @connection_url.setter
    def connection_url(self, connection_url):
        """Sets the connection_url of this PublishRequest.


        :param connection_url: The connection_url of this PublishRequest.  # noqa: E501
        :type: str
        """

        self._connection_url = connection_url

    @property
    def database(self):
        """Gets the database of this PublishRequest.  # noqa: E501


        :return: The database of this PublishRequest.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this PublishRequest.


        :param database: The database of this PublishRequest.  # noqa: E501
        :type: str
        """

        self._database = database

    @property
    def host(self):
        """Gets the host of this PublishRequest.  # noqa: E501


        :return: The host of this PublishRequest.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this PublishRequest.


        :param host: The host of this PublishRequest.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def instance_id(self):
        """Gets the instance_id of this PublishRequest.  # noqa: E501


        :return: The instance_id of this PublishRequest.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this PublishRequest.


        :param instance_id: The instance_id of this PublishRequest.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def long_description(self):
        """Gets the long_description of this PublishRequest.  # noqa: E501


        :return: The long_description of this PublishRequest.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this PublishRequest.


        :param long_description: The long_description of this PublishRequest.  # noqa: E501
        :type: str
        """

        self._long_description = long_description

    @property
    def port(self):
        """Gets the port of this PublishRequest.  # noqa: E501


        :return: The port of this PublishRequest.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this PublishRequest.


        :param port: The port of this PublishRequest.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def publish_asset_name(self):
        """Gets the publish_asset_name of this PublishRequest.  # noqa: E501


        :return: The publish_asset_name of this PublishRequest.  # noqa: E501
        :rtype: str
        """
        return self._publish_asset_name

    @publish_asset_name.setter
    def publish_asset_name(self, publish_asset_name):
        """Sets the publish_asset_name of this PublishRequest.


        :param publish_asset_name: The publish_asset_name of this PublishRequest.  # noqa: E501
        :type: str
        """

        self._publish_asset_name = publish_asset_name

    @property
    def publish_asset_type(self):
        """Gets the publish_asset_type of this PublishRequest.  # noqa: E501


        :return: The publish_asset_type of this PublishRequest.  # noqa: E501
        :rtype: str
        """
        return self._publish_asset_type

    @publish_asset_type.setter
    def publish_asset_type(self, publish_asset_type):
        """Sets the publish_asset_type of this PublishRequest.


        :param publish_asset_type: The publish_asset_type of this PublishRequest.  # noqa: E501
        :type: str
        """

        self._publish_asset_type = publish_asset_type

    @property
    def short_description(self):
        """Gets the short_description of this PublishRequest.  # noqa: E501


        :return: The short_description of this PublishRequest.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this PublishRequest.


        :param short_description: The short_description of this PublishRequest.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def ssl_certificate(self):
        """Gets the ssl_certificate of this PublishRequest.  # noqa: E501


        :return: The ssl_certificate of this PublishRequest.  # noqa: E501
        :rtype: str
        """
        return self._ssl_certificate

    @ssl_certificate.setter
    def ssl_certificate(self, ssl_certificate):
        """Sets the ssl_certificate of this PublishRequest.


        :param ssl_certificate: The ssl_certificate of this PublishRequest.  # noqa: E501
        :type: str
        """

        self._ssl_certificate = ssl_certificate

    @property
    def ssl_jdbc_url(self):
        """Gets the ssl_jdbc_url of this PublishRequest.  # noqa: E501


        :return: The ssl_jdbc_url of this PublishRequest.  # noqa: E501
        :rtype: str
        """
        return self._ssl_jdbc_url

    @ssl_jdbc_url.setter
    def ssl_jdbc_url(self, ssl_jdbc_url):
        """Sets the ssl_jdbc_url of this PublishRequest.


        :param ssl_jdbc_url: The ssl_jdbc_url of this PublishRequest.  # noqa: E501
        :type: str
        """

        self._ssl_jdbc_url = ssl_jdbc_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublishRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublishRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
