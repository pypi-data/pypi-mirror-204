# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeployApplicationInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'edge_application_id': 'str',
        'edge_systems': 'EdgeSystems',
        'metadata': 'object'
    }

    attribute_map = {
        'edge_application_id': 'edge_application_id',
        'edge_systems': 'edge_systems',
        'metadata': 'metadata'
    }

    def __init__(self, edge_application_id=None, edge_systems=None, metadata=None):  # noqa: E501
        """DeployApplicationInstance - a model defined in Swagger"""  # noqa: E501

        self._edge_application_id = None
        self._edge_systems = None
        self._metadata = None
        self.discriminator = None

        self.edge_application_id = edge_application_id
        self.edge_systems = edge_systems
        if metadata is not None:
            self.metadata = metadata

    @property
    def edge_application_id(self):
        """Gets the edge_application_id of this DeployApplicationInstance.  # noqa: E501

        this is the id of the edge application, this id will be a composite key of application key and application version e.g: image_classifier/v1  # noqa: E501

        :return: The edge_application_id of this DeployApplicationInstance.  # noqa: E501
        :rtype: str
        """
        return self._edge_application_id

    @edge_application_id.setter
    def edge_application_id(self, edge_application_id):
        """Sets the edge_application_id of this DeployApplicationInstance.

        this is the id of the edge application, this id will be a composite key of application key and application version e.g: image_classifier/v1  # noqa: E501

        :param edge_application_id: The edge_application_id of this DeployApplicationInstance.  # noqa: E501
        :type: str
        """
        if edge_application_id is None:
            raise ValueError("Invalid value for `edge_application_id`, must not be `None`")  # noqa: E501

        self._edge_application_id = edge_application_id

    @property
    def edge_systems(self):
        """Gets the edge_systems of this DeployApplicationInstance.  # noqa: E501


        :return: The edge_systems of this DeployApplicationInstance.  # noqa: E501
        :rtype: EdgeSystems
        """
        return self._edge_systems

    @edge_systems.setter
    def edge_systems(self, edge_systems):
        """Sets the edge_systems of this DeployApplicationInstance.


        :param edge_systems: The edge_systems of this DeployApplicationInstance.  # noqa: E501
        :type: EdgeSystems
        """
        if edge_systems is None:
            raise ValueError("Invalid value for `edge_systems`, must not be `None`")  # noqa: E501

        self._edge_systems = edge_systems

    @property
    def metadata(self):
        """Gets the metadata of this DeployApplicationInstance.  # noqa: E501


        :return: The metadata of this DeployApplicationInstance.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DeployApplicationInstance.


        :param metadata: The metadata of this DeployApplicationInstance.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeployApplicationInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeployApplicationInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
