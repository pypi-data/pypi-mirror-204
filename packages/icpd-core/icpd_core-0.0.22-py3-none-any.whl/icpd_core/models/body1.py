# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extensions': 'InternalExtensionsExtensionObjects',
        'source_id': 'str'
    }

    attribute_map = {
        'extensions': 'extensions',
        'source_id': 'source_id'
    }

    def __init__(self, extensions=None, source_id=None):  # noqa: E501
        """Body1 - a model defined in Swagger"""  # noqa: E501

        self._extensions = None
        self._source_id = None
        self.discriminator = None

        self.extensions = extensions
        self.source_id = source_id

    @property
    def extensions(self):
        """Gets the extensions of this Body1.  # noqa: E501


        :return: The extensions of this Body1.  # noqa: E501
        :rtype: InternalExtensionsExtensionObjects
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this Body1.


        :param extensions: The extensions of this Body1.  # noqa: E501
        :type: InternalExtensionsExtensionObjects
        """
        if extensions is None:
            raise ValueError("Invalid value for `extensions`, must not be `None`")  # noqa: E501

        self._extensions = extensions

    @property
    def source_id(self):
        """Gets the source_id of this Body1.  # noqa: E501

        ID of the entity introducing the extensions. It is highly recommended to use the CR name (or '<CR name>_<extension_point_id>' if you'd like to group by extension point they belong to).  # noqa: E501

        :return: The source_id of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Body1.

        ID of the entity introducing the extensions. It is highly recommended to use the CR name (or '<CR name>_<extension_point_id>' if you'd like to group by extension point they belong to).  # noqa: E501

        :param source_id: The source_id of this Body1.  # noqa: E501
        :type: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")  # noqa: E501

        self._source_id = source_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
