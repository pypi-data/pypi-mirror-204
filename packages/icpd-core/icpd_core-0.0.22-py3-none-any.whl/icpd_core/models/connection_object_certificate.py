# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConnectionObjectCertificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'str',
        'server_host_name': 'str',
        'use_ssl': 'bool',
        'value': 'str',
        'verify': 'bool'
    }

    attribute_map = {
        'file_name': 'fileName',
        'server_host_name': 'serverHostName',
        'use_ssl': 'useSSL',
        'value': 'value',
        'verify': 'verify'
    }

    def __init__(self, file_name='cert', server_host_name=None, use_ssl=False, value=None, verify=False):  # noqa: E501
        """ConnectionObjectCertificate - a model defined in Swagger"""  # noqa: E501

        self._file_name = None
        self._server_host_name = None
        self._use_ssl = None
        self._value = None
        self._verify = None
        self.discriminator = None

        if file_name is not None:
            self.file_name = file_name
        if server_host_name is not None:
            self.server_host_name = server_host_name
        if use_ssl is not None:
            self.use_ssl = use_ssl
        if value is not None:
            self.value = value
        if verify is not None:
            self.verify = verify

    @property
    def file_name(self):
        """Gets the file_name of this ConnectionObjectCertificate.  # noqa: E501


        :return: The file_name of this ConnectionObjectCertificate.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this ConnectionObjectCertificate.


        :param file_name: The file_name of this ConnectionObjectCertificate.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def server_host_name(self):
        """Gets the server_host_name of this ConnectionObjectCertificate.  # noqa: E501


        :return: The server_host_name of this ConnectionObjectCertificate.  # noqa: E501
        :rtype: str
        """
        return self._server_host_name

    @server_host_name.setter
    def server_host_name(self, server_host_name):
        """Sets the server_host_name of this ConnectionObjectCertificate.


        :param server_host_name: The server_host_name of this ConnectionObjectCertificate.  # noqa: E501
        :type: str
        """

        self._server_host_name = server_host_name

    @property
    def use_ssl(self):
        """Gets the use_ssl of this ConnectionObjectCertificate.  # noqa: E501


        :return: The use_ssl of this ConnectionObjectCertificate.  # noqa: E501
        :rtype: bool
        """
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, use_ssl):
        """Sets the use_ssl of this ConnectionObjectCertificate.


        :param use_ssl: The use_ssl of this ConnectionObjectCertificate.  # noqa: E501
        :type: bool
        """

        self._use_ssl = use_ssl

    @property
    def value(self):
        """Gets the value of this ConnectionObjectCertificate.  # noqa: E501


        :return: The value of this ConnectionObjectCertificate.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ConnectionObjectCertificate.


        :param value: The value of this ConnectionObjectCertificate.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def verify(self):
        """Gets the verify of this ConnectionObjectCertificate.  # noqa: E501


        :return: The verify of this ConnectionObjectCertificate.  # noqa: E501
        :rtype: bool
        """
        return self._verify

    @verify.setter
    def verify(self, verify):
        """Sets the verify of this ConnectionObjectCertificate.


        :param verify: The verify of this ConnectionObjectCertificate.  # noqa: E501
        :type: bool
        """

        self._verify = verify

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectionObjectCertificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionObjectCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
