# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InternalExtensionsExtensionPointObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'details': 'object',
        'display_name': 'str',
        'edit_allowed': 'bool',
        'editable_by': 'str',
        'handlers': 'InternalExtensionsExtensionPointObjectHandlers',
        'id': 'str',
        'insert_allowed': 'bool',
        'insertable_by': 'str',
        'meta': 'object',
        'status': 'str'
    }

    attribute_map = {
        'description': 'description',
        'details': 'details',
        'display_name': 'display_name',
        'edit_allowed': 'edit_allowed',
        'editable_by': 'editable_by',
        'handlers': 'handlers',
        'id': 'id',
        'insert_allowed': 'insert_allowed',
        'insertable_by': 'insertable_by',
        'meta': 'meta',
        'status': 'status'
    }

    def __init__(self, description=None, details=None, display_name=None, edit_allowed=None, editable_by=None, handlers=None, id=None, insert_allowed=None, insertable_by=None, meta=None, status=None):  # noqa: E501
        """InternalExtensionsExtensionPointObject - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._details = None
        self._display_name = None
        self._edit_allowed = None
        self._editable_by = None
        self._handlers = None
        self._id = None
        self._insert_allowed = None
        self._insertable_by = None
        self._meta = None
        self._status = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if details is not None:
            self.details = details
        if display_name is not None:
            self.display_name = display_name
        if edit_allowed is not None:
            self.edit_allowed = edit_allowed
        if editable_by is not None:
            self.editable_by = editable_by
        if handlers is not None:
            self.handlers = handlers
        self.id = id
        if insert_allowed is not None:
            self.insert_allowed = insert_allowed
        if insertable_by is not None:
            self.insertable_by = insertable_by
        if meta is not None:
            self.meta = meta
        if status is not None:
            self.status = status

    @property
    def description(self):
        """Gets the description of this InternalExtensionsExtensionPointObject.  # noqa: E501

        short description about the extension point  # noqa: E501

        :return: The description of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InternalExtensionsExtensionPointObject.

        short description about the extension point  # noqa: E501

        :param description: The description of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def details(self):
        """Gets the details of this InternalExtensionsExtensionPointObject.  # noqa: E501

        This is a free form json which is used to declare a schema an extension must adhere to.  # noqa: E501

        :return: The details of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this InternalExtensionsExtensionPointObject.

        This is a free form json which is used to declare a schema an extension must adhere to.  # noqa: E501

        :param details: The details of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :type: object
        """

        self._details = details

    @property
    def display_name(self):
        """Gets the display_name of this InternalExtensionsExtensionPointObject.  # noqa: E501

        name to be displayed for the extension point  # noqa: E501

        :return: The display_name of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InternalExtensionsExtensionPointObject.

        name to be displayed for the extension point  # noqa: E501

        :param display_name: The display_name of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def edit_allowed(self):
        """Gets the edit_allowed of this InternalExtensionsExtensionPointObject.  # noqa: E501

        Whether the extension is editable via API. If this is set to true it signifies that the extensions defined for this extension point are allowed to be edited via the API by an end user (as opposed to via ConfigMap or internal API as do services)  # noqa: E501

        :return: The edit_allowed of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :rtype: bool
        """
        return self._edit_allowed

    @edit_allowed.setter
    def edit_allowed(self, edit_allowed):
        """Sets the edit_allowed of this InternalExtensionsExtensionPointObject.

        Whether the extension is editable via API. If this is set to true it signifies that the extensions defined for this extension point are allowed to be edited via the API by an end user (as opposed to via ConfigMap or internal API as do services)  # noqa: E501

        :param edit_allowed: The edit_allowed of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :type: bool
        """

        self._edit_allowed = edit_allowed

    @property
    def editable_by(self):
        """Gets the editable_by of this InternalExtensionsExtensionPointObject.  # noqa: E501

        Comma separated list of platform permissions. A user with any permission listed can edit the properties of an extension of this type. If this is not specified and edit_allowed is set to true, then any user can edit an extension of this type.  # noqa: E501

        :return: The editable_by of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :rtype: str
        """
        return self._editable_by

    @editable_by.setter
    def editable_by(self, editable_by):
        """Sets the editable_by of this InternalExtensionsExtensionPointObject.

        Comma separated list of platform permissions. A user with any permission listed can edit the properties of an extension of this type. If this is not specified and edit_allowed is set to true, then any user can edit an extension of this type.  # noqa: E501

        :param editable_by: The editable_by of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :type: str
        """

        self._editable_by = editable_by

    @property
    def handlers(self):
        """Gets the handlers of this InternalExtensionsExtensionPointObject.  # noqa: E501


        :return: The handlers of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :rtype: InternalExtensionsExtensionPointObjectHandlers
        """
        return self._handlers

    @handlers.setter
    def handlers(self, handlers):
        """Sets the handlers of this InternalExtensionsExtensionPointObject.


        :param handlers: The handlers of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :type: InternalExtensionsExtensionPointObjectHandlers
        """

        self._handlers = handlers

    @property
    def id(self):
        """Gets the id of this InternalExtensionsExtensionPointObject.  # noqa: E501

        This uniquely identifies the extension point and is used by extensions to associate themselves to an extension point.  # noqa: E501

        :return: The id of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InternalExtensionsExtensionPointObject.

        This uniquely identifies the extension point and is used by extensions to associate themselves to an extension point.  # noqa: E501

        :param id: The id of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def insert_allowed(self):
        """Gets the insert_allowed of this InternalExtensionsExtensionPointObject.  # noqa: E501

        Whether an end user can insert an extension via API. If this is set to false it means that an end-user cannot introduce a new extension using an API, but an add-on can create an extension via a ConfigMap or internal APO. If this is set to true it signifies that an end-user of an appropriate privilege can introduce new extensions of this type.  # noqa: E501

        :return: The insert_allowed of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :rtype: bool
        """
        return self._insert_allowed

    @insert_allowed.setter
    def insert_allowed(self, insert_allowed):
        """Sets the insert_allowed of this InternalExtensionsExtensionPointObject.

        Whether an end user can insert an extension via API. If this is set to false it means that an end-user cannot introduce a new extension using an API, but an add-on can create an extension via a ConfigMap or internal APO. If this is set to true it signifies that an end-user of an appropriate privilege can introduce new extensions of this type.  # noqa: E501

        :param insert_allowed: The insert_allowed of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :type: bool
        """

        self._insert_allowed = insert_allowed

    @property
    def insertable_by(self):
        """Gets the insertable_by of this InternalExtensionsExtensionPointObject.  # noqa: E501

        Comma separated list of platform permissions. A user with any permission listed is allowed to insert a new extension of this extension point. Only exercised if insert_allowed is set to true. If this is not specified and insert_allowed is set to true, then any user can insert an extension of this type.  # noqa: E501

        :return: The insertable_by of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :rtype: str
        """
        return self._insertable_by

    @insertable_by.setter
    def insertable_by(self, insertable_by):
        """Sets the insertable_by of this InternalExtensionsExtensionPointObject.

        Comma separated list of platform permissions. A user with any permission listed is allowed to insert a new extension of this extension point. Only exercised if insert_allowed is set to true. If this is not specified and insert_allowed is set to true, then any user can insert an extension of this type.  # noqa: E501

        :param insertable_by: The insertable_by of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :type: str
        """

        self._insertable_by = insertable_by

    @property
    def meta(self):
        """Gets the meta of this InternalExtensionsExtensionPointObject.  # noqa: E501

        free form json meant for internal use by the platform  # noqa: E501

        :return: The meta of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this InternalExtensionsExtensionPointObject.

        free form json meant for internal use by the platform  # noqa: E501

        :param meta: The meta of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :type: object
        """

        self._meta = meta

    @property
    def status(self):
        """Gets the status of this InternalExtensionsExtensionPointObject.  # noqa: E501

        Whether the extension_point is enabled or disabled. This could be used by an administrator to disable certain extension_points via an API in the future  # noqa: E501

        :return: The status of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InternalExtensionsExtensionPointObject.

        Whether the extension_point is enabled or disabled. This could be used by an administrator to disable certain extension_points via an API in the future  # noqa: E501

        :param status: The status of this InternalExtensionsExtensionPointObject.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InternalExtensionsExtensionPointObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InternalExtensionsExtensionPointObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
