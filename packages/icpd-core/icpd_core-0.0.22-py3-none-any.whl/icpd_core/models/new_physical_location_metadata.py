# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewPhysicalLocationMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_key': 'str',
        'cluster_name': 'str',
        'dataplane_management_ns': 'str',
        'dataplane_workload_ns': 'str',
        'details': 'object'
    }

    attribute_map = {
        'auth_key': 'auth_key',
        'cluster_name': 'cluster_name',
        'dataplane_management_ns': 'dataplane_management_ns',
        'dataplane_workload_ns': 'dataplane_workload_ns',
        'details': 'details'
    }

    def __init__(self, auth_key=None, cluster_name=None, dataplane_management_ns=None, dataplane_workload_ns=None, details=None):  # noqa: E501
        """NewPhysicalLocationMetadata - a model defined in Swagger"""  # noqa: E501

        self._auth_key = None
        self._cluster_name = None
        self._dataplane_management_ns = None
        self._dataplane_workload_ns = None
        self._details = None
        self.discriminator = None

        if auth_key is not None:
            self.auth_key = auth_key
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if dataplane_management_ns is not None:
            self.dataplane_management_ns = dataplane_management_ns
        if dataplane_workload_ns is not None:
            self.dataplane_workload_ns = dataplane_workload_ns
        if details is not None:
            self.details = details

    @property
    def auth_key(self):
        """Gets the auth_key of this NewPhysicalLocationMetadata.  # noqa: E501

        auth key  # noqa: E501

        :return: The auth_key of this NewPhysicalLocationMetadata.  # noqa: E501
        :rtype: str
        """
        return self._auth_key

    @auth_key.setter
    def auth_key(self, auth_key):
        """Sets the auth_key of this NewPhysicalLocationMetadata.

        auth key  # noqa: E501

        :param auth_key: The auth_key of this NewPhysicalLocationMetadata.  # noqa: E501
        :type: str
        """

        self._auth_key = auth_key

    @property
    def cluster_name(self):
        """Gets the cluster_name of this NewPhysicalLocationMetadata.  # noqa: E501

        cluster name  # noqa: E501

        :return: The cluster_name of this NewPhysicalLocationMetadata.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this NewPhysicalLocationMetadata.

        cluster name  # noqa: E501

        :param cluster_name: The cluster_name of this NewPhysicalLocationMetadata.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def dataplane_management_ns(self):
        """Gets the dataplane_management_ns of this NewPhysicalLocationMetadata.  # noqa: E501

        dataplane management namespace  # noqa: E501

        :return: The dataplane_management_ns of this NewPhysicalLocationMetadata.  # noqa: E501
        :rtype: str
        """
        return self._dataplane_management_ns

    @dataplane_management_ns.setter
    def dataplane_management_ns(self, dataplane_management_ns):
        """Sets the dataplane_management_ns of this NewPhysicalLocationMetadata.

        dataplane management namespace  # noqa: E501

        :param dataplane_management_ns: The dataplane_management_ns of this NewPhysicalLocationMetadata.  # noqa: E501
        :type: str
        """

        self._dataplane_management_ns = dataplane_management_ns

    @property
    def dataplane_workload_ns(self):
        """Gets the dataplane_workload_ns of this NewPhysicalLocationMetadata.  # noqa: E501

        dataplane workload namespace  # noqa: E501

        :return: The dataplane_workload_ns of this NewPhysicalLocationMetadata.  # noqa: E501
        :rtype: str
        """
        return self._dataplane_workload_ns

    @dataplane_workload_ns.setter
    def dataplane_workload_ns(self, dataplane_workload_ns):
        """Sets the dataplane_workload_ns of this NewPhysicalLocationMetadata.

        dataplane workload namespace  # noqa: E501

        :param dataplane_workload_ns: The dataplane_workload_ns of this NewPhysicalLocationMetadata.  # noqa: E501
        :type: str
        """

        self._dataplane_workload_ns = dataplane_workload_ns

    @property
    def details(self):
        """Gets the details of this NewPhysicalLocationMetadata.  # noqa: E501

        details  # noqa: E501

        :return: The details of this NewPhysicalLocationMetadata.  # noqa: E501
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this NewPhysicalLocationMetadata.

        details  # noqa: E501

        :param details: The details of this NewPhysicalLocationMetadata.  # noqa: E501
        :type: object
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewPhysicalLocationMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewPhysicalLocationMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
