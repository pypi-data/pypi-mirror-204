# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Deployment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addon_type': 'str',
        'addon_version': 'str',
        'description': 'str',
        'id': 'str',
        'metadata': 'object'
    }

    attribute_map = {
        'addon_type': 'addon_type',
        'addon_version': 'addon_version',
        'description': 'description',
        'id': 'id',
        'metadata': 'metadata'
    }

    def __init__(self, addon_type=None, addon_version=None, description=None, id=None, metadata=None):  # noqa: E501
        """Deployment - a model defined in Swagger"""  # noqa: E501

        self._addon_type = None
        self._addon_version = None
        self._description = None
        self._id = None
        self._metadata = None
        self.discriminator = None

        if addon_type is not None:
            self.addon_type = addon_type
        if addon_version is not None:
            self.addon_version = addon_version
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if metadata is not None:
            self.metadata = metadata

    @property
    def addon_type(self):
        """Gets the addon_type of this Deployment.  # noqa: E501

        Type of the add-on  # noqa: E501

        :return: The addon_type of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._addon_type

    @addon_type.setter
    def addon_type(self, addon_type):
        """Sets the addon_type of this Deployment.

        Type of the add-on  # noqa: E501

        :param addon_type: The addon_type of this Deployment.  # noqa: E501
        :type: str
        """

        self._addon_type = addon_type

    @property
    def addon_version(self):
        """Gets the addon_version of this Deployment.  # noqa: E501

        Version of the add-on  # noqa: E501

        :return: The addon_version of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._addon_version

    @addon_version.setter
    def addon_version(self, addon_version):
        """Sets the addon_version of this Deployment.

        Version of the add-on  # noqa: E501

        :param addon_version: The addon_version of this Deployment.  # noqa: E501
        :type: str
        """

        self._addon_version = addon_version

    @property
    def description(self):
        """Gets the description of this Deployment.  # noqa: E501

        Description of deployment  # noqa: E501

        :return: The description of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Deployment.

        Description of deployment  # noqa: E501

        :param description: The description of this Deployment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Deployment.  # noqa: E501

        ID of the add-on deployment  # noqa: E501

        :return: The id of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Deployment.

        ID of the add-on deployment  # noqa: E501

        :param id: The id of this Deployment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this Deployment.  # noqa: E501

        Free-form field which includes additional information about deployment  # noqa: E501

        :return: The metadata of this Deployment.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Deployment.

        Free-form field which includes additional information about deployment  # noqa: E501

        :param metadata: The metadata of this Deployment.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Deployment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Deployment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
