# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_creation_date': 'str',
        'job_id': 'str',
        'job_name': 'str',
        'job_status': 'str',
        'job_submitted_by': 'str',
        'job_type': 'str',
        'payload_obj': 'object',
        'project_id': 'str',
        'project_name': 'str',
        'service_instance_id': 'str',
        'service_instance_type': 'str'
    }

    attribute_map = {
        'job_creation_date': 'job_creation_date',
        'job_id': 'job_id',
        'job_name': 'job_name',
        'job_status': 'job_status',
        'job_submitted_by': 'job_submitted_by',
        'job_type': 'job_type',
        'payload_obj': 'payload_obj',
        'project_id': 'project_id',
        'project_name': 'project_name',
        'service_instance_id': 'service_instance_id',
        'service_instance_type': 'service_instance_type'
    }

    def __init__(self, job_creation_date=None, job_id=None, job_name=None, job_status=None, job_submitted_by=None, job_type=None, payload_obj=None, project_id=None, project_name=None, service_instance_id=None, service_instance_type=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501

        self._job_creation_date = None
        self._job_id = None
        self._job_name = None
        self._job_status = None
        self._job_submitted_by = None
        self._job_type = None
        self._payload_obj = None
        self._project_id = None
        self._project_name = None
        self._service_instance_id = None
        self._service_instance_type = None
        self.discriminator = None

        if job_creation_date is not None:
            self.job_creation_date = job_creation_date
        if job_id is not None:
            self.job_id = job_id
        if job_name is not None:
            self.job_name = job_name
        if job_status is not None:
            self.job_status = job_status
        if job_submitted_by is not None:
            self.job_submitted_by = job_submitted_by
        if job_type is not None:
            self.job_type = job_type
        if payload_obj is not None:
            self.payload_obj = payload_obj
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if service_instance_id is not None:
            self.service_instance_id = service_instance_id
        if service_instance_type is not None:
            self.service_instance_type = service_instance_type

    @property
    def job_creation_date(self):
        """Gets the job_creation_date of this Job.  # noqa: E501

        Creation Date of the job  # noqa: E501

        :return: The job_creation_date of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_creation_date

    @job_creation_date.setter
    def job_creation_date(self, job_creation_date):
        """Sets the job_creation_date of this Job.

        Creation Date of the job  # noqa: E501

        :param job_creation_date: The job_creation_date of this Job.  # noqa: E501
        :type: str
        """

        self._job_creation_date = job_creation_date

    @property
    def job_id(self):
        """Gets the job_id of this Job.  # noqa: E501

        ID of the job  # noqa: E501

        :return: The job_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this Job.

        ID of the job  # noqa: E501

        :param job_id: The job_id of this Job.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def job_name(self):
        """Gets the job_name of this Job.  # noqa: E501

        Name of the job  # noqa: E501

        :return: The job_name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this Job.

        Name of the job  # noqa: E501

        :param job_name: The job_name of this Job.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def job_status(self):
        """Gets the job_status of this Job.  # noqa: E501

        status of the job  # noqa: E501

        :return: The job_status of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this Job.

        status of the job  # noqa: E501

        :param job_status: The job_status of this Job.  # noqa: E501
        :type: str
        """

        self._job_status = job_status

    @property
    def job_submitted_by(self):
        """Gets the job_submitted_by of this Job.  # noqa: E501

        Username of person who submitted the job  # noqa: E501

        :return: The job_submitted_by of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_submitted_by

    @job_submitted_by.setter
    def job_submitted_by(self, job_submitted_by):
        """Sets the job_submitted_by of this Job.

        Username of person who submitted the job  # noqa: E501

        :param job_submitted_by: The job_submitted_by of this Job.  # noqa: E501
        :type: str
        """

        self._job_submitted_by = job_submitted_by

    @property
    def job_type(self):
        """Gets the job_type of this Job.  # noqa: E501

        Type of the job  # noqa: E501

        :return: The job_type of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this Job.

        Type of the job  # noqa: E501

        :param job_type: The job_type of this Job.  # noqa: E501
        :type: str
        """

        self._job_type = job_type

    @property
    def payload_obj(self):
        """Gets the payload_obj of this Job.  # noqa: E501

        free-form metadata object that can contain information about the job  # noqa: E501

        :return: The payload_obj of this Job.  # noqa: E501
        :rtype: object
        """
        return self._payload_obj

    @payload_obj.setter
    def payload_obj(self, payload_obj):
        """Sets the payload_obj of this Job.

        free-form metadata object that can contain information about the job  # noqa: E501

        :param payload_obj: The payload_obj of this Job.  # noqa: E501
        :type: object
        """

        self._payload_obj = payload_obj

    @property
    def project_id(self):
        """Gets the project_id of this Job.  # noqa: E501

        id of the watson studio project from which the job was kicked off  # noqa: E501

        :return: The project_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Job.

        id of the watson studio project from which the job was kicked off  # noqa: E501

        :param project_id: The project_id of this Job.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this Job.  # noqa: E501

        name of the Watson studio project from which the job was kicked off  # noqa: E501

        :return: The project_name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this Job.

        name of the Watson studio project from which the job was kicked off  # noqa: E501

        :param project_name: The project_name of this Job.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def service_instance_id(self):
        """Gets the service_instance_id of this Job.  # noqa: E501

        Service instance ID  # noqa: E501

        :return: The service_instance_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_id

    @service_instance_id.setter
    def service_instance_id(self, service_instance_id):
        """Sets the service_instance_id of this Job.

        Service instance ID  # noqa: E501

        :param service_instance_id: The service_instance_id of this Job.  # noqa: E501
        :type: str
        """

        self._service_instance_id = service_instance_id

    @property
    def service_instance_type(self):
        """Gets the service_instance_type of this Job.  # noqa: E501

        name of the addon where this job is being run  # noqa: E501

        :return: The service_instance_type of this Job.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_type

    @service_instance_type.setter
    def service_instance_type(self, service_instance_type):
        """Sets the service_instance_type of this Job.

        name of the addon where this job is being run  # noqa: E501

        :param service_instance_type: The service_instance_type of this Job.  # noqa: E501
        :type: str
        """

        self._service_instance_type = service_instance_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
