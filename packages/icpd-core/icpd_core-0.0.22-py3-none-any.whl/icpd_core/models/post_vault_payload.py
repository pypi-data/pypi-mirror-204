# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PostVaultPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'details': 'object',
        'type': 'str',
        'vault_name': 'str'
    }

    attribute_map = {
        'description': 'description',
        'details': 'details',
        'type': 'type',
        'vault_name': 'vault_name'
    }

    def __init__(self, description=None, details=None, type=None, vault_name=None):  # noqa: E501
        """PostVaultPayload - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._details = None
        self._type = None
        self._vault_name = None
        self.discriminator = None

        if description is not None:
            self.description = description
        self.details = details
        self.type = type
        self.vault_name = vault_name

    @property
    def description(self):
        """Gets the description of this PostVaultPayload.  # noqa: E501

        short description about the vault being configured for the user  # noqa: E501

        :return: The description of this PostVaultPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostVaultPayload.

        short description about the vault being configured for the user  # noqa: E501

        :param description: The description of this PostVaultPayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def details(self):
        """Gets the details of this PostVaultPayload.  # noqa: E501

        free-form object containing all connection information for the external vault  # noqa: E501

        :return: The details of this PostVaultPayload.  # noqa: E501
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PostVaultPayload.

        free-form object containing all connection information for the external vault  # noqa: E501

        :param details: The details of this PostVaultPayload.  # noqa: E501
        :type: object
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details

    @property
    def type(self):
        """Gets the type of this PostVaultPayload.  # noqa: E501

        type of external vault  # noqa: E501

        :return: The type of this PostVaultPayload.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PostVaultPayload.

        type of external vault  # noqa: E501

        :param type: The type of this PostVaultPayload.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def vault_name(self):
        """Gets the vault_name of this PostVaultPayload.  # noqa: E501

        unique identifier of the vault for user  # noqa: E501

        :return: The vault_name of this PostVaultPayload.  # noqa: E501
        :rtype: str
        """
        return self._vault_name

    @vault_name.setter
    def vault_name(self, vault_name):
        """Sets the vault_name of this PostVaultPayload.

        unique identifier of the vault for user  # noqa: E501

        :param vault_name: The vault_name of this PostVaultPayload.  # noqa: E501
        :type: str
        """
        if vault_name is None:
            raise ValueError("Invalid value for `vault_name`, must not be `None`")  # noqa: E501

        self._vault_name = vault_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostVaultPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostVaultPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
