# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetReservedParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'docker_registry_prefix': 'str',
        'zen_cloud_pak_instance_id': 'str',
        'zen_control_plane_namespace': 'str',
        'zen_service_instance_display_name': 'str',
        'zen_service_instance_id': 'str',
        'zen_service_instance_type': 'str'
    }

    attribute_map = {
        'docker_registry_prefix': 'docker_registry_prefix',
        'zen_cloud_pak_instance_id': 'zen_cloud_pak_instance_id',
        'zen_control_plane_namespace': 'zen_control_plane_namespace',
        'zen_service_instance_display_name': 'zen_service_instance_display_name',
        'zen_service_instance_id': 'zen_service_instance_id',
        'zen_service_instance_type': 'zen_service_instance_type'
    }

    def __init__(self, docker_registry_prefix=None, zen_cloud_pak_instance_id=None, zen_control_plane_namespace=None, zen_service_instance_display_name=None, zen_service_instance_id=None, zen_service_instance_type=None):  # noqa: E501
        """GetReservedParameters - a model defined in Swagger"""  # noqa: E501

        self._docker_registry_prefix = None
        self._zen_cloud_pak_instance_id = None
        self._zen_control_plane_namespace = None
        self._zen_service_instance_display_name = None
        self._zen_service_instance_id = None
        self._zen_service_instance_type = None
        self.discriminator = None

        if docker_registry_prefix is not None:
            self.docker_registry_prefix = docker_registry_prefix
        if zen_cloud_pak_instance_id is not None:
            self.zen_cloud_pak_instance_id = zen_cloud_pak_instance_id
        if zen_control_plane_namespace is not None:
            self.zen_control_plane_namespace = zen_control_plane_namespace
        if zen_service_instance_display_name is not None:
            self.zen_service_instance_display_name = zen_service_instance_display_name
        if zen_service_instance_id is not None:
            self.zen_service_instance_id = zen_service_instance_id
        if zen_service_instance_type is not None:
            self.zen_service_instance_type = zen_service_instance_type

    @property
    def docker_registry_prefix(self):
        """Gets the docker_registry_prefix of this GetReservedParameters.  # noqa: E501

        docker registry prefix for service instance  # noqa: E501

        :return: The docker_registry_prefix of this GetReservedParameters.  # noqa: E501
        :rtype: str
        """
        return self._docker_registry_prefix

    @docker_registry_prefix.setter
    def docker_registry_prefix(self, docker_registry_prefix):
        """Sets the docker_registry_prefix of this GetReservedParameters.

        docker registry prefix for service instance  # noqa: E501

        :param docker_registry_prefix: The docker_registry_prefix of this GetReservedParameters.  # noqa: E501
        :type: str
        """

        self._docker_registry_prefix = docker_registry_prefix

    @property
    def zen_cloud_pak_instance_id(self):
        """Gets the zen_cloud_pak_instance_id of this GetReservedParameters.  # noqa: E501

        zen cloud pak instance id  # noqa: E501

        :return: The zen_cloud_pak_instance_id of this GetReservedParameters.  # noqa: E501
        :rtype: str
        """
        return self._zen_cloud_pak_instance_id

    @zen_cloud_pak_instance_id.setter
    def zen_cloud_pak_instance_id(self, zen_cloud_pak_instance_id):
        """Sets the zen_cloud_pak_instance_id of this GetReservedParameters.

        zen cloud pak instance id  # noqa: E501

        :param zen_cloud_pak_instance_id: The zen_cloud_pak_instance_id of this GetReservedParameters.  # noqa: E501
        :type: str
        """

        self._zen_cloud_pak_instance_id = zen_cloud_pak_instance_id

    @property
    def zen_control_plane_namespace(self):
        """Gets the zen_control_plane_namespace of this GetReservedParameters.  # noqa: E501

        zen control plane namespace  # noqa: E501

        :return: The zen_control_plane_namespace of this GetReservedParameters.  # noqa: E501
        :rtype: str
        """
        return self._zen_control_plane_namespace

    @zen_control_plane_namespace.setter
    def zen_control_plane_namespace(self, zen_control_plane_namespace):
        """Sets the zen_control_plane_namespace of this GetReservedParameters.

        zen control plane namespace  # noqa: E501

        :param zen_control_plane_namespace: The zen_control_plane_namespace of this GetReservedParameters.  # noqa: E501
        :type: str
        """

        self._zen_control_plane_namespace = zen_control_plane_namespace

    @property
    def zen_service_instance_display_name(self):
        """Gets the zen_service_instance_display_name of this GetReservedParameters.  # noqa: E501

        display name of service instance  # noqa: E501

        :return: The zen_service_instance_display_name of this GetReservedParameters.  # noqa: E501
        :rtype: str
        """
        return self._zen_service_instance_display_name

    @zen_service_instance_display_name.setter
    def zen_service_instance_display_name(self, zen_service_instance_display_name):
        """Sets the zen_service_instance_display_name of this GetReservedParameters.

        display name of service instance  # noqa: E501

        :param zen_service_instance_display_name: The zen_service_instance_display_name of this GetReservedParameters.  # noqa: E501
        :type: str
        """

        self._zen_service_instance_display_name = zen_service_instance_display_name

    @property
    def zen_service_instance_id(self):
        """Gets the zen_service_instance_id of this GetReservedParameters.  # noqa: E501

        service instance id  # noqa: E501

        :return: The zen_service_instance_id of this GetReservedParameters.  # noqa: E501
        :rtype: str
        """
        return self._zen_service_instance_id

    @zen_service_instance_id.setter
    def zen_service_instance_id(self, zen_service_instance_id):
        """Sets the zen_service_instance_id of this GetReservedParameters.

        service instance id  # noqa: E501

        :param zen_service_instance_id: The zen_service_instance_id of this GetReservedParameters.  # noqa: E501
        :type: str
        """

        self._zen_service_instance_id = zen_service_instance_id

    @property
    def zen_service_instance_type(self):
        """Gets the zen_service_instance_type of this GetReservedParameters.  # noqa: E501

        type of addon for the service instance  # noqa: E501

        :return: The zen_service_instance_type of this GetReservedParameters.  # noqa: E501
        :rtype: str
        """
        return self._zen_service_instance_type

    @zen_service_instance_type.setter
    def zen_service_instance_type(self, zen_service_instance_type):
        """Sets the zen_service_instance_type of this GetReservedParameters.

        type of addon for the service instance  # noqa: E501

        :param zen_service_instance_type: The zen_service_instance_type of this GetReservedParameters.  # noqa: E501
        :type: str
        """

        self._zen_service_instance_type = zen_service_instance_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetReservedParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetReservedParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
