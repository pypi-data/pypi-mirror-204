# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrgDataplaneMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataplane_list': 'list[DataplaneMetadata]',
        'details': 'object',
        'org_description': 'str',
        'org_id': 'str',
        'org_name': 'str'
    }

    attribute_map = {
        'dataplane_list': 'dataplane_list',
        'details': 'details',
        'org_description': 'org_description',
        'org_id': 'org_id',
        'org_name': 'org_name'
    }

    def __init__(self, dataplane_list=None, details=None, org_description=None, org_id=None, org_name=None):  # noqa: E501
        """OrgDataplaneMetadata - a model defined in Swagger"""  # noqa: E501

        self._dataplane_list = None
        self._details = None
        self._org_description = None
        self._org_id = None
        self._org_name = None
        self.discriminator = None

        if dataplane_list is not None:
            self.dataplane_list = dataplane_list
        if details is not None:
            self.details = details
        if org_description is not None:
            self.org_description = org_description
        if org_id is not None:
            self.org_id = org_id
        if org_name is not None:
            self.org_name = org_name

    @property
    def dataplane_list(self):
        """Gets the dataplane_list of this OrgDataplaneMetadata.  # noqa: E501

        List of dataplanes belonging to the organization  # noqa: E501

        :return: The dataplane_list of this OrgDataplaneMetadata.  # noqa: E501
        :rtype: list[DataplaneMetadata]
        """
        return self._dataplane_list

    @dataplane_list.setter
    def dataplane_list(self, dataplane_list):
        """Sets the dataplane_list of this OrgDataplaneMetadata.

        List of dataplanes belonging to the organization  # noqa: E501

        :param dataplane_list: The dataplane_list of this OrgDataplaneMetadata.  # noqa: E501
        :type: list[DataplaneMetadata]
        """

        self._dataplane_list = dataplane_list

    @property
    def details(self):
        """Gets the details of this OrgDataplaneMetadata.  # noqa: E501


        :return: The details of this OrgDataplaneMetadata.  # noqa: E501
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this OrgDataplaneMetadata.


        :param details: The details of this OrgDataplaneMetadata.  # noqa: E501
        :type: object
        """

        self._details = details

    @property
    def org_description(self):
        """Gets the org_description of this OrgDataplaneMetadata.  # noqa: E501


        :return: The org_description of this OrgDataplaneMetadata.  # noqa: E501
        :rtype: str
        """
        return self._org_description

    @org_description.setter
    def org_description(self, org_description):
        """Sets the org_description of this OrgDataplaneMetadata.


        :param org_description: The org_description of this OrgDataplaneMetadata.  # noqa: E501
        :type: str
        """

        self._org_description = org_description

    @property
    def org_id(self):
        """Gets the org_id of this OrgDataplaneMetadata.  # noqa: E501


        :return: The org_id of this OrgDataplaneMetadata.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this OrgDataplaneMetadata.


        :param org_id: The org_id of this OrgDataplaneMetadata.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def org_name(self):
        """Gets the org_name of this OrgDataplaneMetadata.  # noqa: E501


        :return: The org_name of this OrgDataplaneMetadata.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this OrgDataplaneMetadata.


        :param org_name: The org_name of this OrgDataplaneMetadata.  # noqa: E501
        :type: str
        """

        self._org_name = org_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgDataplaneMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgDataplaneMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
