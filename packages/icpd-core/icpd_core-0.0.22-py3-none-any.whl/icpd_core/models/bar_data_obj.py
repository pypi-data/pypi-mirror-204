# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BarDataObj(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_array': 'list[BarDataObjDataArray]',
        'x_axis_label': 'str',
        'y_axis_label': 'str'
    }

    attribute_map = {
        'data_array': 'data_array',
        'x_axis_label': 'x_axis_label',
        'y_axis_label': 'y_axis_label'
    }

    def __init__(self, data_array=None, x_axis_label=None, y_axis_label=None):  # noqa: E501
        """BarDataObj - a model defined in Swagger"""  # noqa: E501

        self._data_array = None
        self._x_axis_label = None
        self._y_axis_label = None
        self.discriminator = None

        self.data_array = data_array
        self.x_axis_label = x_axis_label
        self.y_axis_label = y_axis_label

    @property
    def data_array(self):
        """Gets the data_array of this BarDataObj.  # noqa: E501

        an array of group-value objects  # noqa: E501

        :return: The data_array of this BarDataObj.  # noqa: E501
        :rtype: list[BarDataObjDataArray]
        """
        return self._data_array

    @data_array.setter
    def data_array(self, data_array):
        """Sets the data_array of this BarDataObj.

        an array of group-value objects  # noqa: E501

        :param data_array: The data_array of this BarDataObj.  # noqa: E501
        :type: list[BarDataObjDataArray]
        """
        if data_array is None:
            raise ValueError("Invalid value for `data_array`, must not be `None`")  # noqa: E501

        self._data_array = data_array

    @property
    def x_axis_label(self):
        """Gets the x_axis_label of this BarDataObj.  # noqa: E501

        X axis label  # noqa: E501

        :return: The x_axis_label of this BarDataObj.  # noqa: E501
        :rtype: str
        """
        return self._x_axis_label

    @x_axis_label.setter
    def x_axis_label(self, x_axis_label):
        """Sets the x_axis_label of this BarDataObj.

        X axis label  # noqa: E501

        :param x_axis_label: The x_axis_label of this BarDataObj.  # noqa: E501
        :type: str
        """
        if x_axis_label is None:
            raise ValueError("Invalid value for `x_axis_label`, must not be `None`")  # noqa: E501

        self._x_axis_label = x_axis_label

    @property
    def y_axis_label(self):
        """Gets the y_axis_label of this BarDataObj.  # noqa: E501

        Y axis label  # noqa: E501

        :return: The y_axis_label of this BarDataObj.  # noqa: E501
        :rtype: str
        """
        return self._y_axis_label

    @y_axis_label.setter
    def y_axis_label(self, y_axis_label):
        """Sets the y_axis_label of this BarDataObj.

        Y axis label  # noqa: E501

        :param y_axis_label: The y_axis_label of this BarDataObj.  # noqa: E501
        :type: str
        """
        if y_axis_label is None:
            raise ValueError("Invalid value for `y_axis_label`, must not be `None`")  # noqa: E501

        self._y_axis_label = y_axis_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BarDataObj, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BarDataObj):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
