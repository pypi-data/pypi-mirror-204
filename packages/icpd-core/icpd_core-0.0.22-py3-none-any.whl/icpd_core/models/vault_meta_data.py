# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VaultMetaData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'created_by': 'str',
        'description': 'str',
        'invalid_auth': 'bool',
        'invalid_owner': 'bool',
        'owned_by': 'str',
        'owner_uid': 'str',
        'provider_name': 'str',
        'requires_auth_update': 'bool',
        'scheduled_owner_uid': 'str',
        'secret_preview': 'str',
        'total_secrets': 'int',
        'updated_at': 'str',
        'vault_name': 'str',
        'vault_type': 'str',
        'vault_urn': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'created_by': 'created_by',
        'description': 'description',
        'invalid_auth': 'invalid_auth',
        'invalid_owner': 'invalid_owner',
        'owned_by': 'owned_by',
        'owner_uid': 'owner_uid',
        'provider_name': 'provider_name',
        'requires_auth_update': 'requires_auth_update',
        'scheduled_owner_uid': 'scheduled_owner_uid',
        'secret_preview': 'secret_preview',
        'total_secrets': 'total_secrets',
        'updated_at': 'updated_at',
        'vault_name': 'vault_name',
        'vault_type': 'vault_type',
        'vault_urn': 'vault_urn'
    }

    def __init__(self, created_at=None, created_by=None, description=None, invalid_auth=None, invalid_owner=None, owned_by=None, owner_uid=None, provider_name=None, requires_auth_update=None, scheduled_owner_uid=None, secret_preview=None, total_secrets=None, updated_at=None, vault_name=None, vault_type=None, vault_urn=None):  # noqa: E501
        """VaultMetaData - a model defined in Swagger"""  # noqa: E501

        self._created_at = None
        self._created_by = None
        self._description = None
        self._invalid_auth = None
        self._invalid_owner = None
        self._owned_by = None
        self._owner_uid = None
        self._provider_name = None
        self._requires_auth_update = None
        self._scheduled_owner_uid = None
        self._secret_preview = None
        self._total_secrets = None
        self._updated_at = None
        self._vault_name = None
        self._vault_type = None
        self._vault_urn = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if description is not None:
            self.description = description
        if invalid_auth is not None:
            self.invalid_auth = invalid_auth
        if invalid_owner is not None:
            self.invalid_owner = invalid_owner
        if owned_by is not None:
            self.owned_by = owned_by
        if owner_uid is not None:
            self.owner_uid = owner_uid
        if provider_name is not None:
            self.provider_name = provider_name
        if requires_auth_update is not None:
            self.requires_auth_update = requires_auth_update
        if scheduled_owner_uid is not None:
            self.scheduled_owner_uid = scheduled_owner_uid
        if secret_preview is not None:
            self.secret_preview = secret_preview
        if total_secrets is not None:
            self.total_secrets = total_secrets
        if updated_at is not None:
            self.updated_at = updated_at
        if vault_name is not None:
            self.vault_name = vault_name
        if vault_type is not None:
            self.vault_type = vault_type
        if vault_urn is not None:
            self.vault_urn = vault_urn

    @property
    def created_at(self):
        """Gets the created_at of this VaultMetaData.  # noqa: E501

        vault last creation time  # noqa: E501

        :return: The created_at of this VaultMetaData.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VaultMetaData.

        vault last creation time  # noqa: E501

        :param created_at: The created_at of this VaultMetaData.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this VaultMetaData.  # noqa: E501

        full name of the vault creator  # noqa: E501

        :return: The created_by of this VaultMetaData.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this VaultMetaData.

        full name of the vault creator  # noqa: E501

        :param created_by: The created_by of this VaultMetaData.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this VaultMetaData.  # noqa: E501

        short description about the vault being configured for the user  # noqa: E501

        :return: The description of this VaultMetaData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VaultMetaData.

        short description about the vault being configured for the user  # noqa: E501

        :param description: The description of this VaultMetaData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def invalid_auth(self):
        """Gets the invalid_auth of this VaultMetaData.  # noqa: E501

        vault auth is invalid and update is required  # noqa: E501

        :return: The invalid_auth of this VaultMetaData.  # noqa: E501
        :rtype: bool
        """
        return self._invalid_auth

    @invalid_auth.setter
    def invalid_auth(self, invalid_auth):
        """Sets the invalid_auth of this VaultMetaData.

        vault auth is invalid and update is required  # noqa: E501

        :param invalid_auth: The invalid_auth of this VaultMetaData.  # noqa: E501
        :type: bool
        """

        self._invalid_auth = invalid_auth

    @property
    def invalid_owner(self):
        """Gets the invalid_owner of this VaultMetaData.  # noqa: E501

        vault owner is invalid and update is required  # noqa: E501

        :return: The invalid_owner of this VaultMetaData.  # noqa: E501
        :rtype: bool
        """
        return self._invalid_owner

    @invalid_owner.setter
    def invalid_owner(self, invalid_owner):
        """Sets the invalid_owner of this VaultMetaData.

        vault owner is invalid and update is required  # noqa: E501

        :param invalid_owner: The invalid_owner of this VaultMetaData.  # noqa: E501
        :type: bool
        """

        self._invalid_owner = invalid_owner

    @property
    def owned_by(self):
        """Gets the owned_by of this VaultMetaData.  # noqa: E501

        full name of the vault owner  # noqa: E501

        :return: The owned_by of this VaultMetaData.  # noqa: E501
        :rtype: str
        """
        return self._owned_by

    @owned_by.setter
    def owned_by(self, owned_by):
        """Sets the owned_by of this VaultMetaData.

        full name of the vault owner  # noqa: E501

        :param owned_by: The owned_by of this VaultMetaData.  # noqa: E501
        :type: str
        """

        self._owned_by = owned_by

    @property
    def owner_uid(self):
        """Gets the owner_uid of this VaultMetaData.  # noqa: E501

        owner uid of the vault  # noqa: E501

        :return: The owner_uid of this VaultMetaData.  # noqa: E501
        :rtype: str
        """
        return self._owner_uid

    @owner_uid.setter
    def owner_uid(self, owner_uid):
        """Sets the owner_uid of this VaultMetaData.

        owner uid of the vault  # noqa: E501

        :param owner_uid: The owner_uid of this VaultMetaData.  # noqa: E501
        :type: str
        """

        self._owner_uid = owner_uid

    @property
    def provider_name(self):
        """Gets the provider_name of this VaultMetaData.  # noqa: E501

        name of the vault provider  # noqa: E501

        :return: The provider_name of this VaultMetaData.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this VaultMetaData.

        name of the vault provider  # noqa: E501

        :param provider_name: The provider_name of this VaultMetaData.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    @property
    def requires_auth_update(self):
        """Gets the requires_auth_update of this VaultMetaData.  # noqa: E501

        if set to true, vault integration authentication needs to be updated.  # noqa: E501

        :return: The requires_auth_update of this VaultMetaData.  # noqa: E501
        :rtype: bool
        """
        return self._requires_auth_update

    @requires_auth_update.setter
    def requires_auth_update(self, requires_auth_update):
        """Sets the requires_auth_update of this VaultMetaData.

        if set to true, vault integration authentication needs to be updated.  # noqa: E501

        :param requires_auth_update: The requires_auth_update of this VaultMetaData.  # noqa: E501
        :type: bool
        """

        self._requires_auth_update = requires_auth_update

    @property
    def scheduled_owner_uid(self):
        """Gets the scheduled_owner_uid of this VaultMetaData.  # noqa: E501

        intended new owner of the vault.  # noqa: E501

        :return: The scheduled_owner_uid of this VaultMetaData.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_owner_uid

    @scheduled_owner_uid.setter
    def scheduled_owner_uid(self, scheduled_owner_uid):
        """Sets the scheduled_owner_uid of this VaultMetaData.

        intended new owner of the vault.  # noqa: E501

        :param scheduled_owner_uid: The scheduled_owner_uid of this VaultMetaData.  # noqa: E501
        :type: str
        """

        self._scheduled_owner_uid = scheduled_owner_uid

    @property
    def secret_preview(self):
        """Gets the secret_preview of this VaultMetaData.  # noqa: E501

        preview of secrets in vault  # noqa: E501

        :return: The secret_preview of this VaultMetaData.  # noqa: E501
        :rtype: str
        """
        return self._secret_preview

    @secret_preview.setter
    def secret_preview(self, secret_preview):
        """Sets the secret_preview of this VaultMetaData.

        preview of secrets in vault  # noqa: E501

        :param secret_preview: The secret_preview of this VaultMetaData.  # noqa: E501
        :type: str
        """

        self._secret_preview = secret_preview

    @property
    def total_secrets(self):
        """Gets the total_secrets of this VaultMetaData.  # noqa: E501

        total number of secrets  # noqa: E501

        :return: The total_secrets of this VaultMetaData.  # noqa: E501
        :rtype: int
        """
        return self._total_secrets

    @total_secrets.setter
    def total_secrets(self, total_secrets):
        """Sets the total_secrets of this VaultMetaData.

        total number of secrets  # noqa: E501

        :param total_secrets: The total_secrets of this VaultMetaData.  # noqa: E501
        :type: int
        """

        self._total_secrets = total_secrets

    @property
    def updated_at(self):
        """Gets the updated_at of this VaultMetaData.  # noqa: E501

        vault last update time  # noqa: E501

        :return: The updated_at of this VaultMetaData.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this VaultMetaData.

        vault last update time  # noqa: E501

        :param updated_at: The updated_at of this VaultMetaData.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def vault_name(self):
        """Gets the vault_name of this VaultMetaData.  # noqa: E501

        name of the vault  # noqa: E501

        :return: The vault_name of this VaultMetaData.  # noqa: E501
        :rtype: str
        """
        return self._vault_name

    @vault_name.setter
    def vault_name(self, vault_name):
        """Sets the vault_name of this VaultMetaData.

        name of the vault  # noqa: E501

        :param vault_name: The vault_name of this VaultMetaData.  # noqa: E501
        :type: str
        """

        self._vault_name = vault_name

    @property
    def vault_type(self):
        """Gets the vault_type of this VaultMetaData.  # noqa: E501

        type of external vault  # noqa: E501

        :return: The vault_type of this VaultMetaData.  # noqa: E501
        :rtype: str
        """
        return self._vault_type

    @vault_type.setter
    def vault_type(self, vault_type):
        """Sets the vault_type of this VaultMetaData.

        type of external vault  # noqa: E501

        :param vault_type: The vault_type of this VaultMetaData.  # noqa: E501
        :type: str
        """

        self._vault_type = vault_type

    @property
    def vault_urn(self):
        """Gets the vault_urn of this VaultMetaData.  # noqa: E501

        vault ID  # noqa: E501

        :return: The vault_urn of this VaultMetaData.  # noqa: E501
        :rtype: str
        """
        return self._vault_urn

    @vault_urn.setter
    def vault_urn(self, vault_urn):
        """Sets the vault_urn of this VaultMetaData.

        vault ID  # noqa: E501

        :param vault_urn: The vault_urn of this VaultMetaData.  # noqa: E501
        :type: str
        """

        self._vault_urn = vault_urn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VaultMetaData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VaultMetaData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
