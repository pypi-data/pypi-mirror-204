# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'directory_path': 'str',
        'metadata': 'object',
        'namespace': 'str'
    }

    attribute_map = {
        'directory_path': 'directory_path',
        'metadata': 'metadata',
        'namespace': 'namespace'
    }

    def __init__(self, directory_path=None, metadata=None, namespace=None):  # noqa: E501
        """Body2 - a model defined in Swagger"""  # noqa: E501

        self._directory_path = None
        self._metadata = None
        self._namespace = None
        self.discriminator = None

        if directory_path is not None:
            self.directory_path = directory_path
        if metadata is not None:
            self.metadata = metadata
        if namespace is not None:
            self.namespace = namespace

    @property
    def directory_path(self):
        """Gets the directory_path of this Body2.  # noqa: E501

        directory path where the yamls are located  # noqa: E501

        :return: The directory_path of this Body2.  # noqa: E501
        :rtype: str
        """
        return self._directory_path

    @directory_path.setter
    def directory_path(self, directory_path):
        """Sets the directory_path of this Body2.

        directory path where the yamls are located  # noqa: E501

        :param directory_path: The directory_path of this Body2.  # noqa: E501
        :type: str
        """

        self._directory_path = directory_path

    @property
    def metadata(self):
        """Gets the metadata of this Body2.  # noqa: E501

        values that will be templated over each yaml file  # noqa: E501

        :return: The metadata of this Body2.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Body2.

        values that will be templated over each yaml file  # noqa: E501

        :param metadata: The metadata of this Body2.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def namespace(self):
        """Gets the namespace of this Body2.  # noqa: E501

        target namespace where the objects will be created/updated  # noqa: E501

        :return: The namespace of this Body2.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Body2.

        target namespace where the objects will be created/updated  # noqa: E501

        :param namespace: The namespace of this Body2.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
