# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SuccessGetContainerMetricsResponseContainers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_percent': 'str',
        'id': 'str',
        'mem_limit': 'str',
        'mem_percent': 'str',
        'mem_usage': 'str',
        'name': 'str'
    }

    attribute_map = {
        'cpu_percent': 'cpu_percent',
        'id': 'id',
        'mem_limit': 'mem_limit',
        'mem_percent': 'mem_percent',
        'mem_usage': 'mem_usage',
        'name': 'name'
    }

    def __init__(self, cpu_percent=None, id=None, mem_limit=None, mem_percent=None, mem_usage=None, name=None):  # noqa: E501
        """SuccessGetContainerMetricsResponseContainers - a model defined in Swagger"""  # noqa: E501

        self._cpu_percent = None
        self._id = None
        self._mem_limit = None
        self._mem_percent = None
        self._mem_usage = None
        self._name = None
        self.discriminator = None

        if cpu_percent is not None:
            self.cpu_percent = cpu_percent
        if id is not None:
            self.id = id
        if mem_limit is not None:
            self.mem_limit = mem_limit
        if mem_percent is not None:
            self.mem_percent = mem_percent
        if mem_usage is not None:
            self.mem_usage = mem_usage
        if name is not None:
            self.name = name

    @property
    def cpu_percent(self):
        """Gets the cpu_percent of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501

        CPU Percent usage value  # noqa: E501

        :return: The cpu_percent of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501
        :rtype: str
        """
        return self._cpu_percent

    @cpu_percent.setter
    def cpu_percent(self, cpu_percent):
        """Sets the cpu_percent of this SuccessGetContainerMetricsResponseContainers.

        CPU Percent usage value  # noqa: E501

        :param cpu_percent: The cpu_percent of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501
        :type: str
        """

        self._cpu_percent = cpu_percent

    @property
    def id(self):
        """Gets the id of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501

        ID  # noqa: E501

        :return: The id of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SuccessGetContainerMetricsResponseContainers.

        ID  # noqa: E501

        :param id: The id of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mem_limit(self):
        """Gets the mem_limit of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501

        Memory limit value  # noqa: E501

        :return: The mem_limit of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501
        :rtype: str
        """
        return self._mem_limit

    @mem_limit.setter
    def mem_limit(self, mem_limit):
        """Sets the mem_limit of this SuccessGetContainerMetricsResponseContainers.

        Memory limit value  # noqa: E501

        :param mem_limit: The mem_limit of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501
        :type: str
        """

        self._mem_limit = mem_limit

    @property
    def mem_percent(self):
        """Gets the mem_percent of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501

        Memory percentage value  # noqa: E501

        :return: The mem_percent of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501
        :rtype: str
        """
        return self._mem_percent

    @mem_percent.setter
    def mem_percent(self, mem_percent):
        """Sets the mem_percent of this SuccessGetContainerMetricsResponseContainers.

        Memory percentage value  # noqa: E501

        :param mem_percent: The mem_percent of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501
        :type: str
        """

        self._mem_percent = mem_percent

    @property
    def mem_usage(self):
        """Gets the mem_usage of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501

        Memory usage value  # noqa: E501

        :return: The mem_usage of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501
        :rtype: str
        """
        return self._mem_usage

    @mem_usage.setter
    def mem_usage(self, mem_usage):
        """Sets the mem_usage of this SuccessGetContainerMetricsResponseContainers.

        Memory usage value  # noqa: E501

        :param mem_usage: The mem_usage of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501
        :type: str
        """

        self._mem_usage = mem_usage

    @property
    def name(self):
        """Gets the name of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SuccessGetContainerMetricsResponseContainers.

        Name  # noqa: E501

        :param name: The name of this SuccessGetContainerMetricsResponseContainers.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SuccessGetContainerMetricsResponseContainers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SuccessGetContainerMetricsResponseContainers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
