# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BigNumberDataObj(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'footer_1': 'str',
        'footer_2': 'str',
        'metric': 'str',
        'prefix': 'str',
        'sub_text': 'str',
        'suffix': 'str'
    }

    attribute_map = {
        'footer_1': 'footer_1',
        'footer_2': 'footer_2',
        'metric': 'metric',
        'prefix': 'prefix',
        'sub_text': 'sub_text',
        'suffix': 'suffix'
    }

    def __init__(self, footer_1=None, footer_2=None, metric=None, prefix=None, sub_text=None, suffix=None):  # noqa: E501
        """BigNumberDataObj - a model defined in Swagger"""  # noqa: E501

        self._footer_1 = None
        self._footer_2 = None
        self._metric = None
        self._prefix = None
        self._sub_text = None
        self._suffix = None
        self.discriminator = None

        if footer_1 is not None:
            self.footer_1 = footer_1
        if footer_2 is not None:
            self.footer_2 = footer_2
        self.metric = metric
        if prefix is not None:
            self.prefix = prefix
        self.sub_text = sub_text
        if suffix is not None:
            self.suffix = suffix

    @property
    def footer_1(self):
        """Gets the footer_1 of this BigNumberDataObj.  # noqa: E501

        a small description about the metric  # noqa: E501

        :return: The footer_1 of this BigNumberDataObj.  # noqa: E501
        :rtype: str
        """
        return self._footer_1

    @footer_1.setter
    def footer_1(self, footer_1):
        """Sets the footer_1 of this BigNumberDataObj.

        a small description about the metric  # noqa: E501

        :param footer_1: The footer_1 of this BigNumberDataObj.  # noqa: E501
        :type: str
        """

        self._footer_1 = footer_1

    @property
    def footer_2(self):
        """Gets the footer_2 of this BigNumberDataObj.  # noqa: E501

        a small description about the metric  # noqa: E501

        :return: The footer_2 of this BigNumberDataObj.  # noqa: E501
        :rtype: str
        """
        return self._footer_2

    @footer_2.setter
    def footer_2(self, footer_2):
        """Sets the footer_2 of this BigNumberDataObj.

        a small description about the metric  # noqa: E501

        :param footer_2: The footer_2 of this BigNumberDataObj.  # noqa: E501
        :type: str
        """

        self._footer_2 = footer_2

    @property
    def metric(self):
        """Gets the metric of this BigNumberDataObj.  # noqa: E501

        value of the Card  # noqa: E501

        :return: The metric of this BigNumberDataObj.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this BigNumberDataObj.

        value of the Card  # noqa: E501

        :param metric: The metric of this BigNumberDataObj.  # noqa: E501
        :type: str
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")  # noqa: E501

        self._metric = metric

    @property
    def prefix(self):
        """Gets the prefix of this BigNumberDataObj.  # noqa: E501

        Icon from the carbon icons library  # noqa: E501

        :return: The prefix of this BigNumberDataObj.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this BigNumberDataObj.

        Icon from the carbon icons library  # noqa: E501

        :param prefix: The prefix of this BigNumberDataObj.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def sub_text(self):
        """Gets the sub_text of this BigNumberDataObj.  # noqa: E501

        a small description about the metric  # noqa: E501

        :return: The sub_text of this BigNumberDataObj.  # noqa: E501
        :rtype: str
        """
        return self._sub_text

    @sub_text.setter
    def sub_text(self, sub_text):
        """Sets the sub_text of this BigNumberDataObj.

        a small description about the metric  # noqa: E501

        :param sub_text: The sub_text of this BigNumberDataObj.  # noqa: E501
        :type: str
        """
        if sub_text is None:
            raise ValueError("Invalid value for `sub_text`, must not be `None`")  # noqa: E501

        self._sub_text = sub_text

    @property
    def suffix(self):
        """Gets the suffix of this BigNumberDataObj.  # noqa: E501

        suffix of the metric that'll be smaller than the metric  # noqa: E501

        :return: The suffix of this BigNumberDataObj.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this BigNumberDataObj.

        suffix of the metric that'll be smaller than the metric  # noqa: E501

        :param suffix: The suffix of this BigNumberDataObj.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BigNumberDataObj, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BigNumberDataObj):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
