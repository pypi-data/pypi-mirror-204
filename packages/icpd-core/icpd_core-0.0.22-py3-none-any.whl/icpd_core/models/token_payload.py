# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TokenPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'module_name': 'str',
        'role': 'str',
        'service_instance_display_name': 'str',
        'service_instance_id': 'str',
        'service_instance_user_name': 'str',
        'zen_display_name': 'str',
        'zen_uid': 'str',
        'zen_username': 'str'
    }

    attribute_map = {
        'module_name': 'ModuleName',
        'role': 'Role',
        'service_instance_display_name': 'ServiceInstanceDisplayName',
        'service_instance_id': 'ServiceInstanceID',
        'service_instance_user_name': 'ServiceInstanceUserName',
        'zen_display_name': 'ZenDisplayName',
        'zen_uid': 'ZenUID',
        'zen_username': 'ZenUsername'
    }

    def __init__(self, module_name=None, role=None, service_instance_display_name=None, service_instance_id=None, service_instance_user_name=None, zen_display_name=None, zen_uid=None, zen_username=None):  # noqa: E501
        """TokenPayload - a model defined in Swagger"""  # noqa: E501

        self._module_name = None
        self._role = None
        self._service_instance_display_name = None
        self._service_instance_id = None
        self._service_instance_user_name = None
        self._zen_display_name = None
        self._zen_uid = None
        self._zen_username = None
        self.discriminator = None

        if module_name is not None:
            self.module_name = module_name
        if role is not None:
            self.role = role
        if service_instance_display_name is not None:
            self.service_instance_display_name = service_instance_display_name
        if service_instance_id is not None:
            self.service_instance_id = service_instance_id
        if service_instance_user_name is not None:
            self.service_instance_user_name = service_instance_user_name
        if zen_display_name is not None:
            self.zen_display_name = zen_display_name
        if zen_uid is not None:
            self.zen_uid = zen_uid
        if zen_username is not None:
            self.zen_username = zen_username

    @property
    def module_name(self):
        """Gets the module_name of this TokenPayload.  # noqa: E501


        :return: The module_name of this TokenPayload.  # noqa: E501
        :rtype: str
        """
        return self._module_name

    @module_name.setter
    def module_name(self, module_name):
        """Sets the module_name of this TokenPayload.


        :param module_name: The module_name of this TokenPayload.  # noqa: E501
        :type: str
        """

        self._module_name = module_name

    @property
    def role(self):
        """Gets the role of this TokenPayload.  # noqa: E501


        :return: The role of this TokenPayload.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this TokenPayload.


        :param role: The role of this TokenPayload.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def service_instance_display_name(self):
        """Gets the service_instance_display_name of this TokenPayload.  # noqa: E501


        :return: The service_instance_display_name of this TokenPayload.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_display_name

    @service_instance_display_name.setter
    def service_instance_display_name(self, service_instance_display_name):
        """Sets the service_instance_display_name of this TokenPayload.


        :param service_instance_display_name: The service_instance_display_name of this TokenPayload.  # noqa: E501
        :type: str
        """

        self._service_instance_display_name = service_instance_display_name

    @property
    def service_instance_id(self):
        """Gets the service_instance_id of this TokenPayload.  # noqa: E501


        :return: The service_instance_id of this TokenPayload.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_id

    @service_instance_id.setter
    def service_instance_id(self, service_instance_id):
        """Sets the service_instance_id of this TokenPayload.


        :param service_instance_id: The service_instance_id of this TokenPayload.  # noqa: E501
        :type: str
        """

        self._service_instance_id = service_instance_id

    @property
    def service_instance_user_name(self):
        """Gets the service_instance_user_name of this TokenPayload.  # noqa: E501


        :return: The service_instance_user_name of this TokenPayload.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_user_name

    @service_instance_user_name.setter
    def service_instance_user_name(self, service_instance_user_name):
        """Sets the service_instance_user_name of this TokenPayload.


        :param service_instance_user_name: The service_instance_user_name of this TokenPayload.  # noqa: E501
        :type: str
        """

        self._service_instance_user_name = service_instance_user_name

    @property
    def zen_display_name(self):
        """Gets the zen_display_name of this TokenPayload.  # noqa: E501


        :return: The zen_display_name of this TokenPayload.  # noqa: E501
        :rtype: str
        """
        return self._zen_display_name

    @zen_display_name.setter
    def zen_display_name(self, zen_display_name):
        """Sets the zen_display_name of this TokenPayload.


        :param zen_display_name: The zen_display_name of this TokenPayload.  # noqa: E501
        :type: str
        """

        self._zen_display_name = zen_display_name

    @property
    def zen_uid(self):
        """Gets the zen_uid of this TokenPayload.  # noqa: E501


        :return: The zen_uid of this TokenPayload.  # noqa: E501
        :rtype: str
        """
        return self._zen_uid

    @zen_uid.setter
    def zen_uid(self, zen_uid):
        """Sets the zen_uid of this TokenPayload.


        :param zen_uid: The zen_uid of this TokenPayload.  # noqa: E501
        :type: str
        """

        self._zen_uid = zen_uid

    @property
    def zen_username(self):
        """Gets the zen_username of this TokenPayload.  # noqa: E501


        :return: The zen_username of this TokenPayload.  # noqa: E501
        :rtype: str
        """
        return self._zen_username

    @zen_username.setter
    def zen_username(self, zen_username):
        """Sets the zen_username of this TokenPayload.


        :param zen_username: The zen_username of this TokenPayload.  # noqa: E501
        :type: str
        """

        self._zen_username = zen_username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
