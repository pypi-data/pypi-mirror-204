# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProvisioningDetailsCommon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'environment_variables': 'object',
        'image_reference': 'str',
        'instance_id': 'str',
        'misc': 'object',
        'ports': 'object',
        'startup_arguments': 'list[str]',
        'startup_command': 'str',
        'volumes': 'list[VolumesObj]'
    }

    attribute_map = {
        'environment_variables': 'environment_variables',
        'image_reference': 'image_reference',
        'instance_id': 'instance_id',
        'misc': 'misc',
        'ports': 'ports',
        'startup_arguments': 'startup_arguments',
        'startup_command': 'startup_command',
        'volumes': 'volumes'
    }

    def __init__(self, environment_variables=None, image_reference=None, instance_id=None, misc=None, ports=None, startup_arguments=None, startup_command=None, volumes=None):  # noqa: E501
        """ProvisioningDetailsCommon - a model defined in Swagger"""  # noqa: E501

        self._environment_variables = None
        self._image_reference = None
        self._instance_id = None
        self._misc = None
        self._ports = None
        self._startup_arguments = None
        self._startup_command = None
        self._volumes = None
        self.discriminator = None

        if environment_variables is not None:
            self.environment_variables = environment_variables
        if image_reference is not None:
            self.image_reference = image_reference
        if instance_id is not None:
            self.instance_id = instance_id
        if misc is not None:
            self.misc = misc
        if ports is not None:
            self.ports = ports
        if startup_arguments is not None:
            self.startup_arguments = startup_arguments
        if startup_command is not None:
            self.startup_command = startup_command
        if volumes is not None:
            self.volumes = volumes

    @property
    def environment_variables(self):
        """Gets the environment_variables of this ProvisioningDetailsCommon.  # noqa: E501

        Object with key and value pairs for environment variables  # noqa: E501

        :return: The environment_variables of this ProvisioningDetailsCommon.  # noqa: E501
        :rtype: object
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this ProvisioningDetailsCommon.

        Object with key and value pairs for environment variables  # noqa: E501

        :param environment_variables: The environment_variables of this ProvisioningDetailsCommon.  # noqa: E501
        :type: object
        """

        self._environment_variables = environment_variables

    @property
    def image_reference(self):
        """Gets the image_reference of this ProvisioningDetailsCommon.  # noqa: E501


        :return: The image_reference of this ProvisioningDetailsCommon.  # noqa: E501
        :rtype: str
        """
        return self._image_reference

    @image_reference.setter
    def image_reference(self, image_reference):
        """Sets the image_reference of this ProvisioningDetailsCommon.


        :param image_reference: The image_reference of this ProvisioningDetailsCommon.  # noqa: E501
        :type: str
        """

        self._image_reference = image_reference

    @property
    def instance_id(self):
        """Gets the instance_id of this ProvisioningDetailsCommon.  # noqa: E501


        :return: The instance_id of this ProvisioningDetailsCommon.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this ProvisioningDetailsCommon.


        :param instance_id: The instance_id of this ProvisioningDetailsCommon.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def misc(self):
        """Gets the misc of this ProvisioningDetailsCommon.  # noqa: E501


        :return: The misc of this ProvisioningDetailsCommon.  # noqa: E501
        :rtype: object
        """
        return self._misc

    @misc.setter
    def misc(self, misc):
        """Sets the misc of this ProvisioningDetailsCommon.


        :param misc: The misc of this ProvisioningDetailsCommon.  # noqa: E501
        :type: object
        """

        self._misc = misc

    @property
    def ports(self):
        """Gets the ports of this ProvisioningDetailsCommon.  # noqa: E501

        Object mapping port numbers to their equivalent routes  # noqa: E501

        :return: The ports of this ProvisioningDetailsCommon.  # noqa: E501
        :rtype: object
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this ProvisioningDetailsCommon.

        Object mapping port numbers to their equivalent routes  # noqa: E501

        :param ports: The ports of this ProvisioningDetailsCommon.  # noqa: E501
        :type: object
        """

        self._ports = ports

    @property
    def startup_arguments(self):
        """Gets the startup_arguments of this ProvisioningDetailsCommon.  # noqa: E501


        :return: The startup_arguments of this ProvisioningDetailsCommon.  # noqa: E501
        :rtype: list[str]
        """
        return self._startup_arguments

    @startup_arguments.setter
    def startup_arguments(self, startup_arguments):
        """Sets the startup_arguments of this ProvisioningDetailsCommon.


        :param startup_arguments: The startup_arguments of this ProvisioningDetailsCommon.  # noqa: E501
        :type: list[str]
        """

        self._startup_arguments = startup_arguments

    @property
    def startup_command(self):
        """Gets the startup_command of this ProvisioningDetailsCommon.  # noqa: E501


        :return: The startup_command of this ProvisioningDetailsCommon.  # noqa: E501
        :rtype: str
        """
        return self._startup_command

    @startup_command.setter
    def startup_command(self, startup_command):
        """Sets the startup_command of this ProvisioningDetailsCommon.


        :param startup_command: The startup_command of this ProvisioningDetailsCommon.  # noqa: E501
        :type: str
        """

        self._startup_command = startup_command

    @property
    def volumes(self):
        """Gets the volumes of this ProvisioningDetailsCommon.  # noqa: E501


        :return: The volumes of this ProvisioningDetailsCommon.  # noqa: E501
        :rtype: list[VolumesObj]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ProvisioningDetailsCommon.


        :param volumes: The volumes of this ProvisioningDetailsCommon.  # noqa: E501
        :type: list[VolumesObj]
        """

        self._volumes = volumes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvisioningDetailsCommon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisioningDetailsCommon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
