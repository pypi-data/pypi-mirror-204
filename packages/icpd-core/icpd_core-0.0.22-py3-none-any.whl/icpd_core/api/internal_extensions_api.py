# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from icpd_core.api_client import ApiClient


class InternalExtensionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_internal_extensions(self, secret, source_id, **kwargs):  # noqa: E501
        """Delete service extensions.  # noqa: E501

        This API is used to delete all internal extensions and extension points introduced by source_id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_internal_extensions(secret, source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret: zen-service-broker-secret (required)
        :param str source_id: ID of the entity that introduced the extensions. (required)
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_internal_extensions_with_http_info(secret, source_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_internal_extensions_with_http_info(secret, source_id, **kwargs)  # noqa: E501
            return data

    def delete_internal_extensions_with_http_info(self, secret, source_id, **kwargs):  # noqa: E501
        """Delete service extensions.  # noqa: E501

        This API is used to delete all internal extensions and extension points introduced by source_id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_internal_extensions_with_http_info(secret, source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret: zen-service-broker-secret (required)
        :param str source_id: ID of the entity that introduced the extensions. (required)
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secret', 'source_id', 'ibm_cpd_transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_internal_extensions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'secret' is set
        if ('secret' not in params or
                params['secret'] is None):
            raise ValueError("Missing the required parameter `secret` when calling `delete_internal_extensions`")  # noqa: E501
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params or
                params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `delete_internal_extensions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_id' in params:
            path_params['source_id'] = params['source_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501
        if 'secret' in params:
            header_params['secret'] = params['secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/internal/extensions/{source_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_internal_extension_points(self, secret, body, **kwargs):  # noqa: E501
        """Create and update service extension point.  # noqa: E501

        This API is used to create and update internal extension points for a service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_internal_extension_points(secret, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret: zen-service-broker-secret (required)
        :param Body body: Payload to create new internal extension points (array of extension objects) (required)
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_internal_extension_points_with_http_info(secret, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_internal_extension_points_with_http_info(secret, body, **kwargs)  # noqa: E501
            return data

    def put_internal_extension_points_with_http_info(self, secret, body, **kwargs):  # noqa: E501
        """Create and update service extension point.  # noqa: E501

        This API is used to create and update internal extension points for a service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_internal_extension_points_with_http_info(secret, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret: zen-service-broker-secret (required)
        :param Body body: Payload to create new internal extension points (array of extension objects) (required)
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secret', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_internal_extension_points" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'secret' is set
        if ('secret' not in params or
                params['secret'] is None):
            raise ValueError("Missing the required parameter `secret` when calling `put_internal_extension_points`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_internal_extension_points`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'secret' in params:
            header_params['secret'] = params['secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/internal/extension_points', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_internal_extensions(self, secret, body, **kwargs):  # noqa: E501
        """Create and update service extensions.  # noqa: E501

        This API is used to create and update internal extensions for a service. It maintains a collection tied to source_id provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_internal_extensions(secret, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret: zen-service-broker-secret (required)
        :param Body1 body: Payload to create new internal extensions (array of extension objects) (required)
        :param bool draft_extensions: Sets all extensions to disabled if set to true. Enables all extensions otherwise. Should be set to true if operator has not validated the extensions.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_internal_extensions_with_http_info(secret, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_internal_extensions_with_http_info(secret, body, **kwargs)  # noqa: E501
            return data

    def put_internal_extensions_with_http_info(self, secret, body, **kwargs):  # noqa: E501
        """Create and update service extensions.  # noqa: E501

        This API is used to create and update internal extensions for a service. It maintains a collection tied to source_id provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_internal_extensions_with_http_info(secret, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret: zen-service-broker-secret (required)
        :param Body1 body: Payload to create new internal extensions (array of extension objects) (required)
        :param bool draft_extensions: Sets all extensions to disabled if set to true. Enables all extensions otherwise. Should be set to true if operator has not validated the extensions.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secret', 'body', 'draft_extensions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_internal_extensions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'secret' is set
        if ('secret' not in params or
                params['secret'] is None):
            raise ValueError("Missing the required parameter `secret` when calling `put_internal_extensions`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_internal_extensions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'draft_extensions' in params:
            query_params.append(('draft_extensions', params['draft_extensions']))  # noqa: E501

        header_params = {}
        if 'secret' in params:
            header_params['secret'] = params['secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/internal/extensions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
