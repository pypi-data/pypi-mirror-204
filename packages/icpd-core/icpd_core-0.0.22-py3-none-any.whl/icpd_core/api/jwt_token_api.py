# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from icpd_core.api_client import ApiClient


class JWTTokenApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_internal_svc_token(self, secret, **kwargs):  # noqa: E501
        """Get auth token for coreapi server  # noqa: E501

        Get token enabling authentication to zen-core-api  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_internal_svc_token(secret, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret: zen-service-broker-secret (required)
        :param str uid: User ID to encode in the token. Defaults to internal user if not provided.
        :param str username: Username to encode in the token. Defaults to internal user if not provided.
        :param str display_name: User display_name to encode in the token. Defaults to internal user if not provided.
        :param str permissions: Comma-separated string of permissions to encode in the token.
        :param int expiration_time: TTL of the token in minutes. Defaults to 5 minutes if not provided.
        :return: SuccessToken
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_internal_svc_token_with_http_info(secret, **kwargs)  # noqa: E501
        else:
            (data) = self.get_internal_svc_token_with_http_info(secret, **kwargs)  # noqa: E501
            return data

    def get_internal_svc_token_with_http_info(self, secret, **kwargs):  # noqa: E501
        """Get auth token for coreapi server  # noqa: E501

        Get token enabling authentication to zen-core-api  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_internal_svc_token_with_http_info(secret, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret: zen-service-broker-secret (required)
        :param str uid: User ID to encode in the token. Defaults to internal user if not provided.
        :param str username: Username to encode in the token. Defaults to internal user if not provided.
        :param str display_name: User display_name to encode in the token. Defaults to internal user if not provided.
        :param str permissions: Comma-separated string of permissions to encode in the token.
        :param int expiration_time: TTL of the token in minutes. Defaults to 5 minutes if not provided.
        :return: SuccessToken
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secret', 'uid', 'username', 'display_name', 'permissions', 'expiration_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_internal_svc_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'secret' is set
        if ('secret' not in params or
                params['secret'] is None):
            raise ValueError("Missing the required parameter `secret` when calling `get_internal_svc_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'display_name' in params:
            query_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'permissions' in params:
            query_params.append(('permissions', params['permissions']))  # noqa: E501
        if 'expiration_time' in params:
            query_params.append(('expiration_time', params['expiration_time']))  # noqa: E501

        header_params = {}
        if 'secret' in params:
            header_params['secret'] = params['secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/internal/v1/service_token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessToken',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_jwt_token(self, secret, **kwargs):  # noqa: E501
        """Get JWT token  # noqa: E501

        Provide the secret to get the jwt token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jwt_token(secret, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret: Value of kubernetes secret called zen-service-broker-secret (required)
        :param str timeout: Expiration time in hours, 0 is never expiring token
        :return: SuccessToken
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_jwt_token_with_http_info(secret, **kwargs)  # noqa: E501
        else:
            (data) = self.get_jwt_token_with_http_info(secret, **kwargs)  # noqa: E501
            return data

    def get_jwt_token_with_http_info(self, secret, **kwargs):  # noqa: E501
        """Get JWT token  # noqa: E501

        Provide the secret to get the jwt token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jwt_token_with_http_info(secret, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret: Value of kubernetes secret called zen-service-broker-secret (required)
        :param str timeout: Expiration time in hours, 0 is never expiring token
        :return: SuccessToken
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secret', 'timeout']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jwt_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'secret' is set
        if ('secret' not in params or
                params['secret'] is None):
            raise ValueError("Missing the required parameter `secret` when calling `get_jwt_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'timeout' in params:
            query_params.append(('timeout', params['timeout']))  # noqa: E501

        header_params = {}
        if 'secret' in params:
            header_params['secret'] = params['secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/internal/v1/token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessToken',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
