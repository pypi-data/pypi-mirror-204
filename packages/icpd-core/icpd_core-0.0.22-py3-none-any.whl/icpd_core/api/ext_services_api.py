# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from icpd_core.api_client import ApiClient


class ExtServicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def associate_assets_to_group(self, body, **kwargs):  # noqa: E501
        """Post assets to a Guardium group  # noqa: E501

        Allows a user to post list of assets to Guardium group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_assets_to_group(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GuardiumAssetsRequest body: List of assets selected to be assigned to a particular Guardium group and connection id associated with Guardium host. (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponseWithObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_assets_to_group_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_assets_to_group_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def associate_assets_to_group_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post assets to a Guardium group  # noqa: E501

        Allows a user to post list of assets to Guardium group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_assets_to_group_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GuardiumAssetsRequest body: List of assets selected to be assigned to a particular Guardium group and connection id associated with Guardium host. (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponseWithObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_assets_to_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `associate_assets_to_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/ext_services/guardium/groups/assets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponseWithObj',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_guardium_token(self, body, **kwargs):  # noqa: E501
        """Retrieve Guardium token  # noqa: E501

        Retrieve Guardium token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_guardium_token(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GuardiumTokenRequest body: Retrieve Guardium token given username, password, client id, client password (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_guardium_token_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_guardium_token_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def generate_guardium_token_with_http_info(self, body, **kwargs):  # noqa: E501
        """Retrieve Guardium token  # noqa: E501

        Retrieve Guardium token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_guardium_token_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GuardiumTokenRequest body: Retrieve Guardium token given username, password, client id, client password (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_guardium_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `generate_guardium_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/ext_services/guardium/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_groups(self, guardium_auth_token, name, host, port, **kwargs):  # noqa: E501
        """Get Guardium groups based on input string.  # noqa: E501

        Returns all thr Guardium groups that matches the input string  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_groups(guardium_auth_token, name, host, port, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guardium_auth_token: Guardium authentication token. (required)
        :param str name: Guardium group name. (required)
        :param str host: Guardium host name. (required)
        :param int port: Guardium port. (required)
        :param str jwt_auth_user_payload: Supplied by proxy. Do NOT add your own value.
        :return: SuccessGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_groups_with_http_info(guardium_auth_token, name, host, port, **kwargs)  # noqa: E501
        else:
            (data) = self.get_groups_with_http_info(guardium_auth_token, name, host, port, **kwargs)  # noqa: E501
            return data

    def get_groups_with_http_info(self, guardium_auth_token, name, host, port, **kwargs):  # noqa: E501
        """Get Guardium groups based on input string.  # noqa: E501

        Returns all thr Guardium groups that matches the input string  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_groups_with_http_info(guardium_auth_token, name, host, port, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guardium_auth_token: Guardium authentication token. (required)
        :param str name: Guardium group name. (required)
        :param str host: Guardium host name. (required)
        :param int port: Guardium port. (required)
        :param str jwt_auth_user_payload: Supplied by proxy. Do NOT add your own value.
        :return: SuccessGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guardium_auth_token', 'name', 'host', 'port', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guardium_auth_token' is set
        if ('guardium_auth_token' not in params or
                params['guardium_auth_token'] is None):
            raise ValueError("Missing the required parameter `guardium_auth_token` when calling `get_groups`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_groups`")  # noqa: E501
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_groups`")  # noqa: E501
        # verify the required parameter 'port' is set
        if ('port' not in params or
                params['port'] is None):
            raise ValueError("Missing the required parameter `port` when calling `get_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'host' in params:
            query_params.append(('host', params['host']))  # noqa: E501
        if 'port' in params:
            query_params.append(('port', params['port']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'guardium_auth_token' in params:
            header_params['guardium-auth-token'] = params['guardium_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/ext_services/guardium/group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
