# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from icpd_core.api_client import ApiClient


class ConnectionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_connection(self, id, **kwargs):  # noqa: E501
        """Delete a connection.  # noqa: E501

        Deletes a connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_connection(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param int instance_id:
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_connection_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_connection_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_connection_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a connection.  # noqa: E501

        Deletes a connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_connection_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param int instance_id:
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'jwt_auth_user_payload', 'instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'instance_id' in params:
            query_params.append(('instance_id', params['instance_id']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/connections/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_connection_analytics_projects_association(self, id, body, **kwargs):  # noqa: E501
        """Dissociate a connection from projects  # noqa: E501

        Dissociate the connection from the list of analytics projects. In this initial implementation, the actual deletion of the connection from the analytics projects is ommited.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_connection_analytics_projects_association(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param ConnectionAssociationObject body: Connection info (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_connection_analytics_projects_association_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_connection_analytics_projects_association_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def delete_connection_analytics_projects_association_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Dissociate a connection from projects  # noqa: E501

        Dissociate the connection from the list of analytics projects. In this initial implementation, the actual deletion of the connection from the analytics projects is ommited.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_connection_analytics_projects_association_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param ConnectionAssociationObject body: Connection info (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_connection_analytics_projects_association" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_connection_analytics_projects_association`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_connection_analytics_projects_association`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/connections/{id}/analytics_projects', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_handle_connection_extensions(self, extension_point_id, body, **kwargs):  # noqa: E501
        """Handler to process delete of the extension identified by extension_point_id  # noqa: E501

        This API is used to handle delete when an extension of type extension_point_id is deleted for connections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_handle_connection_extensions(extension_point_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str extension_point_id: (required)
        :param ExtensionObjectWithSource body: Payload that contains the extension object store (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_handle_connection_extensions_with_http_info(extension_point_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_handle_connection_extensions_with_http_info(extension_point_id, body, **kwargs)  # noqa: E501
            return data

    def delete_handle_connection_extensions_with_http_info(self, extension_point_id, body, **kwargs):  # noqa: E501
        """Handler to process delete of the extension identified by extension_point_id  # noqa: E501

        This API is used to handle delete when an extension of type extension_point_id is deleted for connections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_handle_connection_extensions_with_http_info(extension_point_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str extension_point_id: (required)
        :param ExtensionObjectWithSource body: Payload that contains the extension object store (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['extension_point_id', 'body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_handle_connection_extensions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'extension_point_id' is set
        if ('extension_point_id' not in params or
                params['extension_point_id'] is None):
            raise ValueError("Missing the required parameter `extension_point_id` when calling `delete_handle_connection_extensions`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_handle_connection_extensions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extension_point_id' in params:
            path_params['extension_point_id'] = params['extension_point_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/connections/extensions_handler/{extension_point_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_connection(self, id, **kwargs):  # noqa: E501
        """Get the details of a connection  # noqa: E501

        Get the details for a specific connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connection(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str project_id:
        :param int instance_id:
        :return: SuccessGetConnectionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_connection_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_connection_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_connection_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the details of a connection  # noqa: E501

        Get the details for a specific connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connection_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str project_id:
        :param int instance_id:
        :return: SuccessGetConnectionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'jwt_auth_user_payload', 'project_id', 'instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'instance_id' in params:
            query_params.append(('instance_id', params['instance_id']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/connections/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetConnectionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_connection_v3(self, name, **kwargs):  # noqa: E501
        """Get the connection details by providing the name and optionally the class  # noqa: E501

        Get the details for a specific connection by name and class  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connection_v3(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str _class:
        :return: SuccessGetConnectionV3Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_connection_v3_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_connection_v3_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_connection_v3_with_http_info(self, name, **kwargs):  # noqa: E501
        """Get the connection details by providing the name and optionally the class  # noqa: E501

        Get the details for a specific connection by name and class  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connection_v3_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str _class:
        :return: SuccessGetConnectionV3Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'jwt_auth_user_payload', '_class']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_connection_v3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_connection_v3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if '_class' in params:
            query_params.append(('class', params['_class']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/connections/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetConnectionV3Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_connections(self, **kwargs):  # noqa: E501
        """Get the list of connections.  # noqa: E501

        Retrieve the list of connections and details for each connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connections(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str project_id:
        :param str context:
        :param int instance_id:
        :return: SuccessGetConnectionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_connections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_connections_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_connections_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of connections.  # noqa: E501

        Retrieve the list of connections and details for each connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str project_id:
        :param str context:
        :param int instance_id:
        :return: SuccessGetConnectionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'project_id', 'context', 'instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_connections" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'context' in params:
            query_params.append(('context', params['context']))  # noqa: E501
        if 'instance_id' in params:
            query_params.append(('instance_id', params['instance_id']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetConnectionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_connections_types(self, **kwargs):  # noqa: E501
        """Get a list of all connections types  # noqa: E501

        Retrieve the list of connections types and details for each connection type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connections_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str context:
        :return: SuccessGetConnectionsTypesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_connections_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_connections_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_connections_types_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all connections types  # noqa: E501

        Retrieve the list of connections types and details for each connection type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connections_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str context:
        :return: SuccessGetConnectionsTypesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'context']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_connections_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'context' in params:
            query_params.append(('context', params['context']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/connections/types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetConnectionsTypesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_connections_v3(self, **kwargs):  # noqa: E501
        """Get the list of connections.  # noqa: E501

        Returns a combined list of ICP4D service instances connections and external connections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connections_v3(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str _class:
        :return: SuccessGetConnectionsV3Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_connections_v3_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_connections_v3_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_connections_v3_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of connections.  # noqa: E501

        Returns a combined list of ICP4D service instances connections and external connections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connections_v3_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str _class:
        :return: SuccessGetConnectionsV3Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', '_class']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_connections_v3" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_class' in params:
            query_params.append(('class', params['_class']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetConnectionsV3Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_connections(self, **kwargs):  # noqa: E501
        """Get the list of available connections.  # noqa: E501

        Retrieve the list of connections and details for each connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_connections(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str project_id:
        :return: SuccessGetResponse1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_connections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_project_connections_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_project_connections_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of available connections.  # noqa: E501

        Retrieve the list of connections and details for each connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_connections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str project_id:
        :return: SuccessGetResponse1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_connections" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/project_connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetResponse1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_connection(self, id, body, **kwargs):  # noqa: E501
        """Update connection info  # noqa: E501

        Update connection info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_connection(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param ConnectionObject body: Connection info (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param int instance_id:
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_connection_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_connection_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def patch_connection_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Update connection info  # noqa: E501

        Update connection info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_connection_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param ConnectionObject body: Connection info (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param int instance_id:
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'jwt_auth_user_payload', 'instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_connection`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'instance_id' in params:
            query_params.append(('instance_id', params['instance_id']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/connections/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_connection_credentials(self, id, body, **kwargs):  # noqa: E501
        """Update credentials for a particular user and connectionId  # noqa: E501

        Update credentials  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_connection_credentials(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param ConnectionCredentials body: Connection info (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_connection_credentials_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_connection_credentials_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def patch_connection_credentials_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Update credentials for a particular user and connectionId  # noqa: E501

        Update credentials  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_connection_credentials_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param ConnectionCredentials body: Connection info (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_connection_credentials" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_connection_credentials`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_connection_credentials`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/connections/{id}/credentials', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_handle_connection_extensions(self, extension_point_id, body, **kwargs):  # noqa: E501
        """Handler to process the update of the extension for the given extension_point_id  # noqa: E501

        This API is used to handle the update of an extension of type extension_point_id for connections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_handle_connection_extensions(extension_point_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str extension_point_id: (required)
        :param ExtensionObjectWithSource body: Payload to create a new extension store (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_handle_connection_extensions_with_http_info(extension_point_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_handle_connection_extensions_with_http_info(extension_point_id, body, **kwargs)  # noqa: E501
            return data

    def patch_handle_connection_extensions_with_http_info(self, extension_point_id, body, **kwargs):  # noqa: E501
        """Handler to process the update of the extension for the given extension_point_id  # noqa: E501

        This API is used to handle the update of an extension of type extension_point_id for connections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_handle_connection_extensions_with_http_info(extension_point_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str extension_point_id: (required)
        :param ExtensionObjectWithSource body: Payload to create a new extension store (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['extension_point_id', 'body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_handle_connection_extensions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'extension_point_id' is set
        if ('extension_point_id' not in params or
                params['extension_point_id'] is None):
            raise ValueError("Missing the required parameter `extension_point_id` when calling `patch_handle_connection_extensions`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_handle_connection_extensions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extension_point_id' in params:
            path_params['extension_point_id'] = params['extension_point_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/connections/extensions_handler/{extension_point_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_connection(self, body, **kwargs):  # noqa: E501
        """POST a connection information to the backend.  # noqa: E501

        This api allows the user to post the connection in the zen-metastoredb backend store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_connection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectionObject body: Connections body that needs to be store in db (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str context:
        :param int instance_id:
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_connection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_connection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_connection_with_http_info(self, body, **kwargs):  # noqa: E501
        """POST a connection information to the backend.  # noqa: E501

        This api allows the user to post the connection in the zen-metastoredb backend store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_connection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectionObject body: Connections body that needs to be store in db (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str context:
        :param int instance_id:
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload', 'context', 'instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'context' in params:
            query_params.append(('context', params['context']))  # noqa: E501
        if 'instance_id' in params:
            query_params.append(('instance_id', params['instance_id']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/connections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_connection_analytics_projects_association(self, id, body, **kwargs):  # noqa: E501
        """Associatiate a connection to projects  # noqa: E501

        Associates the connection to the corresponding analytics project. In this initial implementation, the actual creation of the entity in the analytics projects is ommited.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_connection_analytics_projects_association(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Body7 body: Connection info (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_connection_analytics_projects_association_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_connection_analytics_projects_association_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def post_connection_analytics_projects_association_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Associatiate a connection to projects  # noqa: E501

        Associates the connection to the corresponding analytics project. In this initial implementation, the actual creation of the entity in the analytics projects is ommited.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_connection_analytics_projects_association_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Body7 body: Connection info (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_connection_analytics_projects_association" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_connection_analytics_projects_association`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_connection_analytics_projects_association`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/connections/{id}/analytics_projects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dv_connection(self, id, body, **kwargs):  # noqa: E501
        """POST a connection to DV  # noqa: E501

        POST a connection to DV  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dv_connection(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param ConnectionObject body: Connections body that needs to be passed to IGC (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dv_connection_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dv_connection_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def post_dv_connection_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """POST a connection to DV  # noqa: E501

        POST a connection to DV  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dv_connection_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param ConnectionObject body: Connections body that needs to be passed to IGC (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dv_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_dv_connection`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dv_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/connections/{id}/data_virtualization', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_handle_connection_extensions(self, extension_point_id, body, **kwargs):  # noqa: E501
        """Handler to process the creation of the extension for the given extension_point_id  # noqa: E501

        This API is used to handle the creation of an extension of type extension_point_id for connections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_handle_connection_extensions(extension_point_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str extension_point_id: (required)
        :param ExtensionObjectWithSource body: Payload to create a new extension store (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_handle_connection_extensions_with_http_info(extension_point_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_handle_connection_extensions_with_http_info(extension_point_id, body, **kwargs)  # noqa: E501
            return data

    def post_handle_connection_extensions_with_http_info(self, extension_point_id, body, **kwargs):  # noqa: E501
        """Handler to process the creation of the extension for the given extension_point_id  # noqa: E501

        This API is used to handle the creation of an extension of type extension_point_id for connections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_handle_connection_extensions_with_http_info(extension_point_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str extension_point_id: (required)
        :param ExtensionObjectWithSource body: Payload to create a new extension store (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['extension_point_id', 'body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_handle_connection_extensions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'extension_point_id' is set
        if ('extension_point_id' not in params or
                params['extension_point_id'] is None):
            raise ValueError("Missing the required parameter `extension_point_id` when calling `post_handle_connection_extensions`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_handle_connection_extensions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extension_point_id' in params:
            path_params['extension_point_id'] = params['extension_point_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/connections/extensions_handler/{extension_point_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_igc_connection(self, id, body, **kwargs):  # noqa: E501
        """POST a connection to the governance catalog(UGI)  # noqa: E501

        POST a connection to the governance catalog (UGI) or also referred as IGC  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_igc_connection(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param ConnectionObjectIGC body: Connections body that needs to be passed to IGC (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_igc_connection_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_igc_connection_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def post_igc_connection_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """POST a connection to the governance catalog(UGI)  # noqa: E501

        POST a connection to the governance catalog (UGI) or also referred as IGC  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_igc_connection_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param ConnectionObjectIGC body: Connections body that needs to be passed to IGC (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_igc_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_igc_connection`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_igc_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/connections/{id}/catalog', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
