# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from icpd_core.api_client import ApiClient


class EdgeApplicationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def define_edge_application(self, body, **kwargs):  # noqa: E501
        """Define edge application  # noqa: E501

        Define edge application metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.define_edge_application(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAddonObj body: Edge application metadata that needs to be added to the table in the database (required)
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request.
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.define_edge_application_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.define_edge_application_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def define_edge_application_with_http_info(self, body, **kwargs):  # noqa: E501
        """Define edge application  # noqa: E501

        Define edge application metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.define_edge_application_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAddonObj body: Edge application metadata that needs to be added to the table in the database (required)
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request.
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method define_edge_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `define_edge_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/edge_applications', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_edge_application(self, body, **kwargs):  # noqa: E501
        """Delete edge application  # noqa: E501

        Delete metadata about the edge application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_edge_application(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteApplicationObj body: Object containing the key and version of the edge application (required)
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request.
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :param bool purge: Set to true to force delete/stop provisioned service instances
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_edge_application_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_edge_application_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def delete_edge_application_with_http_info(self, body, **kwargs):  # noqa: E501
        """Delete edge application  # noqa: E501

        Delete metadata about the edge application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_edge_application_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteApplicationObj body: Object containing the key and version of the edge application (required)
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request.
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :param bool purge: Set to true to force delete/stop provisioned service instances
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload', 'authorization', 'purge']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_edge_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_edge_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'purge' in params:
            query_params.append(('purge', params['purge']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/edge_applications', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_edge_application_instance(self, body, **kwargs):  # noqa: E501
        """Delete edge application instance  # noqa: E501

        Stop/Delete application instance running on edge node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_edge_application_instance(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceInstanceObj body: Object containing the instance_id of the edge application instance (required)
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request.
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :param bool purge: Set to true to force delete provisioned service instance
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_edge_application_instance_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_edge_application_instance_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def delete_edge_application_instance_with_http_info(self, body, **kwargs):  # noqa: E501
        """Delete edge application instance  # noqa: E501

        Stop/Delete application instance running on edge node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_edge_application_instance_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceInstanceObj body: Object containing the instance_id of the edge application instance (required)
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request.
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :param bool purge: Set to true to force delete provisioned service instance
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload', 'authorization', 'purge']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_edge_application_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_edge_application_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'purge' in params:
            query_params.append(('purge', params['purge']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/edge_applications/instances', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deploy_edge_application(self, body, **kwargs):  # noqa: E501
        """Deploy a new edge application to micro edge targets  # noqa: E501

        This api deploys an application package to multiple edge nodes. It calls the edge bedrock in each edge target which provisions the application in that micro-edge node.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deploy_edge_application(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeployApplicationInstance body: information about the service instance that needs to be provisioned (required)
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deploy_edge_application_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.deploy_edge_application_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def deploy_edge_application_with_http_info(self, body, **kwargs):  # noqa: E501
        """Deploy a new edge application to micro edge targets  # noqa: E501

        This api deploys an application package to multiple edge nodes. It calls the edge bedrock in each edge target which provisions the application in that micro-edge node.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deploy_edge_application_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeployApplicationInstance body: information about the service instance that needs to be provisioned (required)
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploy_edge_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `deploy_edge_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/edge_applications/instances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_certs(self, **kwargs):  # noqa: E501
        """Download certs for Edge setup  # noqa: E501

        this api retrieves the certs needed to work with edge bedrock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_certs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_certs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.download_certs_with_http_info(**kwargs)  # noqa: E501
            return data

    def download_certs_with_http_info(self, **kwargs):  # noqa: E501
        """Download certs for Edge setup  # noqa: E501

        this api retrieves the certs needed to work with edge bedrock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_certs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_certs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/edge_applications/certs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_custom_application_metrics(self, target, **kwargs):  # noqa: E501
        """Download custom metrics file from the bedrock  # noqa: E501

        this api retrieves the custom metrics file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_custom_application_metrics(target, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target: Target instance (required)
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_custom_application_metrics_with_http_info(target, **kwargs)  # noqa: E501
        else:
            (data) = self.download_custom_application_metrics_with_http_info(target, **kwargs)  # noqa: E501
            return data

    def download_custom_application_metrics_with_http_info(self, target, **kwargs):  # noqa: E501
        """Download custom metrics file from the bedrock  # noqa: E501

        this api retrieves the custom metrics file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_custom_application_metrics_with_http_info(target, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target: Target instance (required)
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target', 'jwt_auth_user_payload', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_custom_application_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target' is set
        if ('target' not in params or
                params['target'] is None):
            raise ValueError("Missing the required parameter `target` when calling `download_custom_application_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'target' in params:
            query_params.append(('target', params['target']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/edge_applications/custom_metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_edge_application_instance_log(self, instance_name, target, **kwargs):  # noqa: E501
        """Download application instance log file from the bedrock  # noqa: E501

        this api retrieves the application instance log file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_edge_application_instance_log(instance_name, target, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: instance name of the application deployed on the edge (required)
        :param str target: Target instance (required)
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_edge_application_instance_log_with_http_info(instance_name, target, **kwargs)  # noqa: E501
        else:
            (data) = self.download_edge_application_instance_log_with_http_info(instance_name, target, **kwargs)  # noqa: E501
            return data

    def download_edge_application_instance_log_with_http_info(self, instance_name, target, **kwargs):  # noqa: E501
        """Download application instance log file from the bedrock  # noqa: E501

        this api retrieves the application instance log file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_edge_application_instance_log_with_http_info(instance_name, target, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: instance name of the application deployed on the edge (required)
        :param str target: Target instance (required)
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'target', 'jwt_auth_user_payload', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_edge_application_instance_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `download_edge_application_instance_log`")  # noqa: E501
        # verify the required parameter 'target' is set
        if ('target' not in params or
                params['target'] is None):
            raise ValueError("Missing the required parameter `target` when calling `download_edge_application_instance_log`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'instance_name' in params:
            query_params.append(('instance_name', params['instance_name']))  # noqa: E501
        if 'target' in params:
            query_params.append(('target', params['target']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/edge_applications/log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_edge_installer(self, **kwargs):  # noqa: E501
        """Download edge installer  # noqa: E501

        this api retrieves the rpm file to be installed at the edge node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_edge_installer(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_edge_installer_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.download_edge_installer_with_http_info(**kwargs)  # noqa: E501
            return data

    def download_edge_installer_with_http_info(self, **kwargs):  # noqa: E501
        """Download edge installer  # noqa: E501

        this api retrieves the rpm file to be installed at the edge node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_edge_installer_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_edge_installer" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/edge_applications/installer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_edge_application_instances(self, **kwargs):  # noqa: E501
        """Get a list of edge application instances  # noqa: E501

        Get a list of application instances deployed on the edge.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_edge_application_instances(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request.
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :param str edge_application_id: Pass optional URL encoded to get details of a specific edge application
        :param str target: Pass optional value here if request is to be queried for a particular edge instance
        :return: SuccessGetResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_edge_application_instances_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_edge_application_instances_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_edge_application_instances_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of edge application instances  # noqa: E501

        Get a list of application instances deployed on the edge.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_edge_application_instances_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request.
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :param str edge_application_id: Pass optional URL encoded to get details of a specific edge application
        :param str target: Pass optional value here if request is to be queried for a particular edge instance
        :return: SuccessGetResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'authorization', 'edge_application_id', 'target']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_edge_application_instances" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'edge_application_id' in params:
            query_params.append(('edge_application_id', params['edge_application_id']))  # noqa: E501
        if 'target' in params:
            query_params.append(('target', params['target']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/edge_applications/instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_edge_application_metrics(self, target, **kwargs):  # noqa: E501
        """Get metrics from an edge system  # noqa: E501

        this api retrieves CPU and Memory usage for instances provisioned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_edge_application_metrics(target, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target: Target instance (required)
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request.
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :return: SuccessGetContainerMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_edge_application_metrics_with_http_info(target, **kwargs)  # noqa: E501
        else:
            (data) = self.get_edge_application_metrics_with_http_info(target, **kwargs)  # noqa: E501
            return data

    def get_edge_application_metrics_with_http_info(self, target, **kwargs):  # noqa: E501
        """Get metrics from an edge system  # noqa: E501

        this api retrieves CPU and Memory usage for instances provisioned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_edge_application_metrics_with_http_info(target, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target: Target instance (required)
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request.
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :return: SuccessGetContainerMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target', 'jwt_auth_user_payload', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_edge_application_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target' is set
        if ('target' not in params or
                params['target'] is None):
            raise ValueError("Missing the required parameter `target` when calling `get_edge_application_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'target' in params:
            query_params.append(('target', params['target']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/edge_applications/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetContainerMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_edge_applications(self, **kwargs):  # noqa: E501
        """Get a list of edge applications  # noqa: E501

        Get a list of applications deployed on the edge.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_edge_applications(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request.
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :param str edge_application_id: Pass optional URL encoded to get details of a specific edge application
        :param str target: Pass optional value here if request is to be queried for a particular edge instance
        :return: SuccessGetResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_edge_applications_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_edge_applications_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_edge_applications_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of edge applications  # noqa: E501

        Get a list of applications deployed on the edge.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_edge_applications_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request.
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :param str edge_application_id: Pass optional URL encoded to get details of a specific edge application
        :param str target: Pass optional value here if request is to be queried for a particular edge instance
        :return: SuccessGetResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'authorization', 'edge_application_id', 'target']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_edge_applications" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'edge_application_id' in params:
            query_params.append(('edge_application_id', params['edge_application_id']))  # noqa: E501
        if 'target' in params:
            query_params.append(('target', params['target']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/edge_applications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def refresh_edge_metrics(self, **kwargs):  # noqa: E501
        """Synchronize metrics for all edge applications  # noqa: E501

        This API gets metrics from all edge applications and saves it in the meta-store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_edge_metrics(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :param str instance_id: id of the deployed edge application
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.refresh_edge_metrics_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.refresh_edge_metrics_with_http_info(**kwargs)  # noqa: E501
            return data

    def refresh_edge_metrics_with_http_info(self, **kwargs):  # noqa: E501
        """Synchronize metrics for all edge applications  # noqa: E501

        This API gets metrics from all edge applications and saves it in the meta-store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_edge_metrics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :param str instance_id: id of the deployed edge application
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'authorization', 'instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_edge_metrics" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'instance_id' in params:
            query_params.append(('instance_id', params['instance_id']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/edge_applications/metrics/refresh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def refresh_edge_status(self, **kwargs):  # noqa: E501
        """Synchronize the status for all edge applications  # noqa: E501

        This API gets status from all edge applications and saves it in the meta-store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_edge_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: id of the deployed edge application
        :param str application_id: id of the edge application
        :param str target: id of the edge system
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.refresh_edge_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.refresh_edge_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def refresh_edge_status_with_http_info(self, **kwargs):  # noqa: E501
        """Synchronize the status for all edge applications  # noqa: E501

        This API gets status from all edge applications and saves it in the meta-store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_edge_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: id of the deployed edge application
        :param str application_id: id of the edge application
        :param str target: id of the edge system
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_id', 'application_id', 'target', 'jwt_auth_user_payload', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_edge_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'instance_id' in params:
            query_params.append(('instance_id', params['instance_id']))  # noqa: E501
        if 'application_id' in params:
            query_params.append(('application_id', params['application_id']))  # noqa: E501
        if 'target' in params:
            query_params.append(('target', params['target']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/edge_applications/status/refresh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restart_edge_application_instance(self, body, **kwargs):  # noqa: E501
        """Restart edge application instance  # noqa: E501

        Restart application instance running on edge node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_edge_application_instance(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceInstanceObj body: Object containing the instance_id of the edge application instance (required)
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request.
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restart_edge_application_instance_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.restart_edge_application_instance_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def restart_edge_application_instance_with_http_info(self, body, **kwargs):  # noqa: E501
        """Restart edge application instance  # noqa: E501

        Restart application instance running on edge node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_edge_application_instance_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceInstanceObj body: Object containing the instance_id of the edge application instance (required)
        :param str jwt_auth_user_payload: Added by zen-core-api to identify the current user that triggered the request.
        :param str authorization: Bearer token that includes user's platform permission. Can be used to communicate with other CPD services.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restart_edge_application_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `restart_edge_application_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/edge_applications/instances', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
