# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class QuickNavDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label': 'str',
        'nav_link': 'str',
        'window_open_target': 'str'
    }

    attribute_map = {
        'label': 'label',
        'nav_link': 'nav_link',
        'window_open_target': 'window_open_target'
    }

    def __init__(self, label=None, nav_link=None, window_open_target=None):  # noqa: E501
        """QuickNavDetails - a model defined in Swagger"""  # noqa: E501

        self._label = None
        self._nav_link = None
        self._window_open_target = None
        self.discriminator = None

        self.label = label
        self.nav_link = nav_link
        if window_open_target is not None:
            self.window_open_target = window_open_target

    @property
    def label(self):
        """Gets the label of this QuickNavDetails.  # noqa: E501

        label of the link  # noqa: E501

        :return: The label of this QuickNavDetails.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this QuickNavDetails.

        label of the link  # noqa: E501

        :param label: The label of this QuickNavDetails.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def nav_link(self):
        """Gets the nav_link of this QuickNavDetails.  # noqa: E501

        URL  # noqa: E501

        :return: The nav_link of this QuickNavDetails.  # noqa: E501
        :rtype: str
        """
        return self._nav_link

    @nav_link.setter
    def nav_link(self, nav_link):
        """Sets the nav_link of this QuickNavDetails.

        URL  # noqa: E501

        :param nav_link: The nav_link of this QuickNavDetails.  # noqa: E501
        :type: str
        """
        if nav_link is None:
            raise ValueError("Invalid value for `nav_link`, must not be `None`")  # noqa: E501

        self._nav_link = nav_link

    @property
    def window_open_target(self):
        """Gets the window_open_target of this QuickNavDetails.  # noqa: E501

        target for window.open()  # noqa: E501

        :return: The window_open_target of this QuickNavDetails.  # noqa: E501
        :rtype: str
        """
        return self._window_open_target

    @window_open_target.setter
    def window_open_target(self, window_open_target):
        """Sets the window_open_target of this QuickNavDetails.

        target for window.open()  # noqa: E501

        :param window_open_target: The window_open_target of this QuickNavDetails.  # noqa: E501
        :type: str
        """

        self._window_open_target = window_open_target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuickNavDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuickNavDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
