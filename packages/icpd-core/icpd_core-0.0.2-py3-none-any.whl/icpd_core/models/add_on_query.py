# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AddOnQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_management_enable': 'str',
        'add_on_type': 'str',
        'max_instances': 'str',
        'pak': 'str',
        'state': 'str',
        'type': 'str',
        'vendor': 'str',
        'version': 'str'
    }

    attribute_map = {
        'access_management_enable': 'access_management_enable',
        'add_on_type': 'add_on_type',
        'max_instances': 'max_instances',
        'pak': 'pak',
        'state': 'state',
        'type': 'type',
        'vendor': 'vendor',
        'version': 'version'
    }

    def __init__(self, access_management_enable=None, add_on_type=None, max_instances=None, pak=None, state=None, type=None, vendor=None, version=None):  # noqa: E501
        """AddOnQuery - a model defined in Swagger"""  # noqa: E501

        self._access_management_enable = None
        self._add_on_type = None
        self._max_instances = None
        self._pak = None
        self._state = None
        self._type = None
        self._vendor = None
        self._version = None
        self.discriminator = None

        if access_management_enable is not None:
            self.access_management_enable = access_management_enable
        if add_on_type is not None:
            self.add_on_type = add_on_type
        if max_instances is not None:
            self.max_instances = max_instances
        if pak is not None:
            self.pak = pak
        if state is not None:
            self.state = state
        if type is not None:
            self.type = type
        if vendor is not None:
            self.vendor = vendor
        if version is not None:
            self.version = version

    @property
    def access_management_enable(self):
        """Gets the access_management_enable of this AddOnQuery.  # noqa: E501


        :return: The access_management_enable of this AddOnQuery.  # noqa: E501
        :rtype: str
        """
        return self._access_management_enable

    @access_management_enable.setter
    def access_management_enable(self, access_management_enable):
        """Sets the access_management_enable of this AddOnQuery.


        :param access_management_enable: The access_management_enable of this AddOnQuery.  # noqa: E501
        :type: str
        """

        self._access_management_enable = access_management_enable

    @property
    def add_on_type(self):
        """Gets the add_on_type of this AddOnQuery.  # noqa: E501


        :return: The add_on_type of this AddOnQuery.  # noqa: E501
        :rtype: str
        """
        return self._add_on_type

    @add_on_type.setter
    def add_on_type(self, add_on_type):
        """Sets the add_on_type of this AddOnQuery.


        :param add_on_type: The add_on_type of this AddOnQuery.  # noqa: E501
        :type: str
        """

        self._add_on_type = add_on_type

    @property
    def max_instances(self):
        """Gets the max_instances of this AddOnQuery.  # noqa: E501


        :return: The max_instances of this AddOnQuery.  # noqa: E501
        :rtype: str
        """
        return self._max_instances

    @max_instances.setter
    def max_instances(self, max_instances):
        """Sets the max_instances of this AddOnQuery.


        :param max_instances: The max_instances of this AddOnQuery.  # noqa: E501
        :type: str
        """

        self._max_instances = max_instances

    @property
    def pak(self):
        """Gets the pak of this AddOnQuery.  # noqa: E501


        :return: The pak of this AddOnQuery.  # noqa: E501
        :rtype: str
        """
        return self._pak

    @pak.setter
    def pak(self, pak):
        """Sets the pak of this AddOnQuery.


        :param pak: The pak of this AddOnQuery.  # noqa: E501
        :type: str
        """

        self._pak = pak

    @property
    def state(self):
        """Gets the state of this AddOnQuery.  # noqa: E501


        :return: The state of this AddOnQuery.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AddOnQuery.


        :param state: The state of this AddOnQuery.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this AddOnQuery.  # noqa: E501


        :return: The type of this AddOnQuery.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AddOnQuery.


        :param type: The type of this AddOnQuery.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def vendor(self):
        """Gets the vendor of this AddOnQuery.  # noqa: E501


        :return: The vendor of this AddOnQuery.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this AddOnQuery.


        :param vendor: The vendor of this AddOnQuery.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def version(self):
        """Gets the version of this AddOnQuery.  # noqa: E501


        :return: The version of this AddOnQuery.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AddOnQuery.


        :param version: The version of this AddOnQuery.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddOnQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOnQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
