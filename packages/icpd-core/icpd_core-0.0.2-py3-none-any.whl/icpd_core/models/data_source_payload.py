# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataSourcePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_sourcetype': 'str',
        'description': 'str',
        'driver_class_name': 'str',
        'host': 'str',
        'livy_url': 'str',
        'name': 'str',
        'password': 'str',
        'port': 'int',
        'shared': 'bool',
        'url': 'str',
        'user': 'str',
        'web_h_cat_url': 'str',
        'web_hdfsurl': 'str',
        'data_source_type_id': 'str',
        'database_type': 'str',
        'jdbc_database': 'str',
        'jdbc_host': 'str',
        'jdbc_port': 'int',
        'server': 'str'
    }

    attribute_map = {
        'data_sourcetype': 'DataSourcetype',
        'description': 'Description',
        'driver_class_name': 'DriverClassName',
        'host': 'Host',
        'livy_url': 'LivyURL',
        'name': 'Name',
        'password': 'Password',
        'port': 'Port',
        'shared': 'Shared',
        'url': 'URL',
        'user': 'User',
        'web_h_cat_url': 'WebHCatURL',
        'web_hdfsurl': 'WebHDFSURL',
        'data_source_type_id': 'data_source_type_id',
        'database_type': 'database_type',
        'jdbc_database': 'jdbc_database',
        'jdbc_host': 'jdbc_host',
        'jdbc_port': 'jdbc_port',
        'server': 'server'
    }

    def __init__(self, data_sourcetype=None, description=None, driver_class_name=None, host=None, livy_url=None, name=None, password=None, port=None, shared=None, url=None, user=None, web_h_cat_url=None, web_hdfsurl=None, data_source_type_id=None, database_type=None, jdbc_database=None, jdbc_host=None, jdbc_port=None, server=None):  # noqa: E501
        """DataSourcePayload - a model defined in Swagger"""  # noqa: E501

        self._data_sourcetype = None
        self._description = None
        self._driver_class_name = None
        self._host = None
        self._livy_url = None
        self._name = None
        self._password = None
        self._port = None
        self._shared = None
        self._url = None
        self._user = None
        self._web_h_cat_url = None
        self._web_hdfsurl = None
        self._data_source_type_id = None
        self._database_type = None
        self._jdbc_database = None
        self._jdbc_host = None
        self._jdbc_port = None
        self._server = None
        self.discriminator = None

        if data_sourcetype is not None:
            self.data_sourcetype = data_sourcetype
        if description is not None:
            self.description = description
        if driver_class_name is not None:
            self.driver_class_name = driver_class_name
        if host is not None:
            self.host = host
        if livy_url is not None:
            self.livy_url = livy_url
        if name is not None:
            self.name = name
        if password is not None:
            self.password = password
        if port is not None:
            self.port = port
        if shared is not None:
            self.shared = shared
        if url is not None:
            self.url = url
        if user is not None:
            self.user = user
        if web_h_cat_url is not None:
            self.web_h_cat_url = web_h_cat_url
        if web_hdfsurl is not None:
            self.web_hdfsurl = web_hdfsurl
        if data_source_type_id is not None:
            self.data_source_type_id = data_source_type_id
        if database_type is not None:
            self.database_type = database_type
        if jdbc_database is not None:
            self.jdbc_database = jdbc_database
        if jdbc_host is not None:
            self.jdbc_host = jdbc_host
        if jdbc_port is not None:
            self.jdbc_port = jdbc_port
        if server is not None:
            self.server = server

    @property
    def data_sourcetype(self):
        """Gets the data_sourcetype of this DataSourcePayload.  # noqa: E501


        :return: The data_sourcetype of this DataSourcePayload.  # noqa: E501
        :rtype: str
        """
        return self._data_sourcetype

    @data_sourcetype.setter
    def data_sourcetype(self, data_sourcetype):
        """Sets the data_sourcetype of this DataSourcePayload.


        :param data_sourcetype: The data_sourcetype of this DataSourcePayload.  # noqa: E501
        :type: str
        """

        self._data_sourcetype = data_sourcetype

    @property
    def description(self):
        """Gets the description of this DataSourcePayload.  # noqa: E501


        :return: The description of this DataSourcePayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataSourcePayload.


        :param description: The description of this DataSourcePayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def driver_class_name(self):
        """Gets the driver_class_name of this DataSourcePayload.  # noqa: E501


        :return: The driver_class_name of this DataSourcePayload.  # noqa: E501
        :rtype: str
        """
        return self._driver_class_name

    @driver_class_name.setter
    def driver_class_name(self, driver_class_name):
        """Sets the driver_class_name of this DataSourcePayload.


        :param driver_class_name: The driver_class_name of this DataSourcePayload.  # noqa: E501
        :type: str
        """

        self._driver_class_name = driver_class_name

    @property
    def host(self):
        """Gets the host of this DataSourcePayload.  # noqa: E501


        :return: The host of this DataSourcePayload.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this DataSourcePayload.


        :param host: The host of this DataSourcePayload.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def livy_url(self):
        """Gets the livy_url of this DataSourcePayload.  # noqa: E501


        :return: The livy_url of this DataSourcePayload.  # noqa: E501
        :rtype: str
        """
        return self._livy_url

    @livy_url.setter
    def livy_url(self, livy_url):
        """Sets the livy_url of this DataSourcePayload.


        :param livy_url: The livy_url of this DataSourcePayload.  # noqa: E501
        :type: str
        """

        self._livy_url = livy_url

    @property
    def name(self):
        """Gets the name of this DataSourcePayload.  # noqa: E501


        :return: The name of this DataSourcePayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataSourcePayload.


        :param name: The name of this DataSourcePayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this DataSourcePayload.  # noqa: E501


        :return: The password of this DataSourcePayload.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DataSourcePayload.


        :param password: The password of this DataSourcePayload.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def port(self):
        """Gets the port of this DataSourcePayload.  # noqa: E501


        :return: The port of this DataSourcePayload.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DataSourcePayload.


        :param port: The port of this DataSourcePayload.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def shared(self):
        """Gets the shared of this DataSourcePayload.  # noqa: E501


        :return: The shared of this DataSourcePayload.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this DataSourcePayload.


        :param shared: The shared of this DataSourcePayload.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    @property
    def url(self):
        """Gets the url of this DataSourcePayload.  # noqa: E501


        :return: The url of this DataSourcePayload.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DataSourcePayload.


        :param url: The url of this DataSourcePayload.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def user(self):
        """Gets the user of this DataSourcePayload.  # noqa: E501


        :return: The user of this DataSourcePayload.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DataSourcePayload.


        :param user: The user of this DataSourcePayload.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def web_h_cat_url(self):
        """Gets the web_h_cat_url of this DataSourcePayload.  # noqa: E501


        :return: The web_h_cat_url of this DataSourcePayload.  # noqa: E501
        :rtype: str
        """
        return self._web_h_cat_url

    @web_h_cat_url.setter
    def web_h_cat_url(self, web_h_cat_url):
        """Sets the web_h_cat_url of this DataSourcePayload.


        :param web_h_cat_url: The web_h_cat_url of this DataSourcePayload.  # noqa: E501
        :type: str
        """

        self._web_h_cat_url = web_h_cat_url

    @property
    def web_hdfsurl(self):
        """Gets the web_hdfsurl of this DataSourcePayload.  # noqa: E501


        :return: The web_hdfsurl of this DataSourcePayload.  # noqa: E501
        :rtype: str
        """
        return self._web_hdfsurl

    @web_hdfsurl.setter
    def web_hdfsurl(self, web_hdfsurl):
        """Sets the web_hdfsurl of this DataSourcePayload.


        :param web_hdfsurl: The web_hdfsurl of this DataSourcePayload.  # noqa: E501
        :type: str
        """

        self._web_hdfsurl = web_hdfsurl

    @property
    def data_source_type_id(self):
        """Gets the data_source_type_id of this DataSourcePayload.  # noqa: E501


        :return: The data_source_type_id of this DataSourcePayload.  # noqa: E501
        :rtype: str
        """
        return self._data_source_type_id

    @data_source_type_id.setter
    def data_source_type_id(self, data_source_type_id):
        """Sets the data_source_type_id of this DataSourcePayload.


        :param data_source_type_id: The data_source_type_id of this DataSourcePayload.  # noqa: E501
        :type: str
        """

        self._data_source_type_id = data_source_type_id

    @property
    def database_type(self):
        """Gets the database_type of this DataSourcePayload.  # noqa: E501


        :return: The database_type of this DataSourcePayload.  # noqa: E501
        :rtype: str
        """
        return self._database_type

    @database_type.setter
    def database_type(self, database_type):
        """Sets the database_type of this DataSourcePayload.


        :param database_type: The database_type of this DataSourcePayload.  # noqa: E501
        :type: str
        """

        self._database_type = database_type

    @property
    def jdbc_database(self):
        """Gets the jdbc_database of this DataSourcePayload.  # noqa: E501


        :return: The jdbc_database of this DataSourcePayload.  # noqa: E501
        :rtype: str
        """
        return self._jdbc_database

    @jdbc_database.setter
    def jdbc_database(self, jdbc_database):
        """Sets the jdbc_database of this DataSourcePayload.


        :param jdbc_database: The jdbc_database of this DataSourcePayload.  # noqa: E501
        :type: str
        """

        self._jdbc_database = jdbc_database

    @property
    def jdbc_host(self):
        """Gets the jdbc_host of this DataSourcePayload.  # noqa: E501


        :return: The jdbc_host of this DataSourcePayload.  # noqa: E501
        :rtype: str
        """
        return self._jdbc_host

    @jdbc_host.setter
    def jdbc_host(self, jdbc_host):
        """Sets the jdbc_host of this DataSourcePayload.


        :param jdbc_host: The jdbc_host of this DataSourcePayload.  # noqa: E501
        :type: str
        """

        self._jdbc_host = jdbc_host

    @property
    def jdbc_port(self):
        """Gets the jdbc_port of this DataSourcePayload.  # noqa: E501


        :return: The jdbc_port of this DataSourcePayload.  # noqa: E501
        :rtype: int
        """
        return self._jdbc_port

    @jdbc_port.setter
    def jdbc_port(self, jdbc_port):
        """Sets the jdbc_port of this DataSourcePayload.


        :param jdbc_port: The jdbc_port of this DataSourcePayload.  # noqa: E501
        :type: int
        """

        self._jdbc_port = jdbc_port

    @property
    def server(self):
        """Gets the server of this DataSourcePayload.  # noqa: E501


        :return: The server of this DataSourcePayload.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this DataSourcePayload.


        :param server: The server of this DataSourcePayload.  # noqa: E501
        :type: str
        """

        self._server = server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataSourcePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSourcePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
