# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExtensionObjectWithSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applies_to_addons': 'str',
        'description': 'str',
        'details': 'object',
        'display_name': 'str',
        'extension_name': 'str',
        'extension_point_id': 'str',
        'match_instance_id': 'str',
        'match_instance_role': 'str',
        'match_permissions': 'str',
        'meta': 'object',
        'order_hint': 'int',
        'source': 'str',
        'status': 'str'
    }

    attribute_map = {
        'applies_to_addons': 'applies_to_addons',
        'description': 'description',
        'details': 'details',
        'display_name': 'display_name',
        'extension_name': 'extension_name',
        'extension_point_id': 'extension_point_id',
        'match_instance_id': 'match_instance_id',
        'match_instance_role': 'match_instance_role',
        'match_permissions': 'match_permissions',
        'meta': 'meta',
        'order_hint': 'order_hint',
        'source': 'source',
        'status': 'status'
    }

    def __init__(self, applies_to_addons=None, description=None, details=None, display_name=None, extension_name=None, extension_point_id=None, match_instance_id=None, match_instance_role=None, match_permissions=None, meta=None, order_hint=None, source=None, status=None):  # noqa: E501
        """ExtensionObjectWithSource - a model defined in Swagger"""  # noqa: E501

        self._applies_to_addons = None
        self._description = None
        self._details = None
        self._display_name = None
        self._extension_name = None
        self._extension_point_id = None
        self._match_instance_id = None
        self._match_instance_role = None
        self._match_permissions = None
        self._meta = None
        self._order_hint = None
        self._source = None
        self._status = None
        self.discriminator = None

        if applies_to_addons is not None:
            self.applies_to_addons = applies_to_addons
        if description is not None:
            self.description = description
        if details is not None:
            self.details = details
        if display_name is not None:
            self.display_name = display_name
        self.extension_name = extension_name
        self.extension_point_id = extension_point_id
        if match_instance_id is not None:
            self.match_instance_id = match_instance_id
        if match_instance_role is not None:
            self.match_instance_role = match_instance_role
        if match_permissions is not None:
            self.match_permissions = match_permissions
        if meta is not None:
            self.meta = meta
        if order_hint is not None:
            self.order_hint = order_hint
        self.source = source
        if status is not None:
            self.status = status

    @property
    def applies_to_addons(self):
        """Gets the applies_to_addons of this ExtensionObjectWithSource.  # noqa: E501

        comma separated strings of addons which need to be enabled for this extension  # noqa: E501

        :return: The applies_to_addons of this ExtensionObjectWithSource.  # noqa: E501
        :rtype: str
        """
        return self._applies_to_addons

    @applies_to_addons.setter
    def applies_to_addons(self, applies_to_addons):
        """Sets the applies_to_addons of this ExtensionObjectWithSource.

        comma separated strings of addons which need to be enabled for this extension  # noqa: E501

        :param applies_to_addons: The applies_to_addons of this ExtensionObjectWithSource.  # noqa: E501
        :type: str
        """

        self._applies_to_addons = applies_to_addons

    @property
    def description(self):
        """Gets the description of this ExtensionObjectWithSource.  # noqa: E501

        short description about the extension  # noqa: E501

        :return: The description of this ExtensionObjectWithSource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExtensionObjectWithSource.

        short description about the extension  # noqa: E501

        :param description: The description of this ExtensionObjectWithSource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def details(self):
        """Gets the details of this ExtensionObjectWithSource.  # noqa: E501


        :return: The details of this ExtensionObjectWithSource.  # noqa: E501
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ExtensionObjectWithSource.


        :param details: The details of this ExtensionObjectWithSource.  # noqa: E501
        :type: object
        """

        self._details = details

    @property
    def display_name(self):
        """Gets the display_name of this ExtensionObjectWithSource.  # noqa: E501

        name to be displayed for the extension  # noqa: E501

        :return: The display_name of this ExtensionObjectWithSource.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ExtensionObjectWithSource.

        name to be displayed for the extension  # noqa: E501

        :param display_name: The display_name of this ExtensionObjectWithSource.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def extension_name(self):
        """Gets the extension_name of this ExtensionObjectWithSource.  # noqa: E501

        name of the extension that uniquely identifies it  # noqa: E501

        :return: The extension_name of this ExtensionObjectWithSource.  # noqa: E501
        :rtype: str
        """
        return self._extension_name

    @extension_name.setter
    def extension_name(self, extension_name):
        """Sets the extension_name of this ExtensionObjectWithSource.

        name of the extension that uniquely identifies it  # noqa: E501

        :param extension_name: The extension_name of this ExtensionObjectWithSource.  # noqa: E501
        :type: str
        """
        if extension_name is None:
            raise ValueError("Invalid value for `extension_name`, must not be `None`")  # noqa: E501

        self._extension_name = extension_name

    @property
    def extension_point_id(self):
        """Gets the extension_point_id of this ExtensionObjectWithSource.  # noqa: E501

        the extension point where this extension should be targeted  # noqa: E501

        :return: The extension_point_id of this ExtensionObjectWithSource.  # noqa: E501
        :rtype: str
        """
        return self._extension_point_id

    @extension_point_id.setter
    def extension_point_id(self, extension_point_id):
        """Sets the extension_point_id of this ExtensionObjectWithSource.

        the extension point where this extension should be targeted  # noqa: E501

        :param extension_point_id: The extension_point_id of this ExtensionObjectWithSource.  # noqa: E501
        :type: str
        """
        if extension_point_id is None:
            raise ValueError("Invalid value for `extension_point_id`, must not be `None`")  # noqa: E501

        self._extension_point_id = extension_point_id

    @property
    def match_instance_id(self):
        """Gets the match_instance_id of this ExtensionObjectWithSource.  # noqa: E501

        comma separated strings of instances who can get access to this extension  # noqa: E501

        :return: The match_instance_id of this ExtensionObjectWithSource.  # noqa: E501
        :rtype: str
        """
        return self._match_instance_id

    @match_instance_id.setter
    def match_instance_id(self, match_instance_id):
        """Sets the match_instance_id of this ExtensionObjectWithSource.

        comma separated strings of instances who can get access to this extension  # noqa: E501

        :param match_instance_id: The match_instance_id of this ExtensionObjectWithSource.  # noqa: E501
        :type: str
        """

        self._match_instance_id = match_instance_id

    @property
    def match_instance_role(self):
        """Gets the match_instance_role of this ExtensionObjectWithSource.  # noqa: E501

        comma separated strings of instance roles who can get access to this extension  # noqa: E501

        :return: The match_instance_role of this ExtensionObjectWithSource.  # noqa: E501
        :rtype: str
        """
        return self._match_instance_role

    @match_instance_role.setter
    def match_instance_role(self, match_instance_role):
        """Sets the match_instance_role of this ExtensionObjectWithSource.

        comma separated strings of instance roles who can get access to this extension  # noqa: E501

        :param match_instance_role: The match_instance_role of this ExtensionObjectWithSource.  # noqa: E501
        :type: str
        """

        self._match_instance_role = match_instance_role

    @property
    def match_permissions(self):
        """Gets the match_permissions of this ExtensionObjectWithSource.  # noqa: E501

        comma separated strings of user permissions who can get access to this extension  # noqa: E501

        :return: The match_permissions of this ExtensionObjectWithSource.  # noqa: E501
        :rtype: str
        """
        return self._match_permissions

    @match_permissions.setter
    def match_permissions(self, match_permissions):
        """Sets the match_permissions of this ExtensionObjectWithSource.

        comma separated strings of user permissions who can get access to this extension  # noqa: E501

        :param match_permissions: The match_permissions of this ExtensionObjectWithSource.  # noqa: E501
        :type: str
        """

        self._match_permissions = match_permissions

    @property
    def meta(self):
        """Gets the meta of this ExtensionObjectWithSource.  # noqa: E501


        :return: The meta of this ExtensionObjectWithSource.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this ExtensionObjectWithSource.


        :param meta: The meta of this ExtensionObjectWithSource.  # noqa: E501
        :type: object
        """

        self._meta = meta

    @property
    def order_hint(self):
        """Gets the order_hint of this ExtensionObjectWithSource.  # noqa: E501

        hint where the extension should be placed (should be relative to the other extensions created by the user)  # noqa: E501

        :return: The order_hint of this ExtensionObjectWithSource.  # noqa: E501
        :rtype: int
        """
        return self._order_hint

    @order_hint.setter
    def order_hint(self, order_hint):
        """Sets the order_hint of this ExtensionObjectWithSource.

        hint where the extension should be placed (should be relative to the other extensions created by the user)  # noqa: E501

        :param order_hint: The order_hint of this ExtensionObjectWithSource.  # noqa: E501
        :type: int
        """

        self._order_hint = order_hint

    @property
    def source(self):
        """Gets the source of this ExtensionObjectWithSource.  # noqa: E501

        source of the extension  # noqa: E501

        :return: The source of this ExtensionObjectWithSource.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ExtensionObjectWithSource.

        source of the extension  # noqa: E501

        :param source: The source of this ExtensionObjectWithSource.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def status(self):
        """Gets the status of this ExtensionObjectWithSource.  # noqa: E501

        if a status needs to be added  # noqa: E501

        :return: The status of this ExtensionObjectWithSource.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExtensionObjectWithSource.

        if a status needs to be added  # noqa: E501

        :param status: The status of this ExtensionObjectWithSource.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtensionObjectWithSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtensionObjectWithSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
