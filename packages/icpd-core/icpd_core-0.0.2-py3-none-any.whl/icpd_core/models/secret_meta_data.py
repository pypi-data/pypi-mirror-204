# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SecretMetaData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'created_by': 'str',
        'description': 'str',
        'invalid_auth': 'str',
        'owner_uid': 'str',
        'secret_name': 'str',
        'secret_urn': 'str',
        'type': 'str',
        'updated_at': 'str',
        'vault_name': 'str',
        'vault_urn': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'created_by': 'created_by',
        'description': 'description',
        'invalid_auth': 'invalid_auth',
        'owner_uid': 'owner_uid',
        'secret_name': 'secret_name',
        'secret_urn': 'secret_urn',
        'type': 'type',
        'updated_at': 'updated_at',
        'vault_name': 'vault_name',
        'vault_urn': 'vault_urn'
    }

    def __init__(self, created_at=None, created_by=None, description=None, invalid_auth=None, owner_uid=None, secret_name=None, secret_urn=None, type=None, updated_at=None, vault_name=None, vault_urn=None):  # noqa: E501
        """SecretMetaData - a model defined in Swagger"""  # noqa: E501

        self._created_at = None
        self._created_by = None
        self._description = None
        self._invalid_auth = None
        self._owner_uid = None
        self._secret_name = None
        self._secret_urn = None
        self._type = None
        self._updated_at = None
        self._vault_name = None
        self._vault_urn = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if description is not None:
            self.description = description
        if invalid_auth is not None:
            self.invalid_auth = invalid_auth
        if owner_uid is not None:
            self.owner_uid = owner_uid
        if secret_name is not None:
            self.secret_name = secret_name
        if secret_urn is not None:
            self.secret_urn = secret_urn
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at
        if vault_name is not None:
            self.vault_name = vault_name
        if vault_urn is not None:
            self.vault_urn = vault_urn

    @property
    def created_at(self):
        """Gets the created_at of this SecretMetaData.  # noqa: E501

        vault last creation time  # noqa: E501

        :return: The created_at of this SecretMetaData.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SecretMetaData.

        vault last creation time  # noqa: E501

        :param created_at: The created_at of this SecretMetaData.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this SecretMetaData.  # noqa: E501

        name of the vault creator  # noqa: E501

        :return: The created_by of this SecretMetaData.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SecretMetaData.

        name of the vault creator  # noqa: E501

        :param created_by: The created_by of this SecretMetaData.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this SecretMetaData.  # noqa: E501

        short description about the secret  # noqa: E501

        :return: The description of this SecretMetaData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SecretMetaData.

        short description about the secret  # noqa: E501

        :param description: The description of this SecretMetaData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def invalid_auth(self):
        """Gets the invalid_auth of this SecretMetaData.  # noqa: E501

        if this is set to true, vault integration owner need to update vault authentication  # noqa: E501

        :return: The invalid_auth of this SecretMetaData.  # noqa: E501
        :rtype: str
        """
        return self._invalid_auth

    @invalid_auth.setter
    def invalid_auth(self, invalid_auth):
        """Sets the invalid_auth of this SecretMetaData.

        if this is set to true, vault integration owner need to update vault authentication  # noqa: E501

        :param invalid_auth: The invalid_auth of this SecretMetaData.  # noqa: E501
        :type: str
        """

        self._invalid_auth = invalid_auth

    @property
    def owner_uid(self):
        """Gets the owner_uid of this SecretMetaData.  # noqa: E501

        the owner uid of the the secret  # noqa: E501

        :return: The owner_uid of this SecretMetaData.  # noqa: E501
        :rtype: str
        """
        return self._owner_uid

    @owner_uid.setter
    def owner_uid(self, owner_uid):
        """Sets the owner_uid of this SecretMetaData.

        the owner uid of the the secret  # noqa: E501

        :param owner_uid: The owner_uid of this SecretMetaData.  # noqa: E501
        :type: str
        """

        self._owner_uid = owner_uid

    @property
    def secret_name(self):
        """Gets the secret_name of this SecretMetaData.  # noqa: E501

        name of the secret  # noqa: E501

        :return: The secret_name of this SecretMetaData.  # noqa: E501
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this SecretMetaData.

        name of the secret  # noqa: E501

        :param secret_name: The secret_name of this SecretMetaData.  # noqa: E501
        :type: str
        """

        self._secret_name = secret_name

    @property
    def secret_urn(self):
        """Gets the secret_urn of this SecretMetaData.  # noqa: E501

        secret ID  # noqa: E501

        :return: The secret_urn of this SecretMetaData.  # noqa: E501
        :rtype: str
        """
        return self._secret_urn

    @secret_urn.setter
    def secret_urn(self, secret_urn):
        """Sets the secret_urn of this SecretMetaData.

        secret ID  # noqa: E501

        :param secret_urn: The secret_urn of this SecretMetaData.  # noqa: E501
        :type: str
        """

        self._secret_urn = secret_urn

    @property
    def type(self):
        """Gets the type of this SecretMetaData.  # noqa: E501

        type of the secret  # noqa: E501

        :return: The type of this SecretMetaData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SecretMetaData.

        type of the secret  # noqa: E501

        :param type: The type of this SecretMetaData.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this SecretMetaData.  # noqa: E501

        vault last update time  # noqa: E501

        :return: The updated_at of this SecretMetaData.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SecretMetaData.

        vault last update time  # noqa: E501

        :param updated_at: The updated_at of this SecretMetaData.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def vault_name(self):
        """Gets the vault_name of this SecretMetaData.  # noqa: E501

        name of the vault  # noqa: E501

        :return: The vault_name of this SecretMetaData.  # noqa: E501
        :rtype: str
        """
        return self._vault_name

    @vault_name.setter
    def vault_name(self, vault_name):
        """Sets the vault_name of this SecretMetaData.

        name of the vault  # noqa: E501

        :param vault_name: The vault_name of this SecretMetaData.  # noqa: E501
        :type: str
        """

        self._vault_name = vault_name

    @property
    def vault_urn(self):
        """Gets the vault_urn of this SecretMetaData.  # noqa: E501

        vault ID  # noqa: E501

        :return: The vault_urn of this SecretMetaData.  # noqa: E501
        :rtype: str
        """
        return self._vault_urn

    @vault_urn.setter
    def vault_urn(self, vault_urn):
        """Sets the vault_urn of this SecretMetaData.

        vault ID  # noqa: E501

        :param vault_urn: The vault_urn of this SecretMetaData.  # noqa: E501
        :type: str
        """

        self._vault_urn = vault_urn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecretMetaData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecretMetaData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
