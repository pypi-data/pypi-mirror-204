# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpgradeServiceInstanceArgs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'args': 'str',
        'broker_id': 'str',
        'client_timeout': 'str',
        'force': 'bool',
        'mode': 'str',
        'no_hooks': 'bool',
        'recreate_pods': 'bool',
        'service_instance_id': 'str',
        'service_instance_type': 'str',
        'service_instance_version': 'str',
        'target_version': 'str'
    }

    attribute_map = {
        'args': 'args',
        'broker_id': 'brokerID',
        'client_timeout': 'clientTimeout',
        'force': 'force',
        'mode': 'mode',
        'no_hooks': 'noHooks',
        'recreate_pods': 'recreatePods',
        'service_instance_id': 'serviceInstanceId',
        'service_instance_type': 'serviceInstanceType',
        'service_instance_version': 'serviceInstanceVersion',
        'target_version': 'targetVersion'
    }

    def __init__(self, args=None, broker_id=None, client_timeout='300s', force=False, mode='custom', no_hooks=False, recreate_pods=False, service_instance_id=None, service_instance_type=None, service_instance_version=None, target_version=None):  # noqa: E501
        """UpgradeServiceInstanceArgs - a model defined in Swagger"""  # noqa: E501

        self._args = None
        self._broker_id = None
        self._client_timeout = None
        self._force = None
        self._mode = None
        self._no_hooks = None
        self._recreate_pods = None
        self._service_instance_id = None
        self._service_instance_type = None
        self._service_instance_version = None
        self._target_version = None
        self.discriminator = None

        if args is not None:
            self.args = args
        if broker_id is not None:
            self.broker_id = broker_id
        if client_timeout is not None:
            self.client_timeout = client_timeout
        if force is not None:
            self.force = force
        if mode is not None:
            self.mode = mode
        if no_hooks is not None:
            self.no_hooks = no_hooks
        if recreate_pods is not None:
            self.recreate_pods = recreate_pods
        if service_instance_id is not None:
            self.service_instance_id = service_instance_id
        if service_instance_type is not None:
            self.service_instance_type = service_instance_type
        if service_instance_version is not None:
            self.service_instance_version = service_instance_version
        if target_version is not None:
            self.target_version = target_version

    @property
    def args(self):
        """Gets the args of this UpgradeServiceInstanceArgs.  # noqa: E501

        base64 encoded string representing all the args. For delegated upgrade it can be any format  # noqa: E501

        :return: The args of this UpgradeServiceInstanceArgs.  # noqa: E501
        :rtype: str
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this UpgradeServiceInstanceArgs.

        base64 encoded string representing all the args. For delegated upgrade it can be any format  # noqa: E501

        :param args: The args of this UpgradeServiceInstanceArgs.  # noqa: E501
        :type: str
        """

        self._args = args

    @property
    def broker_id(self):
        """Gets the broker_id of this UpgradeServiceInstanceArgs.  # noqa: E501


        :return: The broker_id of this UpgradeServiceInstanceArgs.  # noqa: E501
        :rtype: str
        """
        return self._broker_id

    @broker_id.setter
    def broker_id(self, broker_id):
        """Sets the broker_id of this UpgradeServiceInstanceArgs.


        :param broker_id: The broker_id of this UpgradeServiceInstanceArgs.  # noqa: E501
        :type: str
        """

        self._broker_id = broker_id

    @property
    def client_timeout(self):
        """Gets the client_timeout of this UpgradeServiceInstanceArgs.  # noqa: E501


        :return: The client_timeout of this UpgradeServiceInstanceArgs.  # noqa: E501
        :rtype: str
        """
        return self._client_timeout

    @client_timeout.setter
    def client_timeout(self, client_timeout):
        """Sets the client_timeout of this UpgradeServiceInstanceArgs.


        :param client_timeout: The client_timeout of this UpgradeServiceInstanceArgs.  # noqa: E501
        :type: str
        """

        self._client_timeout = client_timeout

    @property
    def force(self):
        """Gets the force of this UpgradeServiceInstanceArgs.  # noqa: E501


        :return: The force of this UpgradeServiceInstanceArgs.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this UpgradeServiceInstanceArgs.


        :param force: The force of this UpgradeServiceInstanceArgs.  # noqa: E501
        :type: bool
        """

        self._force = force

    @property
    def mode(self):
        """Gets the mode of this UpgradeServiceInstanceArgs.  # noqa: E501


        :return: The mode of this UpgradeServiceInstanceArgs.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this UpgradeServiceInstanceArgs.


        :param mode: The mode of this UpgradeServiceInstanceArgs.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def no_hooks(self):
        """Gets the no_hooks of this UpgradeServiceInstanceArgs.  # noqa: E501


        :return: The no_hooks of this UpgradeServiceInstanceArgs.  # noqa: E501
        :rtype: bool
        """
        return self._no_hooks

    @no_hooks.setter
    def no_hooks(self, no_hooks):
        """Sets the no_hooks of this UpgradeServiceInstanceArgs.


        :param no_hooks: The no_hooks of this UpgradeServiceInstanceArgs.  # noqa: E501
        :type: bool
        """

        self._no_hooks = no_hooks

    @property
    def recreate_pods(self):
        """Gets the recreate_pods of this UpgradeServiceInstanceArgs.  # noqa: E501


        :return: The recreate_pods of this UpgradeServiceInstanceArgs.  # noqa: E501
        :rtype: bool
        """
        return self._recreate_pods

    @recreate_pods.setter
    def recreate_pods(self, recreate_pods):
        """Sets the recreate_pods of this UpgradeServiceInstanceArgs.


        :param recreate_pods: The recreate_pods of this UpgradeServiceInstanceArgs.  # noqa: E501
        :type: bool
        """

        self._recreate_pods = recreate_pods

    @property
    def service_instance_id(self):
        """Gets the service_instance_id of this UpgradeServiceInstanceArgs.  # noqa: E501


        :return: The service_instance_id of this UpgradeServiceInstanceArgs.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_id

    @service_instance_id.setter
    def service_instance_id(self, service_instance_id):
        """Sets the service_instance_id of this UpgradeServiceInstanceArgs.


        :param service_instance_id: The service_instance_id of this UpgradeServiceInstanceArgs.  # noqa: E501
        :type: str
        """

        self._service_instance_id = service_instance_id

    @property
    def service_instance_type(self):
        """Gets the service_instance_type of this UpgradeServiceInstanceArgs.  # noqa: E501


        :return: The service_instance_type of this UpgradeServiceInstanceArgs.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_type

    @service_instance_type.setter
    def service_instance_type(self, service_instance_type):
        """Sets the service_instance_type of this UpgradeServiceInstanceArgs.


        :param service_instance_type: The service_instance_type of this UpgradeServiceInstanceArgs.  # noqa: E501
        :type: str
        """

        self._service_instance_type = service_instance_type

    @property
    def service_instance_version(self):
        """Gets the service_instance_version of this UpgradeServiceInstanceArgs.  # noqa: E501


        :return: The service_instance_version of this UpgradeServiceInstanceArgs.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_version

    @service_instance_version.setter
    def service_instance_version(self, service_instance_version):
        """Sets the service_instance_version of this UpgradeServiceInstanceArgs.


        :param service_instance_version: The service_instance_version of this UpgradeServiceInstanceArgs.  # noqa: E501
        :type: str
        """

        self._service_instance_version = service_instance_version

    @property
    def target_version(self):
        """Gets the target_version of this UpgradeServiceInstanceArgs.  # noqa: E501


        :return: The target_version of this UpgradeServiceInstanceArgs.  # noqa: E501
        :rtype: str
        """
        return self._target_version

    @target_version.setter
    def target_version(self, target_version):
        """Sets the target_version of this UpgradeServiceInstanceArgs.


        :param target_version: The target_version of this UpgradeServiceInstanceArgs.  # noqa: E501
        :type: str
        """

        self._target_version = target_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpgradeServiceInstanceArgs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeServiceInstanceArgs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
