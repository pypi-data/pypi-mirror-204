# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetCacheMetadataByTypeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cache_size': 'str',
        'entries': 'list[CacheEntry]',
        'host_address': 'str',
        'total_entries': 'int'
    }

    attribute_map = {
        'cache_size': 'cache_size',
        'entries': 'entries',
        'host_address': 'host_address',
        'total_entries': 'total_entries'
    }

    def __init__(self, cache_size=None, entries=None, host_address=None, total_entries=None):  # noqa: E501
        """GetCacheMetadataByTypeResponse - a model defined in Swagger"""  # noqa: E501

        self._cache_size = None
        self._entries = None
        self._host_address = None
        self._total_entries = None
        self.discriminator = None

        if cache_size is not None:
            self.cache_size = cache_size
        if entries is not None:
            self.entries = entries
        if host_address is not None:
            self.host_address = host_address
        if total_entries is not None:
            self.total_entries = total_entries

    @property
    def cache_size(self):
        """Gets the cache_size of this GetCacheMetadataByTypeResponse.  # noqa: E501

        size of specified cache type  # noqa: E501

        :return: The cache_size of this GetCacheMetadataByTypeResponse.  # noqa: E501
        :rtype: str
        """
        return self._cache_size

    @cache_size.setter
    def cache_size(self, cache_size):
        """Sets the cache_size of this GetCacheMetadataByTypeResponse.

        size of specified cache type  # noqa: E501

        :param cache_size: The cache_size of this GetCacheMetadataByTypeResponse.  # noqa: E501
        :type: str
        """

        self._cache_size = cache_size

    @property
    def entries(self):
        """Gets the entries of this GetCacheMetadataByTypeResponse.  # noqa: E501

        array of cache entry metadata  # noqa: E501

        :return: The entries of this GetCacheMetadataByTypeResponse.  # noqa: E501
        :rtype: list[CacheEntry]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this GetCacheMetadataByTypeResponse.

        array of cache entry metadata  # noqa: E501

        :param entries: The entries of this GetCacheMetadataByTypeResponse.  # noqa: E501
        :type: list[CacheEntry]
        """

        self._entries = entries

    @property
    def host_address(self):
        """Gets the host_address of this GetCacheMetadataByTypeResponse.  # noqa: E501

        host which serves request  # noqa: E501

        :return: The host_address of this GetCacheMetadataByTypeResponse.  # noqa: E501
        :rtype: str
        """
        return self._host_address

    @host_address.setter
    def host_address(self, host_address):
        """Sets the host_address of this GetCacheMetadataByTypeResponse.

        host which serves request  # noqa: E501

        :param host_address: The host_address of this GetCacheMetadataByTypeResponse.  # noqa: E501
        :type: str
        """

        self._host_address = host_address

    @property
    def total_entries(self):
        """Gets the total_entries of this GetCacheMetadataByTypeResponse.  # noqa: E501

        total number of cache entries  # noqa: E501

        :return: The total_entries of this GetCacheMetadataByTypeResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_entries

    @total_entries.setter
    def total_entries(self, total_entries):
        """Sets the total_entries of this GetCacheMetadataByTypeResponse.

        total number of cache entries  # noqa: E501

        :param total_entries: The total_entries of this GetCacheMetadataByTypeResponse.  # noqa: E501
        :type: int
        """

        self._total_entries = total_entries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCacheMetadataByTypeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCacheMetadataByTypeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
