# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ServiceInstanceMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'ServiceInstanceMetadataMetadata',
        'parameters': 'object',
        'service_instance_description': 'str',
        'service_instance_display_name': 'str',
        'service_instance_namespace': 'str',
        'transient_fields': 'object',
        'zen_service_instance_info': 'ReservedServiceInstanceInfo'
    }

    attribute_map = {
        'metadata': 'metadata',
        'parameters': 'parameters',
        'service_instance_description': 'serviceInstanceDescription',
        'service_instance_display_name': 'serviceInstanceDisplayName',
        'service_instance_namespace': 'serviceInstanceNamespace',
        'transient_fields': 'transientFields',
        'zen_service_instance_info': 'zenServiceInstanceInfo'
    }

    def __init__(self, metadata=None, parameters=None, service_instance_description=None, service_instance_display_name=None, service_instance_namespace=None, transient_fields=None, zen_service_instance_info=None):  # noqa: E501
        """ServiceInstanceMetadata - a model defined in Swagger"""  # noqa: E501

        self._metadata = None
        self._parameters = None
        self._service_instance_description = None
        self._service_instance_display_name = None
        self._service_instance_namespace = None
        self._transient_fields = None
        self._zen_service_instance_info = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if parameters is not None:
            self.parameters = parameters
        if service_instance_description is not None:
            self.service_instance_description = service_instance_description
        if service_instance_display_name is not None:
            self.service_instance_display_name = service_instance_display_name
        if service_instance_namespace is not None:
            self.service_instance_namespace = service_instance_namespace
        if transient_fields is not None:
            self.transient_fields = transient_fields
        if zen_service_instance_info is not None:
            self.zen_service_instance_info = zen_service_instance_info

    @property
    def metadata(self):
        """Gets the metadata of this ServiceInstanceMetadata.  # noqa: E501


        :return: The metadata of this ServiceInstanceMetadata.  # noqa: E501
        :rtype: ServiceInstanceMetadataMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ServiceInstanceMetadata.


        :param metadata: The metadata of this ServiceInstanceMetadata.  # noqa: E501
        :type: ServiceInstanceMetadataMetadata
        """

        self._metadata = metadata

    @property
    def parameters(self):
        """Gets the parameters of this ServiceInstanceMetadata.  # noqa: E501

        parameters in the form of key value pair that are needed as part of provision  # noqa: E501

        :return: The parameters of this ServiceInstanceMetadata.  # noqa: E501
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ServiceInstanceMetadata.

        parameters in the form of key value pair that are needed as part of provision  # noqa: E501

        :param parameters: The parameters of this ServiceInstanceMetadata.  # noqa: E501
        :type: object
        """

        self._parameters = parameters

    @property
    def service_instance_description(self):
        """Gets the service_instance_description of this ServiceInstanceMetadata.  # noqa: E501


        :return: The service_instance_description of this ServiceInstanceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_description

    @service_instance_description.setter
    def service_instance_description(self, service_instance_description):
        """Sets the service_instance_description of this ServiceInstanceMetadata.


        :param service_instance_description: The service_instance_description of this ServiceInstanceMetadata.  # noqa: E501
        :type: str
        """

        self._service_instance_description = service_instance_description

    @property
    def service_instance_display_name(self):
        """Gets the service_instance_display_name of this ServiceInstanceMetadata.  # noqa: E501


        :return: The service_instance_display_name of this ServiceInstanceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_display_name

    @service_instance_display_name.setter
    def service_instance_display_name(self, service_instance_display_name):
        """Sets the service_instance_display_name of this ServiceInstanceMetadata.


        :param service_instance_display_name: The service_instance_display_name of this ServiceInstanceMetadata.  # noqa: E501
        :type: str
        """

        self._service_instance_display_name = service_instance_display_name

    @property
    def service_instance_namespace(self):
        """Gets the service_instance_namespace of this ServiceInstanceMetadata.  # noqa: E501

        the namespace of provisioned service Instance  # noqa: E501

        :return: The service_instance_namespace of this ServiceInstanceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_namespace

    @service_instance_namespace.setter
    def service_instance_namespace(self, service_instance_namespace):
        """Sets the service_instance_namespace of this ServiceInstanceMetadata.

        the namespace of provisioned service Instance  # noqa: E501

        :param service_instance_namespace: The service_instance_namespace of this ServiceInstanceMetadata.  # noqa: E501
        :type: str
        """

        self._service_instance_namespace = service_instance_namespace

    @property
    def transient_fields(self):
        """Gets the transient_fields of this ServiceInstanceMetadata.  # noqa: E501


        :return: The transient_fields of this ServiceInstanceMetadata.  # noqa: E501
        :rtype: object
        """
        return self._transient_fields

    @transient_fields.setter
    def transient_fields(self, transient_fields):
        """Sets the transient_fields of this ServiceInstanceMetadata.


        :param transient_fields: The transient_fields of this ServiceInstanceMetadata.  # noqa: E501
        :type: object
        """

        self._transient_fields = transient_fields

    @property
    def zen_service_instance_info(self):
        """Gets the zen_service_instance_info of this ServiceInstanceMetadata.  # noqa: E501


        :return: The zen_service_instance_info of this ServiceInstanceMetadata.  # noqa: E501
        :rtype: ReservedServiceInstanceInfo
        """
        return self._zen_service_instance_info

    @zen_service_instance_info.setter
    def zen_service_instance_info(self, zen_service_instance_info):
        """Sets the zen_service_instance_info of this ServiceInstanceMetadata.


        :param zen_service_instance_info: The zen_service_instance_info of this ServiceInstanceMetadata.  # noqa: E501
        :type: ReservedServiceInstanceInfo
        """

        self._zen_service_instance_info = zen_service_instance_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceInstanceMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceInstanceMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
