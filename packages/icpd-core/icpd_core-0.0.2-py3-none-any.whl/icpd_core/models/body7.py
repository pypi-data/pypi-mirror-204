# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body7(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credentials': 'ConnectionCredentials',
        'project_id': 'str',
        'shared': 'bool'
    }

    attribute_map = {
        'credentials': 'credentials',
        'project_id': 'projectId',
        'shared': 'shared'
    }

    def __init__(self, credentials=None, project_id=None, shared=None):  # noqa: E501
        """Body7 - a model defined in Swagger"""  # noqa: E501

        self._credentials = None
        self._project_id = None
        self._shared = None
        self.discriminator = None

        if credentials is not None:
            self.credentials = credentials
        self.project_id = project_id
        self.shared = shared

    @property
    def credentials(self):
        """Gets the credentials of this Body7.  # noqa: E501


        :return: The credentials of this Body7.  # noqa: E501
        :rtype: ConnectionCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Body7.


        :param credentials: The credentials of this Body7.  # noqa: E501
        :type: ConnectionCredentials
        """

        self._credentials = credentials

    @property
    def project_id(self):
        """Gets the project_id of this Body7.  # noqa: E501


        :return: The project_id of this Body7.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Body7.


        :param project_id: The project_id of this Body7.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def shared(self):
        """Gets the shared of this Body7.  # noqa: E501


        :return: The shared of this Body7.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this Body7.


        :param shared: The shared of this Body7.  # noqa: E501
        :type: bool
        """
        if shared is None:
            raise ValueError("Invalid value for `shared`, must not be `None`")  # noqa: E501

        self._shared = shared

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body7, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body7):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
