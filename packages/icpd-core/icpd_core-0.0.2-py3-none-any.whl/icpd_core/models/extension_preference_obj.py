# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExtensionPreferenceObj(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extension_name': 'str',
        'extension_point_id': 'str',
        'id': 'str',
        'meta': 'object',
        'order': 'int',
        'status': 'str'
    }

    attribute_map = {
        'extension_name': 'extension_name',
        'extension_point_id': 'extension_point_id',
        'id': 'id',
        'meta': 'meta',
        'order': 'order',
        'status': 'status'
    }

    def __init__(self, extension_name=None, extension_point_id=None, id=None, meta=None, order=None, status=None):  # noqa: E501
        """ExtensionPreferenceObj - a model defined in Swagger"""  # noqa: E501

        self._extension_name = None
        self._extension_point_id = None
        self._id = None
        self._meta = None
        self._order = None
        self._status = None
        self.discriminator = None

        if extension_name is not None:
            self.extension_name = extension_name
        if extension_point_id is not None:
            self.extension_point_id = extension_point_id
        if id is not None:
            self.id = id
        if meta is not None:
            self.meta = meta
        if order is not None:
            self.order = order
        if status is not None:
            self.status = status

    @property
    def extension_name(self):
        """Gets the extension_name of this ExtensionPreferenceObj.  # noqa: E501

        extension name  # noqa: E501

        :return: The extension_name of this ExtensionPreferenceObj.  # noqa: E501
        :rtype: str
        """
        return self._extension_name

    @extension_name.setter
    def extension_name(self, extension_name):
        """Sets the extension_name of this ExtensionPreferenceObj.

        extension name  # noqa: E501

        :param extension_name: The extension_name of this ExtensionPreferenceObj.  # noqa: E501
        :type: str
        """

        self._extension_name = extension_name

    @property
    def extension_point_id(self):
        """Gets the extension_point_id of this ExtensionPreferenceObj.  # noqa: E501

        id of extension point  # noqa: E501

        :return: The extension_point_id of this ExtensionPreferenceObj.  # noqa: E501
        :rtype: str
        """
        return self._extension_point_id

    @extension_point_id.setter
    def extension_point_id(self, extension_point_id):
        """Sets the extension_point_id of this ExtensionPreferenceObj.

        id of extension point  # noqa: E501

        :param extension_point_id: The extension_point_id of this ExtensionPreferenceObj.  # noqa: E501
        :type: str
        """

        self._extension_point_id = extension_point_id

    @property
    def id(self):
        """Gets the id of this ExtensionPreferenceObj.  # noqa: E501

        the unique extension id  # noqa: E501

        :return: The id of this ExtensionPreferenceObj.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExtensionPreferenceObj.

        the unique extension id  # noqa: E501

        :param id: The id of this ExtensionPreferenceObj.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def meta(self):
        """Gets the meta of this ExtensionPreferenceObj.  # noqa: E501


        :return: The meta of this ExtensionPreferenceObj.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this ExtensionPreferenceObj.


        :param meta: The meta of this ExtensionPreferenceObj.  # noqa: E501
        :type: object
        """

        self._meta = meta

    @property
    def order(self):
        """Gets the order of this ExtensionPreferenceObj.  # noqa: E501

        hint where the extension should be placed (should be relative to the other extensions created by the user)  # noqa: E501

        :return: The order of this ExtensionPreferenceObj.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ExtensionPreferenceObj.

        hint where the extension should be placed (should be relative to the other extensions created by the user)  # noqa: E501

        :param order: The order of this ExtensionPreferenceObj.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def status(self):
        """Gets the status of this ExtensionPreferenceObj.  # noqa: E501

        status of extensions  # noqa: E501

        :return: The status of this ExtensionPreferenceObj.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExtensionPreferenceObj.

        status of extensions  # noqa: E501

        :param status: The status of this ExtensionPreferenceObj.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtensionPreferenceObj, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtensionPreferenceObj):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
