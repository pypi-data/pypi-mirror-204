# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReservedServiceInstanceInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'zen_control_plane_namespace': 'str',
        'zen_image_registry_docker_secret': 'str',
        'zen_image_registry_prefix': 'str',
        'zen_service_instance_id': 'str',
        'zen_service_instance_secret': 'str',
        'zen_service_instance_type': 'str',
        'zen_service_instance_uid': 'str',
        'zen_service_instance_user_name': 'str',
        'zen_service_instance_version': 'str'
    }

    attribute_map = {
        'zen_control_plane_namespace': 'zenControlPlaneNamespace',
        'zen_image_registry_docker_secret': 'zenImageRegistryDockerSecret',
        'zen_image_registry_prefix': 'zenImageRegistryPrefix',
        'zen_service_instance_id': 'zenServiceInstanceId',
        'zen_service_instance_secret': 'zenServiceInstanceSecret',
        'zen_service_instance_type': 'zenServiceInstanceType',
        'zen_service_instance_uid': 'zenServiceInstanceUID',
        'zen_service_instance_user_name': 'zenServiceInstanceUserName',
        'zen_service_instance_version': 'zenServiceInstanceVersion'
    }

    def __init__(self, zen_control_plane_namespace=None, zen_image_registry_docker_secret=None, zen_image_registry_prefix=None, zen_service_instance_id=None, zen_service_instance_secret=None, zen_service_instance_type=None, zen_service_instance_uid=None, zen_service_instance_user_name=None, zen_service_instance_version=None):  # noqa: E501
        """ReservedServiceInstanceInfo - a model defined in Swagger"""  # noqa: E501

        self._zen_control_plane_namespace = None
        self._zen_image_registry_docker_secret = None
        self._zen_image_registry_prefix = None
        self._zen_service_instance_id = None
        self._zen_service_instance_secret = None
        self._zen_service_instance_type = None
        self._zen_service_instance_uid = None
        self._zen_service_instance_user_name = None
        self._zen_service_instance_version = None
        self.discriminator = None

        if zen_control_plane_namespace is not None:
            self.zen_control_plane_namespace = zen_control_plane_namespace
        if zen_image_registry_docker_secret is not None:
            self.zen_image_registry_docker_secret = zen_image_registry_docker_secret
        if zen_image_registry_prefix is not None:
            self.zen_image_registry_prefix = zen_image_registry_prefix
        if zen_service_instance_id is not None:
            self.zen_service_instance_id = zen_service_instance_id
        if zen_service_instance_secret is not None:
            self.zen_service_instance_secret = zen_service_instance_secret
        if zen_service_instance_type is not None:
            self.zen_service_instance_type = zen_service_instance_type
        if zen_service_instance_uid is not None:
            self.zen_service_instance_uid = zen_service_instance_uid
        if zen_service_instance_user_name is not None:
            self.zen_service_instance_user_name = zen_service_instance_user_name
        if zen_service_instance_version is not None:
            self.zen_service_instance_version = zen_service_instance_version

    @property
    def zen_control_plane_namespace(self):
        """Gets the zen_control_plane_namespace of this ReservedServiceInstanceInfo.  # noqa: E501

        the namespace where Service Broker (zen-core-api in this case) resides. \"zen\" might not be the namespace where icp4d is installed.  # noqa: E501

        :return: The zen_control_plane_namespace of this ReservedServiceInstanceInfo.  # noqa: E501
        :rtype: str
        """
        return self._zen_control_plane_namespace

    @zen_control_plane_namespace.setter
    def zen_control_plane_namespace(self, zen_control_plane_namespace):
        """Sets the zen_control_plane_namespace of this ReservedServiceInstanceInfo.

        the namespace where Service Broker (zen-core-api in this case) resides. \"zen\" might not be the namespace where icp4d is installed.  # noqa: E501

        :param zen_control_plane_namespace: The zen_control_plane_namespace of this ReservedServiceInstanceInfo.  # noqa: E501
        :type: str
        """

        self._zen_control_plane_namespace = zen_control_plane_namespace

    @property
    def zen_image_registry_docker_secret(self):
        """Gets the zen_image_registry_docker_secret of this ReservedServiceInstanceInfo.  # noqa: E501

        docker registry secret for image  # noqa: E501

        :return: The zen_image_registry_docker_secret of this ReservedServiceInstanceInfo.  # noqa: E501
        :rtype: str
        """
        return self._zen_image_registry_docker_secret

    @zen_image_registry_docker_secret.setter
    def zen_image_registry_docker_secret(self, zen_image_registry_docker_secret):
        """Sets the zen_image_registry_docker_secret of this ReservedServiceInstanceInfo.

        docker registry secret for image  # noqa: E501

        :param zen_image_registry_docker_secret: The zen_image_registry_docker_secret of this ReservedServiceInstanceInfo.  # noqa: E501
        :type: str
        """

        self._zen_image_registry_docker_secret = zen_image_registry_docker_secret

    @property
    def zen_image_registry_prefix(self):
        """Gets the zen_image_registry_prefix of this ReservedServiceInstanceInfo.  # noqa: E501

        zen docker image registry prefix  # noqa: E501

        :return: The zen_image_registry_prefix of this ReservedServiceInstanceInfo.  # noqa: E501
        :rtype: str
        """
        return self._zen_image_registry_prefix

    @zen_image_registry_prefix.setter
    def zen_image_registry_prefix(self, zen_image_registry_prefix):
        """Sets the zen_image_registry_prefix of this ReservedServiceInstanceInfo.

        zen docker image registry prefix  # noqa: E501

        :param zen_image_registry_prefix: The zen_image_registry_prefix of this ReservedServiceInstanceInfo.  # noqa: E501
        :type: str
        """

        self._zen_image_registry_prefix = zen_image_registry_prefix

    @property
    def zen_service_instance_id(self):
        """Gets the zen_service_instance_id of this ReservedServiceInstanceInfo.  # noqa: E501

        serviceInstanceId of the provisioned database  # noqa: E501

        :return: The zen_service_instance_id of this ReservedServiceInstanceInfo.  # noqa: E501
        :rtype: str
        """
        return self._zen_service_instance_id

    @zen_service_instance_id.setter
    def zen_service_instance_id(self, zen_service_instance_id):
        """Sets the zen_service_instance_id of this ReservedServiceInstanceInfo.

        serviceInstanceId of the provisioned database  # noqa: E501

        :param zen_service_instance_id: The zen_service_instance_id of this ReservedServiceInstanceInfo.  # noqa: E501
        :type: str
        """

        self._zen_service_instance_id = zen_service_instance_id

    @property
    def zen_service_instance_secret(self):
        """Gets the zen_service_instance_secret of this ReservedServiceInstanceInfo.  # noqa: E501

        default password generated by zen-core-api.  # noqa: E501

        :return: The zen_service_instance_secret of this ReservedServiceInstanceInfo.  # noqa: E501
        :rtype: str
        """
        return self._zen_service_instance_secret

    @zen_service_instance_secret.setter
    def zen_service_instance_secret(self, zen_service_instance_secret):
        """Sets the zen_service_instance_secret of this ReservedServiceInstanceInfo.

        default password generated by zen-core-api.  # noqa: E501

        :param zen_service_instance_secret: The zen_service_instance_secret of this ReservedServiceInstanceInfo.  # noqa: E501
        :type: str
        """

        self._zen_service_instance_secret = zen_service_instance_secret

    @property
    def zen_service_instance_type(self):
        """Gets the zen_service_instance_type of this ReservedServiceInstanceInfo.  # noqa: E501

        the type of serviceInstance. e.g db2wh, eventstore, mongodb etc.  # noqa: E501

        :return: The zen_service_instance_type of this ReservedServiceInstanceInfo.  # noqa: E501
        :rtype: str
        """
        return self._zen_service_instance_type

    @zen_service_instance_type.setter
    def zen_service_instance_type(self, zen_service_instance_type):
        """Sets the zen_service_instance_type of this ReservedServiceInstanceInfo.

        the type of serviceInstance. e.g db2wh, eventstore, mongodb etc.  # noqa: E501

        :param zen_service_instance_type: The zen_service_instance_type of this ReservedServiceInstanceInfo.  # noqa: E501
        :type: str
        """

        self._zen_service_instance_type = zen_service_instance_type

    @property
    def zen_service_instance_uid(self):
        """Gets the zen_service_instance_uid of this ReservedServiceInstanceInfo.  # noqa: E501

        zen service instance uid  # noqa: E501

        :return: The zen_service_instance_uid of this ReservedServiceInstanceInfo.  # noqa: E501
        :rtype: str
        """
        return self._zen_service_instance_uid

    @zen_service_instance_uid.setter
    def zen_service_instance_uid(self, zen_service_instance_uid):
        """Sets the zen_service_instance_uid of this ReservedServiceInstanceInfo.

        zen service instance uid  # noqa: E501

        :param zen_service_instance_uid: The zen_service_instance_uid of this ReservedServiceInstanceInfo.  # noqa: E501
        :type: str
        """

        self._zen_service_instance_uid = zen_service_instance_uid

    @property
    def zen_service_instance_user_name(self):
        """Gets the zen_service_instance_user_name of this ReservedServiceInstanceInfo.  # noqa: E501

        zen service instance username  # noqa: E501

        :return: The zen_service_instance_user_name of this ReservedServiceInstanceInfo.  # noqa: E501
        :rtype: str
        """
        return self._zen_service_instance_user_name

    @zen_service_instance_user_name.setter
    def zen_service_instance_user_name(self, zen_service_instance_user_name):
        """Sets the zen_service_instance_user_name of this ReservedServiceInstanceInfo.

        zen service instance username  # noqa: E501

        :param zen_service_instance_user_name: The zen_service_instance_user_name of this ReservedServiceInstanceInfo.  # noqa: E501
        :type: str
        """

        self._zen_service_instance_user_name = zen_service_instance_user_name

    @property
    def zen_service_instance_version(self):
        """Gets the zen_service_instance_version of this ReservedServiceInstanceInfo.  # noqa: E501

        version of the type.  # noqa: E501

        :return: The zen_service_instance_version of this ReservedServiceInstanceInfo.  # noqa: E501
        :rtype: str
        """
        return self._zen_service_instance_version

    @zen_service_instance_version.setter
    def zen_service_instance_version(self, zen_service_instance_version):
        """Sets the zen_service_instance_version of this ReservedServiceInstanceInfo.

        version of the type.  # noqa: E501

        :param zen_service_instance_version: The zen_service_instance_version of this ReservedServiceInstanceInfo.  # noqa: E501
        :type: str
        """

        self._zen_service_instance_version = zen_service_instance_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReservedServiceInstanceInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReservedServiceInstanceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
