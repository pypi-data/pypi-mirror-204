# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateArguments(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataplane_id': 'str',
        'deployment_id': 'str',
        'description': 'str',
        'metadata': 'object',
        'org_id': 'str',
        'owner_username': 'str',
        'parameters': 'object',
        'resources': 'Resources'
    }

    attribute_map = {
        'dataplane_id': 'dataplane_id',
        'deployment_id': 'deployment_id',
        'description': 'description',
        'metadata': 'metadata',
        'org_id': 'org_id',
        'owner_username': 'owner_username',
        'parameters': 'parameters',
        'resources': 'resources'
    }

    def __init__(self, dataplane_id=None, deployment_id=None, description=None, metadata=None, org_id=None, owner_username=None, parameters=None, resources=None):  # noqa: E501
        """CreateArguments - a model defined in Swagger"""  # noqa: E501

        self._dataplane_id = None
        self._deployment_id = None
        self._description = None
        self._metadata = None
        self._org_id = None
        self._owner_username = None
        self._parameters = None
        self._resources = None
        self.discriminator = None

        if dataplane_id is not None:
            self.dataplane_id = dataplane_id
        if deployment_id is not None:
            self.deployment_id = deployment_id
        if description is not None:
            self.description = description
        if metadata is not None:
            self.metadata = metadata
        if org_id is not None:
            self.org_id = org_id
        if owner_username is not None:
            self.owner_username = owner_username
        if parameters is not None:
            self.parameters = parameters
        if resources is not None:
            self.resources = resources

    @property
    def dataplane_id(self):
        """Gets the dataplane_id of this CreateArguments.  # noqa: E501

        dataplane id which the service instance be belongs to  # noqa: E501

        :return: The dataplane_id of this CreateArguments.  # noqa: E501
        :rtype: str
        """
        return self._dataplane_id

    @dataplane_id.setter
    def dataplane_id(self, dataplane_id):
        """Sets the dataplane_id of this CreateArguments.

        dataplane id which the service instance be belongs to  # noqa: E501

        :param dataplane_id: The dataplane_id of this CreateArguments.  # noqa: E501
        :type: str
        """

        self._dataplane_id = dataplane_id

    @property
    def deployment_id(self):
        """Gets the deployment_id of this CreateArguments.  # noqa: E501

        Deployment ID and only used when add-on has deployment  # noqa: E501

        :return: The deployment_id of this CreateArguments.  # noqa: E501
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this CreateArguments.

        Deployment ID and only used when add-on has deployment  # noqa: E501

        :param deployment_id: The deployment_id of this CreateArguments.  # noqa: E501
        :type: str
        """

        self._deployment_id = deployment_id

    @property
    def description(self):
        """Gets the description of this CreateArguments.  # noqa: E501

        Description of the service instance  # noqa: E501

        :return: The description of this CreateArguments.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateArguments.

        Description of the service instance  # noqa: E501

        :param description: The description of this CreateArguments.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this CreateArguments.  # noqa: E501

        Free-form object which includes non-mandatory fields used by service provider, these are persisted to metastore DB  # noqa: E501

        :return: The metadata of this CreateArguments.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateArguments.

        Free-form object which includes non-mandatory fields used by service provider, these are persisted to metastore DB  # noqa: E501

        :param metadata: The metadata of this CreateArguments.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def org_id(self):
        """Gets the org_id of this CreateArguments.  # noqa: E501

        organization id which the service instance belongs to  # noqa: E501

        :return: The org_id of this CreateArguments.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this CreateArguments.

        organization id which the service instance belongs to  # noqa: E501

        :param org_id: The org_id of this CreateArguments.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def owner_username(self):
        """Gets the owner_username of this CreateArguments.  # noqa: E501

        this field is optional. Can be Used by services like Db2/oz  # noqa: E501

        :return: The owner_username of this CreateArguments.  # noqa: E501
        :rtype: str
        """
        return self._owner_username

    @owner_username.setter
    def owner_username(self, owner_username):
        """Sets the owner_username of this CreateArguments.

        this field is optional. Can be Used by services like Db2/oz  # noqa: E501

        :param owner_username: The owner_username of this CreateArguments.  # noqa: E501
        :type: str
        """

        self._owner_username = owner_username

    @property
    def parameters(self):
        """Gets the parameters of this CreateArguments.  # noqa: E501

        Free-form object which includes mandatory fields required to create service instance, these are persisted to metastore DB  # noqa: E501

        :return: The parameters of this CreateArguments.  # noqa: E501
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CreateArguments.

        Free-form object which includes mandatory fields required to create service instance, these are persisted to metastore DB  # noqa: E501

        :param parameters: The parameters of this CreateArguments.  # noqa: E501
        :type: object
        """

        self._parameters = parameters

    @property
    def resources(self):
        """Gets the resources of this CreateArguments.  # noqa: E501


        :return: The resources of this CreateArguments.  # noqa: E501
        :rtype: Resources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this CreateArguments.


        :param resources: The resources of this CreateArguments.  # noqa: E501
        :type: Resources
        """

        self._resources = resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateArguments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateArguments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
