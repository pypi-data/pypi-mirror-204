# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomCardReplaceObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'CardObject',
        'data_url': 'str',
        'description': 'str',
        'drilldown_url': 'str',
        'order': 'int',
        'permissions': 'list[str]',
        'refresh_rate': 'int',
        'roles': 'list[str]',
        'service_defined_id': 'str',
        'template_type': 'str',
        'title': 'str',
        'window_open_target': 'str'
    }

    attribute_map = {
        'data': 'data',
        'data_url': 'data_url',
        'description': 'description',
        'drilldown_url': 'drilldown_url',
        'order': 'order',
        'permissions': 'permissions',
        'refresh_rate': 'refresh_rate',
        'roles': 'roles',
        'service_defined_id': 'service_defined_id',
        'template_type': 'template_type',
        'title': 'title',
        'window_open_target': 'window_open_target'
    }

    def __init__(self, data=None, data_url=None, description=None, drilldown_url=None, order=None, permissions=None, refresh_rate=None, roles=None, service_defined_id=None, template_type=None, title=None, window_open_target=None):  # noqa: E501
        """CustomCardReplaceObject - a model defined in Swagger"""  # noqa: E501

        self._data = None
        self._data_url = None
        self._description = None
        self._drilldown_url = None
        self._order = None
        self._permissions = None
        self._refresh_rate = None
        self._roles = None
        self._service_defined_id = None
        self._template_type = None
        self._title = None
        self._window_open_target = None
        self.discriminator = None

        if data is not None:
            self.data = data
        if data_url is not None:
            self.data_url = data_url
        if description is not None:
            self.description = description
        if drilldown_url is not None:
            self.drilldown_url = drilldown_url
        self.order = order
        self.permissions = permissions
        if refresh_rate is not None:
            self.refresh_rate = refresh_rate
        if roles is not None:
            self.roles = roles
        if service_defined_id is not None:
            self.service_defined_id = service_defined_id
        self.template_type = template_type
        self.title = title
        if window_open_target is not None:
            self.window_open_target = window_open_target

    @property
    def data(self):
        """Gets the data of this CustomCardReplaceObject.  # noqa: E501


        :return: The data of this CustomCardReplaceObject.  # noqa: E501
        :rtype: CardObject
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CustomCardReplaceObject.


        :param data: The data of this CustomCardReplaceObject.  # noqa: E501
        :type: CardObject
        """

        self._data = data

    @property
    def data_url(self):
        """Gets the data_url of this CustomCardReplaceObject.  # noqa: E501

        URI of the endpoint that'll get the data to populate the card  # noqa: E501

        :return: The data_url of this CustomCardReplaceObject.  # noqa: E501
        :rtype: str
        """
        return self._data_url

    @data_url.setter
    def data_url(self, data_url):
        """Sets the data_url of this CustomCardReplaceObject.

        URI of the endpoint that'll get the data to populate the card  # noqa: E501

        :param data_url: The data_url of this CustomCardReplaceObject.  # noqa: E501
        :type: str
        """

        self._data_url = data_url

    @property
    def description(self):
        """Gets the description of this CustomCardReplaceObject.  # noqa: E501

        short description about the Card  # noqa: E501

        :return: The description of this CustomCardReplaceObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomCardReplaceObject.

        short description about the Card  # noqa: E501

        :param description: The description of this CustomCardReplaceObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def drilldown_url(self):
        """Gets the drilldown_url of this CustomCardReplaceObject.  # noqa: E501

        URL where you will take the user on click of the card  # noqa: E501

        :return: The drilldown_url of this CustomCardReplaceObject.  # noqa: E501
        :rtype: str
        """
        return self._drilldown_url

    @drilldown_url.setter
    def drilldown_url(self, drilldown_url):
        """Sets the drilldown_url of this CustomCardReplaceObject.

        URL where you will take the user on click of the card  # noqa: E501

        :param drilldown_url: The drilldown_url of this CustomCardReplaceObject.  # noqa: E501
        :type: str
        """

        self._drilldown_url = drilldown_url

    @property
    def order(self):
        """Gets the order of this CustomCardReplaceObject.  # noqa: E501

        the place where the card should be number between 1-50  # noqa: E501

        :return: The order of this CustomCardReplaceObject.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CustomCardReplaceObject.

        the place where the card should be number between 1-50  # noqa: E501

        :param order: The order of this CustomCardReplaceObject.  # noqa: E501
        :type: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")  # noqa: E501
        if order is not None and order > 50:  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `50`")  # noqa: E501
        if order is not None and order < 1:  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `1`")  # noqa: E501

        self._order = order

    @property
    def permissions(self):
        """Gets the permissions of this CustomCardReplaceObject.  # noqa: E501

        an array of user permissions from CPD platform that shows the card to a user having any of the listed permissions.  # noqa: E501

        :return: The permissions of this CustomCardReplaceObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this CustomCardReplaceObject.

        an array of user permissions from CPD platform that shows the card to a user having any of the listed permissions.  # noqa: E501

        :param permissions: The permissions of this CustomCardReplaceObject.  # noqa: E501
        :type: list[str]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")  # noqa: E501

        self._permissions = permissions

    @property
    def refresh_rate(self):
        """Gets the refresh_rate of this CustomCardReplaceObject.  # noqa: E501

        Refresh rate  # noqa: E501

        :return: The refresh_rate of this CustomCardReplaceObject.  # noqa: E501
        :rtype: int
        """
        return self._refresh_rate

    @refresh_rate.setter
    def refresh_rate(self, refresh_rate):
        """Sets the refresh_rate of this CustomCardReplaceObject.

        Refresh rate  # noqa: E501

        :param refresh_rate: The refresh_rate of this CustomCardReplaceObject.  # noqa: E501
        :type: int
        """

        self._refresh_rate = refresh_rate

    @property
    def roles(self):
        """Gets the roles of this CustomCardReplaceObject.  # noqa: E501

        an array of authorized roles from CPD platform that shows the card to a user having any of the listed roles.  # noqa: E501

        :return: The roles of this CustomCardReplaceObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this CustomCardReplaceObject.

        an array of authorized roles from CPD platform that shows the card to a user having any of the listed roles.  # noqa: E501

        :param roles: The roles of this CustomCardReplaceObject.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def service_defined_id(self):
        """Gets the service_defined_id of this CustomCardReplaceObject.  # noqa: E501

        identifiers that can be defined by the services for use in their UI components.  # noqa: E501

        :return: The service_defined_id of this CustomCardReplaceObject.  # noqa: E501
        :rtype: str
        """
        return self._service_defined_id

    @service_defined_id.setter
    def service_defined_id(self, service_defined_id):
        """Sets the service_defined_id of this CustomCardReplaceObject.

        identifiers that can be defined by the services for use in their UI components.  # noqa: E501

        :param service_defined_id: The service_defined_id of this CustomCardReplaceObject.  # noqa: E501
        :type: str
        """

        self._service_defined_id = service_defined_id

    @property
    def template_type(self):
        """Gets the template_type of this CustomCardReplaceObject.  # noqa: E501

        type of card to be displayed  # noqa: E501

        :return: The template_type of this CustomCardReplaceObject.  # noqa: E501
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this CustomCardReplaceObject.

        type of card to be displayed  # noqa: E501

        :param template_type: The template_type of this CustomCardReplaceObject.  # noqa: E501
        :type: str
        """
        if template_type is None:
            raise ValueError("Invalid value for `template_type`, must not be `None`")  # noqa: E501

        self._template_type = template_type

    @property
    def title(self):
        """Gets the title of this CustomCardReplaceObject.  # noqa: E501

        title of the card that will be displayed in the card  # noqa: E501

        :return: The title of this CustomCardReplaceObject.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CustomCardReplaceObject.

        title of the card that will be displayed in the card  # noqa: E501

        :param title: The title of this CustomCardReplaceObject.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def window_open_target(self):
        """Gets the window_open_target of this CustomCardReplaceObject.  # noqa: E501

        href to open up the card in a new tab  # noqa: E501

        :return: The window_open_target of this CustomCardReplaceObject.  # noqa: E501
        :rtype: str
        """
        return self._window_open_target

    @window_open_target.setter
    def window_open_target(self, window_open_target):
        """Sets the window_open_target of this CustomCardReplaceObject.

        href to open up the card in a new tab  # noqa: E501

        :param window_open_target: The window_open_target of this CustomCardReplaceObject.  # noqa: E501
        :type: str
        """

        self._window_open_target = window_open_target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomCardReplaceObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomCardReplaceObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
