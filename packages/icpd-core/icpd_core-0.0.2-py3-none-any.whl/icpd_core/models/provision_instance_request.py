# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProvisionInstanceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addon_type': 'str',
        'addon_version': 'str',
        'create_arguments': 'CreateArguments',
        'display_name': 'str',
        'namespace': 'str',
        'pre_existing_owner': 'bool',
        'transient_fields': 'object'
    }

    attribute_map = {
        'addon_type': 'addon_type',
        'addon_version': 'addon_version',
        'create_arguments': 'create_arguments',
        'display_name': 'display_name',
        'namespace': 'namespace',
        'pre_existing_owner': 'pre_existing_owner',
        'transient_fields': 'transient_fields'
    }

    def __init__(self, addon_type=None, addon_version=None, create_arguments=None, display_name=None, namespace=None, pre_existing_owner=False, transient_fields=None):  # noqa: E501
        """ProvisionInstanceRequest - a model defined in Swagger"""  # noqa: E501

        self._addon_type = None
        self._addon_version = None
        self._create_arguments = None
        self._display_name = None
        self._namespace = None
        self._pre_existing_owner = None
        self._transient_fields = None
        self.discriminator = None

        if addon_type is not None:
            self.addon_type = addon_type
        if addon_version is not None:
            self.addon_version = addon_version
        self.create_arguments = create_arguments
        if display_name is not None:
            self.display_name = display_name
        if namespace is not None:
            self.namespace = namespace
        if pre_existing_owner is not None:
            self.pre_existing_owner = pre_existing_owner
        if transient_fields is not None:
            self.transient_fields = transient_fields

    @property
    def addon_type(self):
        """Gets the addon_type of this ProvisionInstanceRequest.  # noqa: E501

        Type of the add-on  # noqa: E501

        :return: The addon_type of this ProvisionInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._addon_type

    @addon_type.setter
    def addon_type(self, addon_type):
        """Sets the addon_type of this ProvisionInstanceRequest.

        Type of the add-on  # noqa: E501

        :param addon_type: The addon_type of this ProvisionInstanceRequest.  # noqa: E501
        :type: str
        """

        self._addon_type = addon_type

    @property
    def addon_version(self):
        """Gets the addon_version of this ProvisionInstanceRequest.  # noqa: E501

        Version of the add-on  # noqa: E501

        :return: The addon_version of this ProvisionInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._addon_version

    @addon_version.setter
    def addon_version(self, addon_version):
        """Sets the addon_version of this ProvisionInstanceRequest.

        Version of the add-on  # noqa: E501

        :param addon_version: The addon_version of this ProvisionInstanceRequest.  # noqa: E501
        :type: str
        """

        self._addon_version = addon_version

    @property
    def create_arguments(self):
        """Gets the create_arguments of this ProvisionInstanceRequest.  # noqa: E501


        :return: The create_arguments of this ProvisionInstanceRequest.  # noqa: E501
        :rtype: CreateArguments
        """
        return self._create_arguments

    @create_arguments.setter
    def create_arguments(self, create_arguments):
        """Sets the create_arguments of this ProvisionInstanceRequest.


        :param create_arguments: The create_arguments of this ProvisionInstanceRequest.  # noqa: E501
        :type: CreateArguments
        """
        if create_arguments is None:
            raise ValueError("Invalid value for `create_arguments`, must not be `None`")  # noqa: E501

        self._create_arguments = create_arguments

    @property
    def display_name(self):
        """Gets the display_name of this ProvisionInstanceRequest.  # noqa: E501

        Display name of the service instance  # noqa: E501

        :return: The display_name of this ProvisionInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ProvisionInstanceRequest.

        Display name of the service instance  # noqa: E501

        :param display_name: The display_name of this ProvisionInstanceRequest.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def namespace(self):
        """Gets the namespace of this ProvisionInstanceRequest.  # noqa: E501

        Kubernetes namespace where instance resides  # noqa: E501

        :return: The namespace of this ProvisionInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ProvisionInstanceRequest.

        Kubernetes namespace where instance resides  # noqa: E501

        :param namespace: The namespace of this ProvisionInstanceRequest.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def pre_existing_owner(self):
        """Gets the pre_existing_owner of this ProvisionInstanceRequest.  # noqa: E501


        :return: The pre_existing_owner of this ProvisionInstanceRequest.  # noqa: E501
        :rtype: bool
        """
        return self._pre_existing_owner

    @pre_existing_owner.setter
    def pre_existing_owner(self, pre_existing_owner):
        """Sets the pre_existing_owner of this ProvisionInstanceRequest.


        :param pre_existing_owner: The pre_existing_owner of this ProvisionInstanceRequest.  # noqa: E501
        :type: bool
        """

        self._pre_existing_owner = pre_existing_owner

    @property
    def transient_fields(self):
        """Gets the transient_fields of this ProvisionInstanceRequest.  # noqa: E501

        this object will be forwarded to service provider without saving to database  # noqa: E501

        :return: The transient_fields of this ProvisionInstanceRequest.  # noqa: E501
        :rtype: object
        """
        return self._transient_fields

    @transient_fields.setter
    def transient_fields(self, transient_fields):
        """Sets the transient_fields of this ProvisionInstanceRequest.

        this object will be forwarded to service provider without saving to database  # noqa: E501

        :param transient_fields: The transient_fields of this ProvisionInstanceRequest.  # noqa: E501
        :type: object
        """

        self._transient_fields = transient_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvisionInstanceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisionInstanceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
