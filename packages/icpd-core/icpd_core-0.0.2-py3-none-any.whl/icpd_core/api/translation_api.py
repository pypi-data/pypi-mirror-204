# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from icpd_core.api_client import ApiClient


class TranslationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_translation(self, service_name, accept_language, **kwargs):  # noqa: E501
        """Get translations given a service and language  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_translation(service_name, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: name of the service which is bringing in the translation. (required)
        :param str accept_language: The list of accepted languages (required)
        :param str authorization: Bearer token based authentication.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_translation_with_http_info(service_name, accept_language, **kwargs)  # noqa: E501
        else:
            (data) = self.get_translation_with_http_info(service_name, accept_language, **kwargs)  # noqa: E501
            return data

    def get_translation_with_http_info(self, service_name, accept_language, **kwargs):  # noqa: E501
        """Get translations given a service and language  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_translation_with_http_info(service_name, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: name of the service which is bringing in the translation. (required)
        :param str accept_language: The list of accepted languages (required)
        :param str authorization: Bearer token based authentication.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'accept_language', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_translation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if ('service_name' not in params or
                params['service_name'] is None):
            raise ValueError("Missing the required parameter `service_name` when calling `get_translation`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `get_translation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['service_name'] = params['service_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/translation/{service_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_translation(self, token, service_name, translation_package, **kwargs):  # noqa: E501
        """Adding new translation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_translation(token, service_name, translation_package, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: Shared token (required)
        :param str service_name: name of the service which is bringing in the translation. (required)
        :param file translation_package: File to be uploaded, it should be an archive. (required)
        :return: SuccessResponseV3
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_translation_with_http_info(token, service_name, translation_package, **kwargs)  # noqa: E501
        else:
            (data) = self.put_translation_with_http_info(token, service_name, translation_package, **kwargs)  # noqa: E501
            return data

    def put_translation_with_http_info(self, token, service_name, translation_package, **kwargs):  # noqa: E501
        """Adding new translation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_translation_with_http_info(token, service_name, translation_package, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: Shared token (required)
        :param str service_name: name of the service which is bringing in the translation. (required)
        :param file translation_package: File to be uploaded, it should be an archive. (required)
        :return: SuccessResponseV3
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'service_name', 'translation_package']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_translation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `put_translation`")  # noqa: E501
        # verify the required parameter 'service_name' is set
        if ('service_name' not in params or
                params['service_name'] is None):
            raise ValueError("Missing the required parameter `service_name` when calling `put_translation`")  # noqa: E501
        # verify the required parameter 'translation_package' is set
        if ('translation_package' not in params or
                params['translation_package'] is None):
            raise ValueError("Missing the required parameter `translation_package` when calling `put_translation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['service_name'] = params['service_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'token' in params:
            header_params['token'] = params['token']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'translation_package' in params:
            local_var_files['translation_package'] = params['translation_package']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/translation/{service_name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseV3',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
