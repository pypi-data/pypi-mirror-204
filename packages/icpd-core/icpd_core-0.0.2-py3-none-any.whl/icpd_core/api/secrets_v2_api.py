# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from icpd_core.api_client import ApiClient


class SecretsV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_secret_members_v2(self, secret_urn, body, **kwargs):  # noqa: E501
        """Share a secret  # noqa: E501

        Allows users or groups to use secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_secret_members_v2(secret_urn, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret_urn: unique value identifying the secret for the user (required)
        :param SecretMembers body: List of users or/and groups (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: SecretResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_secret_members_v2_with_http_info(secret_urn, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_secret_members_v2_with_http_info(secret_urn, body, **kwargs)  # noqa: E501
            return data

    def add_secret_members_v2_with_http_info(self, secret_urn, body, **kwargs):  # noqa: E501
        """Share a secret  # noqa: E501

        Allows users or groups to use secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_secret_members_v2_with_http_info(secret_urn, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret_urn: unique value identifying the secret for the user (required)
        :param SecretMembers body: List of users or/and groups (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: SecretResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secret_urn', 'body', 'jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_secret_members_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'secret_urn' is set
        if ('secret_urn' not in params or
                params['secret_urn'] is None):
            raise ValueError("Missing the required parameter `secret_urn` when calling `add_secret_members_v2`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_secret_members_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'secret_urn' in params:
            path_params['secret_urn'] = params['secret_urn']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/secrets/{secret_urn}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecretResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_secret_v2(self, secret_urn, **kwargs):  # noqa: E501
        """Delete secret from vault  # noqa: E501

        Delete secret entirely from vault  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_secret_v2(secret_urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret_urn: unique value identifying the secret for the user (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: SecretResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_secret_v2_with_http_info(secret_urn, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_secret_v2_with_http_info(secret_urn, **kwargs)  # noqa: E501
            return data

    def delete_secret_v2_with_http_info(self, secret_urn, **kwargs):  # noqa: E501
        """Delete secret from vault  # noqa: E501

        Delete secret entirely from vault  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_secret_v2_with_http_info(secret_urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret_urn: unique value identifying the secret for the user (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: SecretResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secret_urn', 'jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_secret_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'secret_urn' is set
        if ('secret_urn' not in params or
                params['secret_urn'] is None):
            raise ValueError("Missing the required parameter `secret_urn` when calling `delete_secret_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'secret_urn' in params:
            path_params['secret_urn'] = params['secret_urn']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/secrets/{secret_urn}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecretResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bulk_secrets_v2(self, secret_urns, **kwargs):  # noqa: E501
        """Bulk retrieve secrets  # noqa: E501

        allows users to bulk retrieve details for multiple secrets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bulk_secrets_v2(secret_urns, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret_urns: comma separated secret_urns (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: BulkGetSecretsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bulk_secrets_v2_with_http_info(secret_urns, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bulk_secrets_v2_with_http_info(secret_urns, **kwargs)  # noqa: E501
            return data

    def get_bulk_secrets_v2_with_http_info(self, secret_urns, **kwargs):  # noqa: E501
        """Bulk retrieve secrets  # noqa: E501

        allows users to bulk retrieve details for multiple secrets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bulk_secrets_v2_with_http_info(secret_urns, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret_urns: comma separated secret_urns (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: BulkGetSecretsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secret_urns', 'jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bulk_secrets_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'secret_urns' is set
        if ('secret_urns' not in params or
                params['secret_urns'] is None):
            raise ValueError("Missing the required parameter `secret_urns` when calling `get_bulk_secrets_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'secret_urns' in params:
            query_params.append(('secret_urns', params['secret_urns']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/secrets/bulk', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkGetSecretsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_secret_details_v2(self, secret_urn, **kwargs):  # noqa: E501
        """Retrieve a specific secret details  # noqa: E501

        Retrieve secret details by secret urn  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_secret_details_v2(secret_urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret_urn: unique value identifying the secret for the user (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool exclude_secret_data: For external vault fetches only metadata.
        :return: SecretDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_secret_details_v2_with_http_info(secret_urn, **kwargs)  # noqa: E501
        else:
            (data) = self.get_secret_details_v2_with_http_info(secret_urn, **kwargs)  # noqa: E501
            return data

    def get_secret_details_v2_with_http_info(self, secret_urn, **kwargs):  # noqa: E501
        """Retrieve a specific secret details  # noqa: E501

        Retrieve secret details by secret urn  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_secret_details_v2_with_http_info(secret_urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret_urn: unique value identifying the secret for the user (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool exclude_secret_data: For external vault fetches only metadata.
        :return: SecretDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secret_urn', 'jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id', 'exclude_secret_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_secret_details_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'secret_urn' is set
        if ('secret_urn' not in params or
                params['secret_urn'] is None):
            raise ValueError("Missing the required parameter `secret_urn` when calling `get_secret_details_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'secret_urn' in params:
            path_params['secret_urn'] = params['secret_urn']  # noqa: E501

        query_params = []
        if 'exclude_secret_data' in params:
            query_params.append(('exclude_secret_data', params['exclude_secret_data']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/secrets/{secret_urn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecretDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_secret_members_v2(self, secret_urn, **kwargs):  # noqa: E501
        """Get secret members  # noqa: E501

        Retrieve users, groups associated with secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_secret_members_v2(secret_urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret_urn: unique value identifying the secret for the user (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param int offset: The number of secret members to skip before starting to collect the result set.
        :param int limit: The number of secret members to return.
        :return: GetSecretMembersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_secret_members_v2_with_http_info(secret_urn, **kwargs)  # noqa: E501
        else:
            (data) = self.get_secret_members_v2_with_http_info(secret_urn, **kwargs)  # noqa: E501
            return data

    def get_secret_members_v2_with_http_info(self, secret_urn, **kwargs):  # noqa: E501
        """Get secret members  # noqa: E501

        Retrieve users, groups associated with secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_secret_members_v2_with_http_info(secret_urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret_urn: unique value identifying the secret for the user (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param int offset: The number of secret members to skip before starting to collect the result set.
        :param int limit: The number of secret members to return.
        :return: GetSecretMembersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secret_urn', 'jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_secret_members_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'secret_urn' is set
        if ('secret_urn' not in params or
                params['secret_urn'] is None):
            raise ValueError("Missing the required parameter `secret_urn` when calling `get_secret_members_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'secret_urn' in params:
            path_params['secret_urn'] = params['secret_urn']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/secrets/{secret_urn}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSecretMembersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_secrets_v2(self, **kwargs):  # noqa: E501
        """Get a list of all secrets  # noqa: E501

        Retrieve the list of all secrets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_secrets_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param int offset: The number of secrets to skip before starting to collect the result set.
        :param int limit: The number of secrets to return.
        :param str sort: sort by the field e.g. sort=secret_name or sort=-secret_name for descending,\\n supported keys are secret_name, type, description, created_by, vault_name, updated_at
        :param str type: comma separated secret type - e.g. credentials,token
        :param str secret_name: secret name
        :param str match: match on all or any criteria, possible values
        :param bool include_secrets_for_management: if true returns all secrets when user has manage vaults & secrets permission
        :return: GetAllSecretsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_secrets_v2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_secrets_v2_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_secrets_v2_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all secrets  # noqa: E501

        Retrieve the list of all secrets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_secrets_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param int offset: The number of secrets to skip before starting to collect the result set.
        :param int limit: The number of secrets to return.
        :param str sort: sort by the field e.g. sort=secret_name or sort=-secret_name for descending,\\n supported keys are secret_name, type, description, created_by, vault_name, updated_at
        :param str type: comma separated secret type - e.g. credentials,token
        :param str secret_name: secret name
        :param str match: match on all or any criteria, possible values
        :param bool include_secrets_for_management: if true returns all secrets when user has manage vaults & secrets permission
        :return: GetAllSecretsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id', 'offset', 'limit', 'sort', 'type', 'secret_name', 'match', 'include_secrets_for_management']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_secrets_v2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'secret_name' in params:
            query_params.append(('secret_name', params['secret_name']))  # noqa: E501
        if 'match' in params:
            query_params.append(('match', params['match']))  # noqa: E501
        if 'include_secrets_for_management' in params:
            query_params.append(('include_secrets_for_management', params['include_secrets_for_management']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/secrets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAllSecretsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_secret_v2(self, secret_urn, body, **kwargs):  # noqa: E501
        """Update or refresh stored secret  # noqa: E501

        Update previously secured sensitive information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_secret_v2(secret_urn, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret_urn: unique value identifying the secret for the user (required)
        :param PatchSecretRequest body: Updated sensitive payload to be secured (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool validate: Validate secret reference
        :param bool validate_and_save: Validate secret reference and save
        :return: SecretDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_secret_v2_with_http_info(secret_urn, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_secret_v2_with_http_info(secret_urn, body, **kwargs)  # noqa: E501
            return data

    def patch_secret_v2_with_http_info(self, secret_urn, body, **kwargs):  # noqa: E501
        """Update or refresh stored secret  # noqa: E501

        Update previously secured sensitive information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_secret_v2_with_http_info(secret_urn, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret_urn: unique value identifying the secret for the user (required)
        :param PatchSecretRequest body: Updated sensitive payload to be secured (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool validate: Validate secret reference
        :param bool validate_and_save: Validate secret reference and save
        :return: SecretDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secret_urn', 'body', 'jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id', 'validate', 'validate_and_save']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_secret_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'secret_urn' is set
        if ('secret_urn' not in params or
                params['secret_urn'] is None):
            raise ValueError("Missing the required parameter `secret_urn` when calling `patch_secret_v2`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_secret_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'secret_urn' in params:
            path_params['secret_urn'] = params['secret_urn']  # noqa: E501

        query_params = []
        if 'validate' in params:
            query_params.append(('validate', params['validate']))  # noqa: E501
        if 'validate_and_save' in params:
            query_params.append(('validate_and_save', params['validate_and_save']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/secrets/{secret_urn}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecretDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_secret_v2(self, body, **kwargs):  # noqa: E501
        """Store secret or reference  # noqa: E501

        Secure user provided secret in the vault  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_secret_v2(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewSecretRequest body: Sensitive payload to be secured (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool validate: Validate secret reference
        :param bool validate_and_save: Validate secret reference and save
        :return: SecretResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_secret_v2_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_secret_v2_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_secret_v2_with_http_info(self, body, **kwargs):  # noqa: E501
        """Store secret or reference  # noqa: E501

        Secure user provided secret in the vault  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_secret_v2_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewSecretRequest body: Sensitive payload to be secured (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool validate: Validate secret reference
        :param bool validate_and_save: Validate secret reference and save
        :return: SecretResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id', 'validate', 'validate_and_save']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_secret_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_secret_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'validate' in params:
            query_params.append(('validate', params['validate']))  # noqa: E501
        if 'validate_and_save' in params:
            query_params.append(('validate_and_save', params['validate_and_save']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/secrets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecretResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_secret_members_v2(self, secret_urn, body, **kwargs):  # noqa: E501
        """Unshare secret  # noqa: E501

        Remove secret access for users or groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_secret_members_v2(secret_urn, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret_urn: unique value identifying the secret for the user (required)
        :param SecretMembers body: List of users or/and groups (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: SecretResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_secret_members_v2_with_http_info(secret_urn, body, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_secret_members_v2_with_http_info(secret_urn, body, **kwargs)  # noqa: E501
            return data

    def remove_secret_members_v2_with_http_info(self, secret_urn, body, **kwargs):  # noqa: E501
        """Unshare secret  # noqa: E501

        Remove secret access for users or groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_secret_members_v2_with_http_info(secret_urn, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret_urn: unique value identifying the secret for the user (required)
        :param SecretMembers body: List of users or/and groups (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: SecretResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secret_urn', 'body', 'jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_secret_members_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'secret_urn' is set
        if ('secret_urn' not in params or
                params['secret_urn'] is None):
            raise ValueError("Missing the required parameter `secret_urn` when calling `remove_secret_members_v2`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `remove_secret_members_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'secret_urn' in params:
            path_params['secret_urn'] = params['secret_urn']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/secrets/{secret_urn}/members', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecretResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_secret_members_v2(self, secret_urn, body, **kwargs):  # noqa: E501
        """Share / unshare a secret  # noqa: E501

        Add / remove users or groups from secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_secret_members_v2(secret_urn, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret_urn: unique value identifying the secret for the user (required)
        :param UpdateSecretMembers body: List of users or/and groups (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: SecretResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_secret_members_v2_with_http_info(secret_urn, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_secret_members_v2_with_http_info(secret_urn, body, **kwargs)  # noqa: E501
            return data

    def update_secret_members_v2_with_http_info(self, secret_urn, body, **kwargs):  # noqa: E501
        """Share / unshare a secret  # noqa: E501

        Add / remove users or groups from secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_secret_members_v2_with_http_info(secret_urn, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret_urn: unique value identifying the secret for the user (required)
        :param UpdateSecretMembers body: List of users or/and groups (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: SecretResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secret_urn', 'body', 'jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_secret_members_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'secret_urn' is set
        if ('secret_urn' not in params or
                params['secret_urn'] is None):
            raise ValueError("Missing the required parameter `secret_urn` when calling `update_secret_members_v2`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_secret_members_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'secret_urn' in params:
            path_params['secret_urn'] = params['secret_urn']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/secrets/{secret_urn}/members', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecretResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
