# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from icpd_core.api_client import ApiClient


class VaultsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_vault(self, vault_name, **kwargs):  # noqa: E501
        """Delete external vault integration  # noqa: E501

        Delete a specific external vault integration for user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vault(vault_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_name: unique value identifying the vault configured for the user (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_vault_with_http_info(vault_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_vault_with_http_info(vault_name, **kwargs)  # noqa: E501
            return data

    def delete_vault_with_http_info(self, vault_name, **kwargs):  # noqa: E501
        """Delete external vault integration  # noqa: E501

        Delete a specific external vault integration for user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vault_with_http_info(vault_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_name: unique value identifying the vault configured for the user (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vault_name', 'jwt_auth_user_payload', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vault" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vault_name' is set
        if ('vault_name' not in params or
                params['vault_name'] is None):
            raise ValueError("Missing the required parameter `vault_name` when calling `delete_vault`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_name' in params:
            path_params['vault_name'] = params['vault_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/vaults/{vault_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vault_secrets_list(self, vault_name, **kwargs):  # noqa: E501
        """Get a list of all secrets for a vault  # noqa: E501

        Retrieve the list of all secrets of the given vault name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vault_secrets_list(vault_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_name: unique value identifying the vault configured for the user (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str accept_language: Language in which the add-on placeholder strings like short/long description will be returned
        :return: SuccessGetResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vault_secrets_list_with_http_info(vault_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vault_secrets_list_with_http_info(vault_name, **kwargs)  # noqa: E501
            return data

    def get_vault_secrets_list_with_http_info(self, vault_name, **kwargs):  # noqa: E501
        """Get a list of all secrets for a vault  # noqa: E501

        Retrieve the list of all secrets of the given vault name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vault_secrets_list_with_http_info(vault_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_name: unique value identifying the vault configured for the user (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str accept_language: Language in which the add-on placeholder strings like short/long description will be returned
        :return: SuccessGetResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vault_name', 'jwt_auth_user_payload', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vault_secrets_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vault_name' is set
        if ('vault_name' not in params or
                params['vault_name'] is None):
            raise ValueError("Missing the required parameter `vault_name` when calling `get_vault_secrets_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_name' in params:
            path_params['vault_name'] = params['vault_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/vaults/{vault_name}/secrets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vault_types(self, **kwargs):  # noqa: E501
        """Get a list of all vault types  # noqa: E501

        Retrieve the list of vaults types and config details for each vault type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vault_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str accept_language: Language in which the add-on placeholder strings like short/long description will be returned
        :return: SuccessGetResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vault_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_vault_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_vault_types_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all vault types  # noqa: E501

        Retrieve the list of vaults types and config details for each vault type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vault_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str accept_language: Language in which the add-on placeholder strings like short/long description will be returned
        :return: SuccessGetResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vault_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/vaults/types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vaults(self, **kwargs):  # noqa: E501
        """Retrieve details about external vault integrations  # noqa: E501

        Retrieve details about external vault integrations for user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vaults(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str vault_name: Optional query parameter to retrieve integration details of a specific vault
        :param str type: Optional query parameter to retrieve all integration details of a specific vault type
        :return: SuccessGetResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vaults_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_vaults_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_vaults_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve details about external vault integrations  # noqa: E501

        Retrieve details about external vault integrations for user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vaults_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str vault_name: Optional query parameter to retrieve integration details of a specific vault
        :param str type: Optional query parameter to retrieve all integration details of a specific vault type
        :return: SuccessGetResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'authorization', 'vault_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vaults" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vault_name' in params:
            query_params.append(('vault_name', params['vault_name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/vaults', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_vault(self, vault_name, body, **kwargs):  # noqa: E501
        """Update external vault configuration  # noqa: E501

        Update configuration details of an external vault  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_vault(vault_name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_name: unique value identifying the vault configured for the user (required)
        :param PatchVaultPayload body: Sensitive payload to be secured (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_vault_with_http_info(vault_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_vault_with_http_info(vault_name, body, **kwargs)  # noqa: E501
            return data

    def patch_vault_with_http_info(self, vault_name, body, **kwargs):  # noqa: E501
        """Update external vault configuration  # noqa: E501

        Update configuration details of an external vault  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_vault_with_http_info(vault_name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_name: unique value identifying the vault configured for the user (required)
        :param PatchVaultPayload body: Sensitive payload to be secured (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vault_name', 'body', 'jwt_auth_user_payload', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_vault" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vault_name' is set
        if ('vault_name' not in params or
                params['vault_name'] is None):
            raise ValueError("Missing the required parameter `vault_name` when calling `patch_vault`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_vault`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_name' in params:
            path_params['vault_name'] = params['vault_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/vaults/{vault_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_vault(self, body, **kwargs):  # noqa: E501
        """Store external vault configuration  # noqa: E501

        Store configuration details to external vault  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_vault(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostVaultPayload body: Sensitive payload to be secured (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_vault_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_vault_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_vault_with_http_info(self, body, **kwargs):  # noqa: E501
        """Store external vault configuration  # noqa: E501

        Store configuration details to external vault  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_vault_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostVaultPayload body: Sensitive payload to be secured (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_vault" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_vault`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/vaults', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
