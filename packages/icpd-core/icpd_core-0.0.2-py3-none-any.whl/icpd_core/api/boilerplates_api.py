# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from icpd_core.api_client import ApiClient


class BoilerplatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_provisioning_boilerplate(self, extension_name, **kwargs):  # noqa: E501
        """get provisioning boilerplate schema  # noqa: E501

        return the boilerplate schema for the UI to render  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provisioning_boilerplate(extension_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str extension_name: the type of the addon (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str accept_language: Language in which the add-on placeholder strings like short/long description will be returned
        :return: SuccessGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_provisioning_boilerplate_with_http_info(extension_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_provisioning_boilerplate_with_http_info(extension_name, **kwargs)  # noqa: E501
            return data

    def get_provisioning_boilerplate_with_http_info(self, extension_name, **kwargs):  # noqa: E501
        """get provisioning boilerplate schema  # noqa: E501

        return the boilerplate schema for the UI to render  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provisioning_boilerplate_with_http_info(extension_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str extension_name: the type of the addon (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str accept_language: Language in which the add-on placeholder strings like short/long description will be returned
        :return: SuccessGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['extension_name', 'jwt_auth_user_payload', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provisioning_boilerplate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'extension_name' is set
        if ('extension_name' not in params or
                params['extension_name'] is None):
            raise ValueError("Missing the required parameter `extension_name` when calling `get_provisioning_boilerplate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extension_name' in params:
            path_params['extension_name'] = params['extension_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/boilerplates/provision_instance/{extension_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_instance_details_boilerplate(self, instance_id, **kwargs):  # noqa: E501
        """Returns the service instance details, plus the defined boilerplate extensions  # noqa: E501

        An endpoint which also drives the service instance details extensions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_instance_details_boilerplate(instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: service instance identifier (required)
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool include_service_status: If true service status is retrieved from the provider.
        :param str accept_language: Language in which the add-on placeholder strings like short/long description will be returned
        :return: GetInstanceWithExtensionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_instance_details_boilerplate_with_http_info(instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_instance_details_boilerplate_with_http_info(instance_id, **kwargs)  # noqa: E501
            return data

    def get_service_instance_details_boilerplate_with_http_info(self, instance_id, **kwargs):  # noqa: E501
        """Returns the service instance details, plus the defined boilerplate extensions  # noqa: E501

        An endpoint which also drives the service instance details extensions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_instance_details_boilerplate_with_http_info(instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: service instance identifier (required)
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool include_service_status: If true service status is retrieved from the provider.
        :param str accept_language: Language in which the add-on placeholder strings like short/long description will be returned
        :return: GetInstanceWithExtensionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_id', 'ibm_cpd_transaction_id', 'include_service_status', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_instance_details_boilerplate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `get_service_instance_details_boilerplate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_id' in params:
            path_params['instance_id'] = params['instance_id']  # noqa: E501

        query_params = []
        if 'include_service_status' in params:
            query_params.append(('include_service_status', params['include_service_status']))  # noqa: E501

        header_params = {}
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/boilerplates/service_instances/{instance_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetInstanceWithExtensionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_instance_display_names_boilerplate(self, **kwargs):  # noqa: E501
        """Get all instances display name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_instance_display_names_boilerplate(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool include_deleted: Include deleted instance display name
        :return: GetInstanceDisplayNames
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_instance_display_names_boilerplate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_instance_display_names_boilerplate_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_instance_display_names_boilerplate_with_http_info(self, **kwargs):  # noqa: E501
        """Get all instances display name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_instance_display_names_boilerplate_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool include_deleted: Include deleted instance display name
        :return: GetInstanceDisplayNames
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ibm_cpd_transaction_id', 'include_deleted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_instance_display_names_boilerplate" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_deleted' in params:
            query_params.append(('include_deleted', params['include_deleted']))  # noqa: E501

        header_params = {}
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/boilerplates/service_instances_display_names', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetInstanceDisplayNames',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storage_class_options(self, **kwargs):  # noqa: E501
        """Returns a list of storage class options to be used by a boilerplate form  # noqa: E501

        An endpoint that drives a storage class options dropdown  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_class_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: OptionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_storage_class_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_storage_class_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_storage_class_options_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of storage class options to be used by a boilerplate form  # noqa: E501

        An endpoint that drives a storage class options dropdown  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_class_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: OptionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storage_class_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/boilerplates/options/storageclasses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OptionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
