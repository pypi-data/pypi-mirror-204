# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from icpd_core.api_client import ApiClient


class VaultsV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_vault_v2(self, vault_urn, **kwargs):  # noqa: E501
        """Delete external vault integration  # noqa: E501

        Delete a specific external vault integration for user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vault_v2(vault_urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_urn: vault identifier (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: VaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_vault_v2_with_http_info(vault_urn, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_vault_v2_with_http_info(vault_urn, **kwargs)  # noqa: E501
            return data

    def delete_vault_v2_with_http_info(self, vault_urn, **kwargs):  # noqa: E501
        """Delete external vault integration  # noqa: E501

        Delete a specific external vault integration for user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vault_v2_with_http_info(vault_urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_urn: vault identifier (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: VaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vault_urn', 'jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vault_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vault_urn' is set
        if ('vault_urn' not in params or
                params['vault_urn'] is None):
            raise ValueError("Missing the required parameter `vault_urn` when calling `delete_vault_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_urn' in params:
            path_params['vault_urn'] = params['vault_urn']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/vaults/{vault_urn}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vault_details_v2(self, vault_urn, **kwargs):  # noqa: E501
        """Returns vault details  # noqa: E501

        Returns vault details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vault_details_v2(vault_urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_urn: vault identifier (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: VaultDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vault_details_v2_with_http_info(vault_urn, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vault_details_v2_with_http_info(vault_urn, **kwargs)  # noqa: E501
            return data

    def get_vault_details_v2_with_http_info(self, vault_urn, **kwargs):  # noqa: E501
        """Returns vault details  # noqa: E501

        Returns vault details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vault_details_v2_with_http_info(vault_urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_urn: vault identifier (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: VaultDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vault_urn', 'jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vault_details_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vault_urn' is set
        if ('vault_urn' not in params or
                params['vault_urn'] is None):
            raise ValueError("Missing the required parameter `vault_urn` when calling `get_vault_details_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_urn' in params:
            path_params['vault_urn'] = params['vault_urn']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/vaults/{vault_urn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VaultDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vault_secrets_v2(self, vault_urn, **kwargs):  # noqa: E501
        """Get a list of all secrets for a vault  # noqa: E501

        Retrieve the list of all secrets for the given vault  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vault_secrets_v2(vault_urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_urn: vault identifier (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param int offset: The number of secrets to skip before starting to collect the result set.
        :param int limit: The number of secrets to return.
        :param str sort: sort by the field e.g. sort=secret_name or sort=-secret_name for descending,\\n supported keys are secret_name, type, description, created_by, vault_name, updated_at
        :param str type: comma separated secret type - e.g. credentials,token
        :param str secret_name: secret name
        :param str match: match on all or any criteria, possible values
        :return: GetAllSecretsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vault_secrets_v2_with_http_info(vault_urn, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vault_secrets_v2_with_http_info(vault_urn, **kwargs)  # noqa: E501
            return data

    def get_vault_secrets_v2_with_http_info(self, vault_urn, **kwargs):  # noqa: E501
        """Get a list of all secrets for a vault  # noqa: E501

        Retrieve the list of all secrets for the given vault  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vault_secrets_v2_with_http_info(vault_urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_urn: vault identifier (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param int offset: The number of secrets to skip before starting to collect the result set.
        :param int limit: The number of secrets to return.
        :param str sort: sort by the field e.g. sort=secret_name or sort=-secret_name for descending,\\n supported keys are secret_name, type, description, created_by, vault_name, updated_at
        :param str type: comma separated secret type - e.g. credentials,token
        :param str secret_name: secret name
        :param str match: match on all or any criteria, possible values
        :return: GetAllSecretsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vault_urn', 'jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id', 'offset', 'limit', 'sort', 'type', 'secret_name', 'match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vault_secrets_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vault_urn' is set
        if ('vault_urn' not in params or
                params['vault_urn'] is None):
            raise ValueError("Missing the required parameter `vault_urn` when calling `get_vault_secrets_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_urn' in params:
            path_params['vault_urn'] = params['vault_urn']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'secret_name' in params:
            query_params.append(('secret_name', params['secret_name']))  # noqa: E501
        if 'match' in params:
            query_params.append(('match', params['match']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/vaults/{vault_urn}/secrets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAllSecretsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vaults_configs_v2(self, **kwargs):  # noqa: E501
        """Get vaults/secrets reference config  # noqa: E501

        Get all vaults/secrets reference config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vaults_configs_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: SuccessResponseWithObjArray
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vaults_configs_v2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_vaults_configs_v2_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_vaults_configs_v2_with_http_info(self, **kwargs):  # noqa: E501
        """Get vaults/secrets reference config  # noqa: E501

        Get all vaults/secrets reference config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vaults_configs_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: SuccessResponseWithObjArray
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vaults_configs_v2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/vaults/configs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseWithObjArray',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vaults_v2(self, **kwargs):  # noqa: E501
        """Retrieve details about external vault integrations  # noqa: E501

        Retrieve details about external vault integrations for user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vaults_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param int offset: The number of vaults to skip before starting to collect the result set.
        :param int limit: The number of vaults to return.
        :param bool include_secrets_preview: includes preview of secrets.
        :param str sort: sort by the field e.g. sort=display_name or sort=-display_name for descending
        :param str provider_name: comma separated provider names - e.g. CyberArk AAM,HashiCorp
        :param str vault_name: vault name
        :param str match: match on all or any criteria, possible values
        :param bool include_vaults_for_management: if true returns all vaults when user has manage vaults permission
        :return: GetAllVaultsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vaults_v2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_vaults_v2_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_vaults_v2_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve details about external vault integrations  # noqa: E501

        Retrieve details about external vault integrations for user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vaults_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param int offset: The number of vaults to skip before starting to collect the result set.
        :param int limit: The number of vaults to return.
        :param bool include_secrets_preview: includes preview of secrets.
        :param str sort: sort by the field e.g. sort=display_name or sort=-display_name for descending
        :param str provider_name: comma separated provider names - e.g. CyberArk AAM,HashiCorp
        :param str vault_name: vault name
        :param str match: match on all or any criteria, possible values
        :param bool include_vaults_for_management: if true returns all vaults when user has manage vaults permission
        :return: GetAllVaultsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id', 'offset', 'limit', 'include_secrets_preview', 'sort', 'provider_name', 'vault_name', 'match', 'include_vaults_for_management']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vaults_v2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'include_secrets_preview' in params:
            query_params.append(('include_secrets_preview', params['include_secrets_preview']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'provider_name' in params:
            query_params.append(('provider_name', params['provider_name']))  # noqa: E501
        if 'vault_name' in params:
            query_params.append(('vault_name', params['vault_name']))  # noqa: E501
        if 'match' in params:
            query_params.append(('match', params['match']))  # noqa: E501
        if 'include_vaults_for_management' in params:
            query_params.append(('include_vaults_for_management', params['include_vaults_for_management']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/vaults', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAllVaultsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def initiate_transfer_vault_ownership_v2(self, vault_urn, body, **kwargs):  # noqa: E501
        """Initiate transfer vault ownership  # noqa: E501

        Initiate transfer external vault to different owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initiate_transfer_vault_ownership_v2(vault_urn, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_urn: vault identifier (required)
        :param TransferVaultRequest body: Sensitive payload to be secured (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool force: if true transfer re-submission will be executed only if allowed transfer duration is over
        :return: TransferVaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.initiate_transfer_vault_ownership_v2_with_http_info(vault_urn, body, **kwargs)  # noqa: E501
        else:
            (data) = self.initiate_transfer_vault_ownership_v2_with_http_info(vault_urn, body, **kwargs)  # noqa: E501
            return data

    def initiate_transfer_vault_ownership_v2_with_http_info(self, vault_urn, body, **kwargs):  # noqa: E501
        """Initiate transfer vault ownership  # noqa: E501

        Initiate transfer external vault to different owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initiate_transfer_vault_ownership_v2_with_http_info(vault_urn, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_urn: vault identifier (required)
        :param TransferVaultRequest body: Sensitive payload to be secured (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool force: if true transfer re-submission will be executed only if allowed transfer duration is over
        :return: TransferVaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vault_urn', 'body', 'jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method initiate_transfer_vault_ownership_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vault_urn' is set
        if ('vault_urn' not in params or
                params['vault_urn'] is None):
            raise ValueError("Missing the required parameter `vault_urn` when calling `initiate_transfer_vault_ownership_v2`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `initiate_transfer_vault_ownership_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_urn' in params:
            path_params['vault_urn'] = params['vault_urn']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/vaults/{vault_urn}/transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransferVaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_vault_v2(self, body, **kwargs):  # noqa: E501
        """Store external vault configuration  # noqa: E501

        Store configuration details to external vault  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_vault_v2(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewVaultRequest body: Sensitive payload to be secured (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool validate: validate vault connection.
        :param bool validate_and_save: Validate vault connection and save
        :return: VaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_vault_v2_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_vault_v2_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_vault_v2_with_http_info(self, body, **kwargs):  # noqa: E501
        """Store external vault configuration  # noqa: E501

        Store configuration details to external vault  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_vault_v2_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewVaultRequest body: Sensitive payload to be secured (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool validate: validate vault connection.
        :param bool validate_and_save: Validate vault connection and save
        :return: VaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id', 'validate', 'validate_and_save']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_vault_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_vault_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'validate' in params:
            query_params.append(('validate', params['validate']))  # noqa: E501
        if 'validate_and_save' in params:
            query_params.append(('validate_and_save', params['validate_and_save']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/vaults', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_vault_ownership_v2(self, vault_urn, body, **kwargs):  # noqa: E501
        """Transfer vault to user  # noqa: E501

        Authenticate the external vault and transfer it to the new owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vault_ownership_v2(vault_urn, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_urn: vault identifier (required)
        :param PatchTransferredVaultRequest body: Sensitive payload to be secured (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: TransferVaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_vault_ownership_v2_with_http_info(vault_urn, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_vault_ownership_v2_with_http_info(vault_urn, body, **kwargs)  # noqa: E501
            return data

    def update_vault_ownership_v2_with_http_info(self, vault_urn, body, **kwargs):  # noqa: E501
        """Transfer vault to user  # noqa: E501

        Authenticate the external vault and transfer it to the new owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vault_ownership_v2_with_http_info(vault_urn, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_urn: vault identifier (required)
        :param PatchTransferredVaultRequest body: Sensitive payload to be secured (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: TransferVaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vault_urn', 'body', 'jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_vault_ownership_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vault_urn' is set
        if ('vault_urn' not in params or
                params['vault_urn'] is None):
            raise ValueError("Missing the required parameter `vault_urn` when calling `update_vault_ownership_v2`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_vault_ownership_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_urn' in params:
            path_params['vault_urn'] = params['vault_urn']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/vaults/{vault_urn}/transfers', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransferVaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_vault_v2(self, vault_urn, body, **kwargs):  # noqa: E501
        """Update external vault configuration  # noqa: E501

        Update configuration details of an external vault, response does not includes sensitive data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vault_v2(vault_urn, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_urn: vault identifier (required)
        :param PatchVaultRequest body: Sensitive payload to be secured (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool validate: validate vault connection.
        :param bool validate_and_save: Validate vault connection and save
        :return: VaultDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_vault_v2_with_http_info(vault_urn, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_vault_v2_with_http_info(vault_urn, body, **kwargs)  # noqa: E501
            return data

    def update_vault_v2_with_http_info(self, vault_urn, body, **kwargs):  # noqa: E501
        """Update external vault configuration  # noqa: E501

        Update configuration details of an external vault, response does not includes sensitive data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vault_v2_with_http_info(vault_urn, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_urn: vault identifier (required)
        :param PatchVaultRequest body: Sensitive payload to be secured (required)
        :param str jwt_auth_user_payload: Supplied by proxy - do NOT add your own value
        :param str authorization: Bearer token based authentication
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool validate: validate vault connection.
        :param bool validate_and_save: Validate vault connection and save
        :return: VaultDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vault_urn', 'body', 'jwt_auth_user_payload', 'authorization', 'ibm_cpd_transaction_id', 'validate', 'validate_and_save']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_vault_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vault_urn' is set
        if ('vault_urn' not in params or
                params['vault_urn'] is None):
            raise ValueError("Missing the required parameter `vault_urn` when calling `update_vault_v2`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_vault_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_urn' in params:
            path_params['vault_urn'] = params['vault_urn']  # noqa: E501

        query_params = []
        if 'validate' in params:
            query_params.append(('validate', params['validate']))  # noqa: E501
        if 'validate_and_save' in params:
            query_params.append(('validate_and_save', params['validate_and_save']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/vaults/{vault_urn}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VaultDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
