# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from icpd_core.api_client import ApiClient


class AccessManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_current_user(self, body, **kwargs):  # noqa: E501
        """TO BE DEPRECATED...adds current user to service instance if they do not exist.  # noqa: E501

        TO BE DEPRECATED...Ensure Current User exists in the service instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_current_user(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body8 body: service instance id (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponseWithObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_current_user_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_current_user_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_current_user_with_http_info(self, body, **kwargs):  # noqa: E501
        """TO BE DEPRECATED...adds current user to service instance if they do not exist.  # noqa: E501

        TO BE DEPRECATED...Ensure Current User exists in the service instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_current_user_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body8 body: service instance id (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponseWithObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_current_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_current_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/serviceInstance/currentUser', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponseWithObj',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_users(self, body, **kwargs):  # noqa: E501
        """Associate one or more users to the service instance.  # noqa: E501

        The metadata DB keeps track of Zen users and their associations with each service instance. Its expected that the Admin (originally the creator of the service instance) grants access to Zen users.  This post action allows the user to get some rights to work with the service instance. This action can only triggered by the owner of the service instance resource. A role/privilege in the service instance may also be associated with this user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_users(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddUsersSchema body: ServiceInstance metadata artifact that needs to be added to the Database  (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_users_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_users_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_users_with_http_info(self, body, **kwargs):  # noqa: E501
        """Associate one or more users to the service instance.  # noqa: E501

        The metadata DB keeps track of Zen users and their associations with each service instance. Its expected that the Admin (originally the creator of the service instance) grants access to Zen users.  This post action allows the user to get some rights to work with the service instance. This action can only triggered by the owner of the service instance resource. A role/privilege in the service instance may also be associated with this user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_users_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddUsersSchema body: ServiceInstance metadata artifact that needs to be added to the Database  (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/serviceInstance/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user(self, body, **kwargs):  # noqa: E501
        """deletes multiple users associations for this service instance from the database  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RevokeUsersSchema body: arrays of UID to delete  (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def delete_user_with_http_info(self, body, **kwargs):  # noqa: E501
        """deletes multiple users associations for this service instance from the database  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RevokeUsersSchema body: arrays of UID to delete  (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/serviceInstance/users', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_token(self, body, **kwargs):  # noqa: E501
        """this returns the payload contained within the access token along with the token  # noqa: E501

        Get information about current user and the  access token of the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_token(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body9 body: (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param bool set_cookie: if this is set to true, then cookie with that instance id is generated.
        :return: SuccessTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_token_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_token_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def generate_token_with_http_info(self, body, **kwargs):  # noqa: E501
        """this returns the payload contained within the access token along with the token  # noqa: E501

        Get information about current user and the  access token of the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_token_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body9 body: (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param bool set_cookie: if this is set to true, then cookie with that instance id is generated.
        :return: SuccessTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `generate_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'set_cookie' in params:
            query_params.append(('setCookie', params['set_cookie']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/serviceInstance/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessTokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_current_user(self, **kwargs):  # noqa: E501
        """get current user's record from zen metadb which includes role, username etc.  # noqa: E501

        Get information about current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str s_id: service Instance ID of the service
        :param str service_instance_display_name: service instance display name of the service instance
        :param str add_on_name: addon name that the service instance belongs to
        :param str add_on_version: addon version of the add-on that the instance belongs to
        :return: SuccessGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_current_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_current_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_current_user_with_http_info(self, **kwargs):  # noqa: E501
        """get current user's record from zen metadb which includes role, username etc.  # noqa: E501

        Get information about current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str s_id: service Instance ID of the service
        :param str service_instance_display_name: service instance display name of the service instance
        :param str add_on_name: addon name that the service instance belongs to
        :param str add_on_version: addon version of the add-on that the instance belongs to
        :return: SuccessGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 's_id', 'service_instance_display_name', 'add_on_name', 'add_on_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 's_id' in params:
            query_params.append(('sID', params['s_id']))  # noqa: E501
        if 'service_instance_display_name' in params:
            query_params.append(('serviceInstanceDisplayName', params['service_instance_display_name']))  # noqa: E501
        if 'add_on_name' in params:
            query_params.append(('addOnName', params['add_on_name']))  # noqa: E501
        if 'add_on_version' in params:
            query_params.append(('addOnVersion', params['add_on_version']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/serviceInstance/currentUser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_groups(self, s_id, **kwargs):  # noqa: E501
        """get the list of group-service-instance association records for a particular serviceInstance ID and a role  # noqa: E501

        filtered based on a set of query params  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_groups(s_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str s_id: service Instance ID of the service (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str role: roles to query
        :param bool include_profile_picture: include profile picture or not
        :return: SuccessGetResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_groups_with_http_info(s_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_groups_with_http_info(s_id, **kwargs)  # noqa: E501
            return data

    def get_groups_with_http_info(self, s_id, **kwargs):  # noqa: E501
        """get the list of group-service-instance association records for a particular serviceInstance ID and a role  # noqa: E501

        filtered based on a set of query params  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_groups_with_http_info(s_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str s_id: service Instance ID of the service (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str role: roles to query
        :param bool include_profile_picture: include profile picture or not
        :return: SuccessGetResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['s_id', 'jwt_auth_user_payload', 'role', 'include_profile_picture']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 's_id' is set
        if ('s_id' not in params or
                params['s_id'] is None):
            raise ValueError("Missing the required parameter `s_id` when calling `get_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 's_id' in params:
            query_params.append(('sID', params['s_id']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
        if 'include_profile_picture' in params:
            query_params.append(('include_profile_picture', params['include_profile_picture']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/serviceInstance/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users(self, s_id, **kwargs):  # noqa: E501
        """get the list of users-service-instance association records for a particular serviceInstance ID and a role  # noqa: E501

        filtered based on a set of query params  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users(s_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str s_id: service Instance ID of the service (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param bool include_profile_picture: include profile picture or not
        :param str role: roles to query
        :param bool include_group_users: includes group users or not
        :return: SuccessGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_with_http_info(s_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users_with_http_info(s_id, **kwargs)  # noqa: E501
            return data

    def get_users_with_http_info(self, s_id, **kwargs):  # noqa: E501
        """get the list of users-service-instance association records for a particular serviceInstance ID and a role  # noqa: E501

        filtered based on a set of query params  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_with_http_info(s_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str s_id: service Instance ID of the service (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param bool include_profile_picture: include profile picture or not
        :param str role: roles to query
        :param bool include_group_users: includes group users or not
        :return: SuccessGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['s_id', 'jwt_auth_user_payload', 'include_profile_picture', 'role', 'include_group_users']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 's_id' is set
        if ('s_id' not in params or
                params['s_id'] is None):
            raise ValueError("Missing the required parameter `s_id` when calling `get_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_profile_picture' in params:
            query_params.append(('include_profile_picture', params['include_profile_picture']))  # noqa: E501
        if 's_id' in params:
            query_params.append(('sID', params['s_id']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
        if 'include_group_users' in params:
            query_params.append(('include_group_users', params['include_group_users']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/serviceInstance/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_user_role(self, **kwargs):  # noqa: E501
        """Updates user role in a service instance.  # noqa: E501

        Can only be done by an \"Admin\" of the service instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_user_role(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param PatchRole body: ServiceInstance metadata artifact that needs to be added to the Database
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_user_role_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.patch_user_role_with_http_info(**kwargs)  # noqa: E501
            return data

    def patch_user_role_with_http_info(self, **kwargs):  # noqa: E501
        """Updates user role in a service instance.  # noqa: E501

        Can only be done by an \"Admin\" of the service instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_user_role_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param PatchRole body: ServiceInstance metadata artifact that needs to be added to the Database
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_user_role" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/serviceInstance/users/role', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_users_cred(self, **kwargs):  # noqa: E501
        """Generates temporary credentials for a user  # noqa: E501

        Can only be done by an \"Admin\" of the service instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_users_cred(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param Body10 body: ServiceInstance metadata artifact that needs to be added to the Database
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_users_cred_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.patch_users_cred_with_http_info(**kwargs)  # noqa: E501
            return data

    def patch_users_cred_with_http_info(self, **kwargs):  # noqa: E501
        """Generates temporary credentials for a user  # noqa: E501

        Can only be done by an \"Admin\" of the service instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_users_cred_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param Body10 body: ServiceInstance metadata artifact that needs to be added to the Database
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_users_cred" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/serviceInstance/users/credentials/generate', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sync_service_instance_user(self, body, **kwargs):  # noqa: E501
        """Sync the service instance users after a user has been deleted  # noqa: E501

        When a user is deleted from user management, the service instance users table is out of sync. This endpoint will mark each user as deleted in the metadata DB.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sync_service_instance_user(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyncUsersSchema body: arrays of UID to mark as deleted (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sync_service_instance_user_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.sync_service_instance_user_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def sync_service_instance_user_with_http_info(self, body, **kwargs):  # noqa: E501
        """Sync the service instance users after a user has been deleted  # noqa: E501

        When a user is deleted from user management, the service instance users table is out of sync. This endpoint will mark each user as deleted in the metadata DB.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sync_service_instance_user_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyncUsersSchema body: arrays of UID to mark as deleted (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_service_instance_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sync_service_instance_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/serviceInstance/users/sync', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
