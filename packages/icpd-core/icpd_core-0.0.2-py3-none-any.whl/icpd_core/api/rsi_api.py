# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from icpd_core.api_client import ApiClient


class RsiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_rsi_extensions(self, secret, **kwargs):  # noqa: E501
        """Get RSI extensions.  # noqa: E501

        This API gets all the extensions whose extension point IDs are prefixed with rsi. These extensions belong to the Resource Spec Injection feature. Optional query parameters like extension_name, extension_point_id, patch_state, pod_name can be specified to get a filtered response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rsi_extensions(secret, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret: The value of zen-service-broker-secret used for internal service to service communication. (required)
        :param str accept_language: Language code to be used for UI strings returned in the extensions.
        :param str pod_name: The name of the pod to be patched.
        :param str namespace: The namespace of the pod or (pod owner/kind name)
        :param str pod_owner_name: The pod owner name
        :param str pod_owner_kind: The pod owner kind
        :param str patch_state: State of the RSI extension or patch set by the user. Values can be active or inactive.
        :param str extension_name: Name of a particular extension or patch for an RSI extension point.
        :return: SuccessGetResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rsi_extensions_with_http_info(secret, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rsi_extensions_with_http_info(secret, **kwargs)  # noqa: E501
            return data

    def get_rsi_extensions_with_http_info(self, secret, **kwargs):  # noqa: E501
        """Get RSI extensions.  # noqa: E501

        This API gets all the extensions whose extension point IDs are prefixed with rsi. These extensions belong to the Resource Spec Injection feature. Optional query parameters like extension_name, extension_point_id, patch_state, pod_name can be specified to get a filtered response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rsi_extensions_with_http_info(secret, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret: The value of zen-service-broker-secret used for internal service to service communication. (required)
        :param str accept_language: Language code to be used for UI strings returned in the extensions.
        :param str pod_name: The name of the pod to be patched.
        :param str namespace: The namespace of the pod or (pod owner/kind name)
        :param str pod_owner_name: The pod owner name
        :param str pod_owner_kind: The pod owner kind
        :param str patch_state: State of the RSI extension or patch set by the user. Values can be active or inactive.
        :param str extension_name: Name of a particular extension or patch for an RSI extension point.
        :return: SuccessGetResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secret', 'accept_language', 'pod_name', 'namespace', 'pod_owner_name', 'pod_owner_kind', 'patch_state', 'extension_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rsi_extensions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'secret' is set
        if ('secret' not in params or
                params['secret'] is None):
            raise ValueError("Missing the required parameter `secret` when calling `get_rsi_extensions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pod_name' in params:
            query_params.append(('pod_name', params['pod_name']))  # noqa: E501
        if 'namespace' in params:
            query_params.append(('namespace', params['namespace']))  # noqa: E501
        if 'pod_owner_name' in params:
            query_params.append(('pod_owner_name', params['pod_owner_name']))  # noqa: E501
        if 'pod_owner_kind' in params:
            query_params.append(('pod_owner_kind', params['pod_owner_kind']))  # noqa: E501
        if 'patch_state' in params:
            query_params.append(('patch_state', params['patch_state']))  # noqa: E501
        if 'extension_name' in params:
            query_params.append(('extension_name', params['extension_name']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'secret' in params:
            header_params['secret'] = params['secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/rsi_extensions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
