# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from icpd_core.api_client import ApiClient


class AddOnManagerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_add_on_from_file(self, configmap_name, **kwargs):  # noqa: E501
        """Import addon into the platform file-system  # noqa: E501

        This API imports an addon into the persistent volume from file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_add_on_from_file(configmap_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str configmap_name: name of the configmap that gets created as a result of this API (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param file add_ons_json: add-ons metadata JSON file to be imported
        :param file nginx_conf: nginx conf file to be imported
        :param file upstream_conf: upstream conf file containing the upstream block to be imported
        :param file add_ons_tar: A tar file that can consist of nginx file, add-ons json etc.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_add_on_from_file_with_http_info(configmap_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_add_on_from_file_with_http_info(configmap_name, **kwargs)  # noqa: E501
            return data

    def create_add_on_from_file_with_http_info(self, configmap_name, **kwargs):  # noqa: E501
        """Import addon into the platform file-system  # noqa: E501

        This API imports an addon into the persistent volume from file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_add_on_from_file_with_http_info(configmap_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str configmap_name: name of the configmap that gets created as a result of this API (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param file add_ons_json: add-ons metadata JSON file to be imported
        :param file nginx_conf: nginx conf file to be imported
        :param file upstream_conf: upstream conf file containing the upstream block to be imported
        :param file add_ons_tar: A tar file that can consist of nginx file, add-ons json etc.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['configmap_name', 'jwt_auth_user_payload', 'add_ons_json', 'nginx_conf', 'upstream_conf', 'add_ons_tar']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_add_on_from_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'configmap_name' is set
        if ('configmap_name' not in params or
                params['configmap_name'] is None):
            raise ValueError("Missing the required parameter `configmap_name` when calling `create_add_on_from_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'configmap_name' in params:
            path_params['configmap_name'] = params['configmap_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'add_ons_json' in params:
            local_var_files['add_ons_json'] = params['add_ons_json']  # noqa: E501
        if 'nginx_conf' in params:
            local_var_files['nginx_conf'] = params['nginx_conf']  # noqa: E501
        if 'upstream_conf' in params:
            local_var_files['upstream_conf'] = params['upstream_conf']  # noqa: E501
        if 'add_ons_tar' in params:
            local_var_files['add_ons_tar'] = params['add_ons_tar']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/addons/sources/file/{configmap_name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_add_on(self, body, **kwargs):  # noqa: E501
        """Initiate the delete of add-on  # noqa: E501

        This api asynchronously deletes the add-on metadata from Cloud Pak for Data control plane  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_add_on(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOnIdentifier body: Add-on metadata to identify the add-on to delete (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str authorization: Bearer token based authentication.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_add_on_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_add_on_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def delete_add_on_with_http_info(self, body, **kwargs):  # noqa: E501
        """Initiate the delete of add-on  # noqa: E501

        This api asynchronously deletes the add-on metadata from Cloud Pak for Data control plane  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_add_on_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOnIdentifier body: Add-on metadata to identify the add-on to delete (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str authorization: Bearer token based authentication.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_add_on" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_add_on`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/addons', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_add_ons(self, **kwargs):  # noqa: E501
        """Get a comma separated list of all the installed and / or enabled addons.  # noqa: E501

        This api returns a simple comma separated list of all the addons recorded as being installed or enabled in zen-metastoredb.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_add_ons(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str authorization: Bearer token based authentication.
        :return: SuccessGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_add_ons_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_add_ons_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_add_ons_with_http_info(self, **kwargs):  # noqa: E501
        """Get a comma separated list of all the installed and / or enabled addons.  # noqa: E501

        This api returns a simple comma separated list of all the addons recorded as being installed or enabled in zen-metastoredb.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_add_ons_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str authorization: Bearer token based authentication.
        :return: SuccessGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_add_ons" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/addons', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_add_on(self, configmap_name, **kwargs):  # noqa: E501
        """Import addon into the platform file-system  # noqa: E501

        This API imports an addon into the persistent volume from file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_add_on(configmap_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str configmap_name: name of the configmap that gets created as a result of this API (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param file add_ons_json: add-ons metadata JSON file to be imported
        :param file nginx_conf: nginx conf file to be imported
        :param file add_ons_tar: A tar file that can consist of nginx file, add-ons json etc.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_add_on_with_http_info(configmap_name, **kwargs)  # noqa: E501
        else:
            (data) = self.import_add_on_with_http_info(configmap_name, **kwargs)  # noqa: E501
            return data

    def import_add_on_with_http_info(self, configmap_name, **kwargs):  # noqa: E501
        """Import addon into the platform file-system  # noqa: E501

        This API imports an addon into the persistent volume from file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_add_on_with_http_info(configmap_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str configmap_name: name of the configmap that gets created as a result of this API (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param file add_ons_json: add-ons metadata JSON file to be imported
        :param file nginx_conf: nginx conf file to be imported
        :param file add_ons_tar: A tar file that can consist of nginx file, add-ons json etc.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['configmap_name', 'jwt_auth_user_payload', 'add_ons_json', 'nginx_conf', 'add_ons_tar']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_add_on" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'configmap_name' is set
        if ('configmap_name' not in params or
                params['configmap_name'] is None):
            raise ValueError("Missing the required parameter `configmap_name` when calling `import_add_on`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'configmap_name' in params:
            path_params['configmap_name'] = params['configmap_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'add_ons_json' in params:
            local_var_files['add_ons_json'] = params['add_ons_json']  # noqa: E501
        if 'nginx_conf' in params:
            local_var_files['nginx_conf'] = params['nginx_conf']  # noqa: E501
        if 'add_ons_tar' in params:
            local_var_files['add_ons_tar'] = params['add_ons_tar']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/addons/sources/file/{configmap_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_add_on(self, body, **kwargs):  # noqa: E501
        """Post the definition of an add-on to cockroach.  # noqa: E501

        This api adds the addons definition to the ICP Metadata manager database. This will create an entry which will then picked up by service instance manager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_add_on(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOnMetadata body: Addon metadata artifact that needs to be added to the table in the Database (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str authorization: Bearer token based authentication.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_add_on_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_add_on_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_add_on_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post the definition of an add-on to cockroach.  # noqa: E501

        This api adds the addons definition to the ICP Metadata manager database. This will create an entry which will then picked up by service instance manager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_add_on_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOnMetadata body: Addon metadata artifact that needs to be added to the table in the Database (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str authorization: Bearer token based authentication.
        :return: SuccessPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_add_on" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_add_on`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/addOn', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_add_on_query(self, body, **kwargs):  # noqa: E501
        """Post a query to get the add ons that are present in the ICPD Cluster.  # noqa: E501

        This api gets the addons definitions that are present in ICP for Data Clusters. It supports filtering and querying on the basis of some conditions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_add_on_query(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOnQuery body: Addon metadata artifact that needs to be added to the table in the Database (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param bool show_all: show_all if set to true returns all add-ons in the metadb including the placeholder
        :param str accept_language: Language in which the add-on placeholder strings like short/long description will be returned
        :param str authorization: Bearer token based authentication.
        :return: SuccessGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_add_on_query_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_add_on_query_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_add_on_query_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post a query to get the add ons that are present in the ICPD Cluster.  # noqa: E501

        This api gets the addons definitions that are present in ICP for Data Clusters. It supports filtering and querying on the basis of some conditions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_add_on_query_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOnQuery body: Addon metadata artifact that needs to be added to the table in the Database (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param bool show_all: show_all if set to true returns all add-ons in the metadb including the placeholder
        :param str accept_language: Language in which the add-on placeholder strings like short/long description will be returned
        :param str authorization: Bearer token based authentication.
        :return: SuccessGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload', 'show_all', 'accept_language', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_add_on_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_add_on_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'show_all' in params:
            query_params.append(('show_all', params['show_all']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/addOn/query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_addon_from_json(self, body, **kwargs):  # noqa: E501
        """Create an addon  # noqa: E501

        Create an addon by consuming json definition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_addon_from_json(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAddonObj body: Addon metadata artifact that needs to be added to the table in the database (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_addon_from_json_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_addon_from_json_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_addon_from_json_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create an addon  # noqa: E501

        Create an addon by consuming json definition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_addon_from_json_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAddonObj body: Addon metadata artifact that needs to be added to the table in the database (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_addon_from_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_addon_from_json`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/addons', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
