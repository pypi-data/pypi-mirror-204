# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Properties5(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approval_status': 'str',
        'display_name': 'str',
        'email': 'str',
        'user_roles': 'list[str]'
    }

    attribute_map = {
        'approval_status': 'approval_status',
        'display_name': 'displayName',
        'email': 'email',
        'user_roles': 'user_roles'
    }

    def __init__(self, approval_status=None, display_name=None, email=None, user_roles=None):  # noqa: E501
        """Properties5 - a model defined in Swagger"""  # noqa: E501

        self._approval_status = None
        self._display_name = None
        self._email = None
        self._user_roles = None
        self.discriminator = None

        if approval_status is not None:
            self.approval_status = approval_status
        if display_name is not None:
            self.display_name = display_name
        if email is not None:
            self.email = email
        self.user_roles = user_roles

    @property
    def approval_status(self):
        """Gets the approval_status of this Properties5.  # noqa: E501

        Approval status for the user, can be either 'pending' or 'approved'.  # noqa: E501

        :return: The approval_status of this Properties5.  # noqa: E501
        :rtype: str
        """
        return self._approval_status

    @approval_status.setter
    def approval_status(self, approval_status):
        """Sets the approval_status of this Properties5.

        Approval status for the user, can be either 'pending' or 'approved'.  # noqa: E501

        :param approval_status: The approval_status of this Properties5.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "approved"]  # noqa: E501
        if approval_status not in allowed_values:
            raise ValueError(
                "Invalid value for `approval_status` ({0}), must be one of {1}"  # noqa: E501
                .format(approval_status, allowed_values)
            )

        self._approval_status = approval_status

    @property
    def display_name(self):
        """Gets the display_name of this Properties5.  # noqa: E501

        Display Name for the user e.g. Admin  # noqa: E501

        :return: The display_name of this Properties5.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Properties5.

        Display Name for the user e.g. Admin  # noqa: E501

        :param display_name: The display_name of this Properties5.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this Properties5.  # noqa: E501

        Email for the user e.g. admin@user.net  # noqa: E501

        :return: The email of this Properties5.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Properties5.

        Email for the user e.g. admin@user.net  # noqa: E501

        :param email: The email of this Properties5.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def user_roles(self):
        """Gets the user_roles of this Properties5.  # noqa: E501

        List of user roles  # noqa: E501

        :return: The user_roles of this Properties5.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_roles

    @user_roles.setter
    def user_roles(self, user_roles):
        """Sets the user_roles of this Properties5.

        List of user roles  # noqa: E501

        :param user_roles: The user_roles of this Properties5.  # noqa: E501
        :type: list[str]
        """
        if user_roles is None:
            raise ValueError("Invalid value for `user_roles`, must not be `None`")  # noqa: E501

        self._user_roles = user_roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Properties5, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Properties5):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
