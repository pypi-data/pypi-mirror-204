# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PostSecretPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'secret': 'object',
        'secret_name': 'str',
        'type': 'str',
        'vault_name': 'str'
    }

    attribute_map = {
        'description': 'description',
        'secret': 'secret',
        'secret_name': 'secret_name',
        'type': 'type',
        'vault_name': 'vault_name'
    }

    def __init__(self, description=None, secret=None, secret_name=None, type='generic', vault_name='internal'):  # noqa: E501
        """PostSecretPayload - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._secret = None
        self._secret_name = None
        self._type = None
        self._vault_name = None
        self.discriminator = None

        if description is not None:
            self.description = description
        self.secret = secret
        self.secret_name = secret_name
        if type is not None:
            self.type = type
        if vault_name is not None:
            self.vault_name = vault_name

    @property
    def description(self):
        """Gets the description of this PostSecretPayload.  # noqa: E501

        short description about the secret being stored  # noqa: E501

        :return: The description of this PostSecretPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostSecretPayload.

        short description about the secret being stored  # noqa: E501

        :param description: The description of this PostSecretPayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def secret(self):
        """Gets the secret of this PostSecretPayload.  # noqa: E501

        free-form object containing the secret  # noqa: E501

        :return: The secret of this PostSecretPayload.  # noqa: E501
        :rtype: object
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this PostSecretPayload.

        free-form object containing the secret  # noqa: E501

        :param secret: The secret of this PostSecretPayload.  # noqa: E501
        :type: object
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")  # noqa: E501

        self._secret = secret

    @property
    def secret_name(self):
        """Gets the secret_name of this PostSecretPayload.  # noqa: E501

        unique identifier for the secret  # noqa: E501

        :return: The secret_name of this PostSecretPayload.  # noqa: E501
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this PostSecretPayload.

        unique identifier for the secret  # noqa: E501

        :param secret_name: The secret_name of this PostSecretPayload.  # noqa: E501
        :type: str
        """
        if secret_name is None:
            raise ValueError("Invalid value for `secret_name`, must not be `None`")  # noqa: E501

        self._secret_name = secret_name

    @property
    def type(self):
        """Gets the type of this PostSecretPayload.  # noqa: E501

        type of the secret  # noqa: E501

        :return: The type of this PostSecretPayload.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PostSecretPayload.

        type of the secret  # noqa: E501

        :param type: The type of this PostSecretPayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["certificate", "credentials", "generic", "key", "token"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vault_name(self):
        """Gets the vault_name of this PostSecretPayload.  # noqa: E501

        name of user vault  # noqa: E501

        :return: The vault_name of this PostSecretPayload.  # noqa: E501
        :rtype: str
        """
        return self._vault_name

    @vault_name.setter
    def vault_name(self, vault_name):
        """Sets the vault_name of this PostSecretPayload.

        name of user vault  # noqa: E501

        :param vault_name: The vault_name of this PostSecretPayload.  # noqa: E501
        :type: str
        """

        self._vault_name = vault_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostSecretPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostSecretPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
