# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ContentBlockDataObjRows(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'nav_url': 'str',
        'type': 'str',
        'window_open_target': 'str'
    }

    attribute_map = {
        'content': 'content',
        'nav_url': 'nav_url',
        'type': 'type',
        'window_open_target': 'window_open_target'
    }

    def __init__(self, content=None, nav_url=None, type=None, window_open_target=None):  # noqa: E501
        """ContentBlockDataObjRows - a model defined in Swagger"""  # noqa: E501

        self._content = None
        self._nav_url = None
        self._type = None
        self._window_open_target = None
        self.discriminator = None

        self.content = content
        if nav_url is not None:
            self.nav_url = nav_url
        self.type = type
        if window_open_target is not None:
            self.window_open_target = window_open_target

    @property
    def content(self):
        """Gets the content of this ContentBlockDataObjRows.  # noqa: E501

        content of the row  # noqa: E501

        :return: The content of this ContentBlockDataObjRows.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ContentBlockDataObjRows.

        content of the row  # noqa: E501

        :param content: The content of this ContentBlockDataObjRows.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def nav_url(self):
        """Gets the nav_url of this ContentBlockDataObjRows.  # noqa: E501

        link to navigate to after clicking the row  # noqa: E501

        :return: The nav_url of this ContentBlockDataObjRows.  # noqa: E501
        :rtype: str
        """
        return self._nav_url

    @nav_url.setter
    def nav_url(self, nav_url):
        """Sets the nav_url of this ContentBlockDataObjRows.

        link to navigate to after clicking the row  # noqa: E501

        :param nav_url: The nav_url of this ContentBlockDataObjRows.  # noqa: E501
        :type: str
        """

        self._nav_url = nav_url

    @property
    def type(self):
        """Gets the type of this ContentBlockDataObjRows.  # noqa: E501

        The type of field, example text or link  # noqa: E501

        :return: The type of this ContentBlockDataObjRows.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContentBlockDataObjRows.

        The type of field, example text or link  # noqa: E501

        :param type: The type of this ContentBlockDataObjRows.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def window_open_target(self):
        """Gets the window_open_target of this ContentBlockDataObjRows.  # noqa: E501

        target window for nav_url  # noqa: E501

        :return: The window_open_target of this ContentBlockDataObjRows.  # noqa: E501
        :rtype: str
        """
        return self._window_open_target

    @window_open_target.setter
    def window_open_target(self, window_open_target):
        """Sets the window_open_target of this ContentBlockDataObjRows.

        target window for nav_url  # noqa: E501

        :param window_open_target: The window_open_target of this ContentBlockDataObjRows.  # noqa: E501
        :type: str
        """

        self._window_open_target = window_open_target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentBlockDataObjRows, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentBlockDataObjRows):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
