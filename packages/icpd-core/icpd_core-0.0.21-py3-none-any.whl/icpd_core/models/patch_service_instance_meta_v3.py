# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PatchServiceInstanceMetaV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'metadata': 'object',
        'provision_status': 'ProviderProvisionStatus',
        'resources': 'Resources',
        'service_instance_version': 'str'
    }

    attribute_map = {
        'description': 'description',
        'metadata': 'metadata',
        'provision_status': 'provision_status',
        'resources': 'resources',
        'service_instance_version': 'service_instance_version'
    }

    def __init__(self, description=None, metadata=None, provision_status=None, resources=None, service_instance_version=None):  # noqa: E501
        """PatchServiceInstanceMetaV3 - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._metadata = None
        self._provision_status = None
        self._resources = None
        self._service_instance_version = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if metadata is not None:
            self.metadata = metadata
        if provision_status is not None:
            self.provision_status = provision_status
        if resources is not None:
            self.resources = resources
        if service_instance_version is not None:
            self.service_instance_version = service_instance_version

    @property
    def description(self):
        """Gets the description of this PatchServiceInstanceMetaV3.  # noqa: E501

        Service instance description  # noqa: E501

        :return: The description of this PatchServiceInstanceMetaV3.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PatchServiceInstanceMetaV3.

        Service instance description  # noqa: E501

        :param description: The description of this PatchServiceInstanceMetaV3.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this PatchServiceInstanceMetaV3.  # noqa: E501

        Metadata object with provider specific schema  # noqa: E501

        :return: The metadata of this PatchServiceInstanceMetaV3.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PatchServiceInstanceMetaV3.

        Metadata object with provider specific schema  # noqa: E501

        :param metadata: The metadata of this PatchServiceInstanceMetaV3.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def provision_status(self):
        """Gets the provision_status of this PatchServiceInstanceMetaV3.  # noqa: E501


        :return: The provision_status of this PatchServiceInstanceMetaV3.  # noqa: E501
        :rtype: ProviderProvisionStatus
        """
        return self._provision_status

    @provision_status.setter
    def provision_status(self, provision_status):
        """Sets the provision_status of this PatchServiceInstanceMetaV3.


        :param provision_status: The provision_status of this PatchServiceInstanceMetaV3.  # noqa: E501
        :type: ProviderProvisionStatus
        """

        self._provision_status = provision_status

    @property
    def resources(self):
        """Gets the resources of this PatchServiceInstanceMetaV3.  # noqa: E501


        :return: The resources of this PatchServiceInstanceMetaV3.  # noqa: E501
        :rtype: Resources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this PatchServiceInstanceMetaV3.


        :param resources: The resources of this PatchServiceInstanceMetaV3.  # noqa: E501
        :type: Resources
        """

        self._resources = resources

    @property
    def service_instance_version(self):
        """Gets the service_instance_version of this PatchServiceInstanceMetaV3.  # noqa: E501

        Service instance version to be updated  # noqa: E501

        :return: The service_instance_version of this PatchServiceInstanceMetaV3.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_version

    @service_instance_version.setter
    def service_instance_version(self, service_instance_version):
        """Sets the service_instance_version of this PatchServiceInstanceMetaV3.

        Service instance version to be updated  # noqa: E501

        :param service_instance_version: The service_instance_version of this PatchServiceInstanceMetaV3.  # noqa: E501
        :type: str
        """

        self._service_instance_version = service_instance_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PatchServiceInstanceMetaV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchServiceInstanceMetaV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
