# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OpenApiGetRoleResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role_info': 'OpenApiGetRoleResponseRoleInfo',
        'message_code_': 'str',
        'message': 'str'
    }

    attribute_map = {
        'role_info': 'RoleInfo',
        'message_code_': '_messageCode_',
        'message': 'message'
    }

    def __init__(self, role_info=None, message_code_=None, message=None):  # noqa: E501
        """OpenApiGetRoleResponse - a model defined in Swagger"""  # noqa: E501

        self._role_info = None
        self._message_code_ = None
        self._message = None
        self.discriminator = None

        if role_info is not None:
            self.role_info = role_info
        if message_code_ is not None:
            self.message_code_ = message_code_
        if message is not None:
            self.message = message

    @property
    def role_info(self):
        """Gets the role_info of this OpenApiGetRoleResponse.  # noqa: E501


        :return: The role_info of this OpenApiGetRoleResponse.  # noqa: E501
        :rtype: OpenApiGetRoleResponseRoleInfo
        """
        return self._role_info

    @role_info.setter
    def role_info(self, role_info):
        """Sets the role_info of this OpenApiGetRoleResponse.


        :param role_info: The role_info of this OpenApiGetRoleResponse.  # noqa: E501
        :type: OpenApiGetRoleResponseRoleInfo
        """

        self._role_info = role_info

    @property
    def message_code_(self):
        """Gets the message_code_ of this OpenApiGetRoleResponse.  # noqa: E501

        message code  # noqa: E501

        :return: The message_code_ of this OpenApiGetRoleResponse.  # noqa: E501
        :rtype: str
        """
        return self._message_code_

    @message_code_.setter
    def message_code_(self, message_code_):
        """Sets the message_code_ of this OpenApiGetRoleResponse.

        message code  # noqa: E501

        :param message_code_: The message_code_ of this OpenApiGetRoleResponse.  # noqa: E501
        :type: str
        """

        self._message_code_ = message_code_

    @property
    def message(self):
        """Gets the message of this OpenApiGetRoleResponse.  # noqa: E501

        message  # noqa: E501

        :return: The message of this OpenApiGetRoleResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this OpenApiGetRoleResponse.

        message  # noqa: E501

        :param message: The message of this OpenApiGetRoleResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenApiGetRoleResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenApiGetRoleResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
