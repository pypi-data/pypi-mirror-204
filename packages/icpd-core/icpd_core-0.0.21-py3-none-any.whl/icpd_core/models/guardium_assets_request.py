# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GuardiumAssetsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assets_list': 'list[str]',
        'connection_name': 'str',
        'group_name': 'str'
    }

    attribute_map = {
        'assets_list': 'assetsList',
        'connection_name': 'connectionName',
        'group_name': 'groupName'
    }

    def __init__(self, assets_list=None, connection_name=None, group_name=None):  # noqa: E501
        """GuardiumAssetsRequest - a model defined in Swagger"""  # noqa: E501

        self._assets_list = None
        self._connection_name = None
        self._group_name = None
        self.discriminator = None

        self.assets_list = assets_list
        self.connection_name = connection_name
        self.group_name = group_name

    @property
    def assets_list(self):
        """Gets the assets_list of this GuardiumAssetsRequest.  # noqa: E501


        :return: The assets_list of this GuardiumAssetsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._assets_list

    @assets_list.setter
    def assets_list(self, assets_list):
        """Sets the assets_list of this GuardiumAssetsRequest.


        :param assets_list: The assets_list of this GuardiumAssetsRequest.  # noqa: E501
        :type: list[str]
        """
        if assets_list is None:
            raise ValueError("Invalid value for `assets_list`, must not be `None`")  # noqa: E501

        self._assets_list = assets_list

    @property
    def connection_name(self):
        """Gets the connection_name of this GuardiumAssetsRequest.  # noqa: E501

        connectionId associated with Guardium host, retrieve this value from list of connections  # noqa: E501

        :return: The connection_name of this GuardiumAssetsRequest.  # noqa: E501
        :rtype: str
        """
        return self._connection_name

    @connection_name.setter
    def connection_name(self, connection_name):
        """Sets the connection_name of this GuardiumAssetsRequest.

        connectionId associated with Guardium host, retrieve this value from list of connections  # noqa: E501

        :param connection_name: The connection_name of this GuardiumAssetsRequest.  # noqa: E501
        :type: str
        """
        if connection_name is None:
            raise ValueError("Invalid value for `connection_name`, must not be `None`")  # noqa: E501

        self._connection_name = connection_name

    @property
    def group_name(self):
        """Gets the group_name of this GuardiumAssetsRequest.  # noqa: E501

        array of assets to be posted to specified Guardium group  # noqa: E501

        :return: The group_name of this GuardiumAssetsRequest.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this GuardiumAssetsRequest.

        array of assets to be posted to specified Guardium group  # noqa: E501

        :param group_name: The group_name of this GuardiumAssetsRequest.  # noqa: E501
        :type: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")  # noqa: E501

        self._group_name = group_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GuardiumAssetsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuardiumAssetsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
