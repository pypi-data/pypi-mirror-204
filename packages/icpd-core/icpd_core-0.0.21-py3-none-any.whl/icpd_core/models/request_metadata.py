# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RequestMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'abstract': 'str',
        'assigned_to': 'str',
        'assigned_to_uid': 'str',
        'data_intent': 'str',
        'data_obj': 'RequestMetadataDataObj',
        'deadline': 'str',
        'fulfilled_by': 'str',
        'issue_link': 'str',
        'project': 'str',
        'requested_by': 'str',
        'state': 'str',
        'title': 'str',
        'project_id': 'str'
    }

    attribute_map = {
        'abstract': 'Abstract',
        'assigned_to': 'AssignedTo',
        'assigned_to_uid': 'AssignedToUID',
        'data_intent': 'DataIntent',
        'data_obj': 'DataObj',
        'deadline': 'Deadline',
        'fulfilled_by': 'FulfilledBy',
        'issue_link': 'IssueLink',
        'project': 'Project',
        'requested_by': 'RequestedBy',
        'state': 'State',
        'title': 'Title',
        'project_id': 'project_id'
    }

    def __init__(self, abstract=None, assigned_to=None, assigned_to_uid=None, data_intent=None, data_obj=None, deadline=None, fulfilled_by=None, issue_link=None, project=None, requested_by=None, state=None, title=None, project_id=None):  # noqa: E501
        """RequestMetadata - a model defined in Swagger"""  # noqa: E501

        self._abstract = None
        self._assigned_to = None
        self._assigned_to_uid = None
        self._data_intent = None
        self._data_obj = None
        self._deadline = None
        self._fulfilled_by = None
        self._issue_link = None
        self._project = None
        self._requested_by = None
        self._state = None
        self._title = None
        self._project_id = None
        self.discriminator = None

        if abstract is not None:
            self.abstract = abstract
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if assigned_to_uid is not None:
            self.assigned_to_uid = assigned_to_uid
        if data_intent is not None:
            self.data_intent = data_intent
        if data_obj is not None:
            self.data_obj = data_obj
        if deadline is not None:
            self.deadline = deadline
        if fulfilled_by is not None:
            self.fulfilled_by = fulfilled_by
        if issue_link is not None:
            self.issue_link = issue_link
        if project is not None:
            self.project = project
        if requested_by is not None:
            self.requested_by = requested_by
        if state is not None:
            self.state = state
        self.title = title
        if project_id is not None:
            self.project_id = project_id

    @property
    def abstract(self):
        """Gets the abstract of this RequestMetadata.  # noqa: E501


        :return: The abstract of this RequestMetadata.  # noqa: E501
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """Sets the abstract of this RequestMetadata.


        :param abstract: The abstract of this RequestMetadata.  # noqa: E501
        :type: str
        """

        self._abstract = abstract

    @property
    def assigned_to(self):
        """Gets the assigned_to of this RequestMetadata.  # noqa: E501


        :return: The assigned_to of this RequestMetadata.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this RequestMetadata.


        :param assigned_to: The assigned_to of this RequestMetadata.  # noqa: E501
        :type: str
        """

        self._assigned_to = assigned_to

    @property
    def assigned_to_uid(self):
        """Gets the assigned_to_uid of this RequestMetadata.  # noqa: E501


        :return: The assigned_to_uid of this RequestMetadata.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to_uid

    @assigned_to_uid.setter
    def assigned_to_uid(self, assigned_to_uid):
        """Sets the assigned_to_uid of this RequestMetadata.


        :param assigned_to_uid: The assigned_to_uid of this RequestMetadata.  # noqa: E501
        :type: str
        """

        self._assigned_to_uid = assigned_to_uid

    @property
    def data_intent(self):
        """Gets the data_intent of this RequestMetadata.  # noqa: E501


        :return: The data_intent of this RequestMetadata.  # noqa: E501
        :rtype: str
        """
        return self._data_intent

    @data_intent.setter
    def data_intent(self, data_intent):
        """Sets the data_intent of this RequestMetadata.


        :param data_intent: The data_intent of this RequestMetadata.  # noqa: E501
        :type: str
        """

        self._data_intent = data_intent

    @property
    def data_obj(self):
        """Gets the data_obj of this RequestMetadata.  # noqa: E501


        :return: The data_obj of this RequestMetadata.  # noqa: E501
        :rtype: RequestMetadataDataObj
        """
        return self._data_obj

    @data_obj.setter
    def data_obj(self, data_obj):
        """Sets the data_obj of this RequestMetadata.


        :param data_obj: The data_obj of this RequestMetadata.  # noqa: E501
        :type: RequestMetadataDataObj
        """

        self._data_obj = data_obj

    @property
    def deadline(self):
        """Gets the deadline of this RequestMetadata.  # noqa: E501


        :return: The deadline of this RequestMetadata.  # noqa: E501
        :rtype: str
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this RequestMetadata.


        :param deadline: The deadline of this RequestMetadata.  # noqa: E501
        :type: str
        """

        self._deadline = deadline

    @property
    def fulfilled_by(self):
        """Gets the fulfilled_by of this RequestMetadata.  # noqa: E501


        :return: The fulfilled_by of this RequestMetadata.  # noqa: E501
        :rtype: str
        """
        return self._fulfilled_by

    @fulfilled_by.setter
    def fulfilled_by(self, fulfilled_by):
        """Sets the fulfilled_by of this RequestMetadata.


        :param fulfilled_by: The fulfilled_by of this RequestMetadata.  # noqa: E501
        :type: str
        """

        self._fulfilled_by = fulfilled_by

    @property
    def issue_link(self):
        """Gets the issue_link of this RequestMetadata.  # noqa: E501


        :return: The issue_link of this RequestMetadata.  # noqa: E501
        :rtype: str
        """
        return self._issue_link

    @issue_link.setter
    def issue_link(self, issue_link):
        """Sets the issue_link of this RequestMetadata.


        :param issue_link: The issue_link of this RequestMetadata.  # noqa: E501
        :type: str
        """

        self._issue_link = issue_link

    @property
    def project(self):
        """Gets the project of this RequestMetadata.  # noqa: E501


        :return: The project of this RequestMetadata.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this RequestMetadata.


        :param project: The project of this RequestMetadata.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def requested_by(self):
        """Gets the requested_by of this RequestMetadata.  # noqa: E501


        :return: The requested_by of this RequestMetadata.  # noqa: E501
        :rtype: str
        """
        return self._requested_by

    @requested_by.setter
    def requested_by(self, requested_by):
        """Sets the requested_by of this RequestMetadata.


        :param requested_by: The requested_by of this RequestMetadata.  # noqa: E501
        :type: str
        """

        self._requested_by = requested_by

    @property
    def state(self):
        """Gets the state of this RequestMetadata.  # noqa: E501


        :return: The state of this RequestMetadata.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RequestMetadata.


        :param state: The state of this RequestMetadata.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def title(self):
        """Gets the title of this RequestMetadata.  # noqa: E501


        :return: The title of this RequestMetadata.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RequestMetadata.


        :param title: The title of this RequestMetadata.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def project_id(self):
        """Gets the project_id of this RequestMetadata.  # noqa: E501


        :return: The project_id of this RequestMetadata.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this RequestMetadata.


        :param project_id: The project_id of this RequestMetadata.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
