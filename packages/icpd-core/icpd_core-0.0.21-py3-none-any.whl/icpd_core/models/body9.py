# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body9(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_key': 'str',
        'expiry_time': 'int',
        'password': 'str',
        'service_instance_display_name': 'str',
        'service_instance_id': 'str',
        'service_instance_type': 'str',
        'username': 'str'
    }

    attribute_map = {
        'api_key': 'apiKey',
        'expiry_time': 'expiryTime',
        'password': 'password',
        'service_instance_display_name': 'serviceInstanceDisplayName',
        'service_instance_id': 'serviceInstanceId',
        'service_instance_type': 'serviceInstanceType',
        'username': 'username'
    }

    def __init__(self, api_key=None, expiry_time=None, password=None, service_instance_display_name=None, service_instance_id=None, service_instance_type=None, username=None):  # noqa: E501
        """Body9 - a model defined in Swagger"""  # noqa: E501

        self._api_key = None
        self._expiry_time = None
        self._password = None
        self._service_instance_display_name = None
        self._service_instance_id = None
        self._service_instance_type = None
        self._username = None
        self.discriminator = None

        if api_key is not None:
            self.api_key = api_key
        if expiry_time is not None:
            self.expiry_time = expiry_time
        if password is not None:
            self.password = password
        if service_instance_display_name is not None:
            self.service_instance_display_name = service_instance_display_name
        if service_instance_id is not None:
            self.service_instance_id = service_instance_id
        if service_instance_type is not None:
            self.service_instance_type = service_instance_type
        if username is not None:
            self.username = username

    @property
    def api_key(self):
        """Gets the api_key of this Body9.  # noqa: E501


        :return: The api_key of this Body9.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this Body9.


        :param api_key: The api_key of this Body9.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def expiry_time(self):
        """Gets the expiry_time of this Body9.  # noqa: E501

        duration (in minutes) the token is valid  # noqa: E501

        :return: The expiry_time of this Body9.  # noqa: E501
        :rtype: int
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this Body9.

        duration (in minutes) the token is valid  # noqa: E501

        :param expiry_time: The expiry_time of this Body9.  # noqa: E501
        :type: int
        """

        self._expiry_time = expiry_time

    @property
    def password(self):
        """Gets the password of this Body9.  # noqa: E501


        :return: The password of this Body9.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Body9.


        :param password: The password of this Body9.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def service_instance_display_name(self):
        """Gets the service_instance_display_name of this Body9.  # noqa: E501


        :return: The service_instance_display_name of this Body9.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_display_name

    @service_instance_display_name.setter
    def service_instance_display_name(self, service_instance_display_name):
        """Sets the service_instance_display_name of this Body9.


        :param service_instance_display_name: The service_instance_display_name of this Body9.  # noqa: E501
        :type: str
        """

        self._service_instance_display_name = service_instance_display_name

    @property
    def service_instance_id(self):
        """Gets the service_instance_id of this Body9.  # noqa: E501


        :return: The service_instance_id of this Body9.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_id

    @service_instance_id.setter
    def service_instance_id(self, service_instance_id):
        """Sets the service_instance_id of this Body9.


        :param service_instance_id: The service_instance_id of this Body9.  # noqa: E501
        :type: str
        """

        self._service_instance_id = service_instance_id

    @property
    def service_instance_type(self):
        """Gets the service_instance_type of this Body9.  # noqa: E501


        :return: The service_instance_type of this Body9.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_type

    @service_instance_type.setter
    def service_instance_type(self, service_instance_type):
        """Sets the service_instance_type of this Body9.


        :param service_instance_type: The service_instance_type of this Body9.  # noqa: E501
        :type: str
        """

        self._service_instance_type = service_instance_type

    @property
    def username(self):
        """Gets the username of this Body9.  # noqa: E501


        :return: The username of this Body9.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Body9.


        :param username: The username of this Body9.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body9, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body9):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
