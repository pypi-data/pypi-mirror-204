# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Status(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exit_code_': 'int',
        'status_code_': 'int',
        'message': 'str',
        'status': 'str'
    }

    attribute_map = {
        'exit_code_': '_exitCode_',
        'status_code_': '_statusCode_',
        'message': 'message',
        'status': 'status'
    }

    def __init__(self, exit_code_=None, status_code_=None, message=None, status=None):  # noqa: E501
        """Status - a model defined in Swagger"""  # noqa: E501

        self._exit_code_ = None
        self._status_code_ = None
        self._message = None
        self._status = None
        self.discriminator = None

        if exit_code_ is not None:
            self.exit_code_ = exit_code_
        if status_code_ is not None:
            self.status_code_ = status_code_
        if message is not None:
            self.message = message
        if status is not None:
            self.status = status

    @property
    def exit_code_(self):
        """Gets the exit_code_ of this Status.  # noqa: E501

        Script exit code  # noqa: E501

        :return: The exit_code_ of this Status.  # noqa: E501
        :rtype: int
        """
        return self._exit_code_

    @exit_code_.setter
    def exit_code_(self, exit_code_):
        """Sets the exit_code_ of this Status.

        Script exit code  # noqa: E501

        :param exit_code_: The exit_code_ of this Status.  # noqa: E501
        :type: int
        """

        self._exit_code_ = exit_code_

    @property
    def status_code_(self):
        """Gets the status_code_ of this Status.  # noqa: E501

        HTTP Response status code  # noqa: E501

        :return: The status_code_ of this Status.  # noqa: E501
        :rtype: int
        """
        return self._status_code_

    @status_code_.setter
    def status_code_(self, status_code_):
        """Sets the status_code_ of this Status.

        HTTP Response status code  # noqa: E501

        :param status_code_: The status_code_ of this Status.  # noqa: E501
        :type: int
        """

        self._status_code_ = status_code_

    @property
    def message(self):
        """Gets the message of this Status.  # noqa: E501

        message describing the status  # noqa: E501

        :return: The message of this Status.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Status.

        message describing the status  # noqa: E501

        :param message: The message of this Status.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this Status.  # noqa: E501

        status of the script  # noqa: E501

        :return: The status of this Status.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Status.

        status of the script  # noqa: E501

        :param status: The status of this Status.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Status, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Status):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
