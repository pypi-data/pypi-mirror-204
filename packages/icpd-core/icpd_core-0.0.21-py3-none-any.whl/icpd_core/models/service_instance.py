# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ServiceInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addon_type': 'str',
        'addon_version': 'str',
        'connection_info': 'ConnectionInfo',
        'created_at': 'str',
        'description': 'str',
        'display_name': 'str',
        'id': 'str',
        'instance_identifiers': 'list[str]',
        'metadata': 'object',
        'misc_data': 'MiscellaneousData',
        'namespace': 'str',
        'owner_uid': 'str',
        'owner_username': 'str',
        'parameters': 'object',
        'provision_status': 'ProvisionStatus',
        'resources': 'Resources',
        'roles': 'list[str]',
        'total_users': 'int',
        'updated_at': 'str',
        'zen_service_instance_info': 'ZenServiceInstanceInfo'
    }

    attribute_map = {
        'addon_type': 'addon_type',
        'addon_version': 'addon_version',
        'connection_info': 'connection_info',
        'created_at': 'created_at',
        'description': 'description',
        'display_name': 'display_name',
        'id': 'id',
        'instance_identifiers': 'instance_identifiers',
        'metadata': 'metadata',
        'misc_data': 'misc_data',
        'namespace': 'namespace',
        'owner_uid': 'owner_uid',
        'owner_username': 'owner_username',
        'parameters': 'parameters',
        'provision_status': 'provision_status',
        'resources': 'resources',
        'roles': 'roles',
        'total_users': 'total_users',
        'updated_at': 'updated_at',
        'zen_service_instance_info': 'zen_service_instance_info'
    }

    def __init__(self, addon_type=None, addon_version=None, connection_info=None, created_at=None, description=None, display_name=None, id=None, instance_identifiers=None, metadata=None, misc_data=None, namespace=None, owner_uid=None, owner_username=None, parameters=None, provision_status=None, resources=None, roles=None, total_users=None, updated_at=None, zen_service_instance_info=None):  # noqa: E501
        """ServiceInstance - a model defined in Swagger"""  # noqa: E501

        self._addon_type = None
        self._addon_version = None
        self._connection_info = None
        self._created_at = None
        self._description = None
        self._display_name = None
        self._id = None
        self._instance_identifiers = None
        self._metadata = None
        self._misc_data = None
        self._namespace = None
        self._owner_uid = None
        self._owner_username = None
        self._parameters = None
        self._provision_status = None
        self._resources = None
        self._roles = None
        self._total_users = None
        self._updated_at = None
        self._zen_service_instance_info = None
        self.discriminator = None

        if addon_type is not None:
            self.addon_type = addon_type
        if addon_version is not None:
            self.addon_version = addon_version
        if connection_info is not None:
            self.connection_info = connection_info
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if id is not None:
            self.id = id
        if instance_identifiers is not None:
            self.instance_identifiers = instance_identifiers
        if metadata is not None:
            self.metadata = metadata
        if misc_data is not None:
            self.misc_data = misc_data
        if namespace is not None:
            self.namespace = namespace
        if owner_uid is not None:
            self.owner_uid = owner_uid
        if owner_username is not None:
            self.owner_username = owner_username
        if parameters is not None:
            self.parameters = parameters
        if provision_status is not None:
            self.provision_status = provision_status
        if resources is not None:
            self.resources = resources
        if roles is not None:
            self.roles = roles
        if total_users is not None:
            self.total_users = total_users
        if updated_at is not None:
            self.updated_at = updated_at
        if zen_service_instance_info is not None:
            self.zen_service_instance_info = zen_service_instance_info

    @property
    def addon_type(self):
        """Gets the addon_type of this ServiceInstance.  # noqa: E501

        Type of the add-on  # noqa: E501

        :return: The addon_type of this ServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._addon_type

    @addon_type.setter
    def addon_type(self, addon_type):
        """Sets the addon_type of this ServiceInstance.

        Type of the add-on  # noqa: E501

        :param addon_type: The addon_type of this ServiceInstance.  # noqa: E501
        :type: str
        """

        self._addon_type = addon_type

    @property
    def addon_version(self):
        """Gets the addon_version of this ServiceInstance.  # noqa: E501

        Version of the add-on  # noqa: E501

        :return: The addon_version of this ServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._addon_version

    @addon_version.setter
    def addon_version(self, addon_version):
        """Sets the addon_version of this ServiceInstance.

        Version of the add-on  # noqa: E501

        :param addon_version: The addon_version of this ServiceInstance.  # noqa: E501
        :type: str
        """

        self._addon_version = addon_version

    @property
    def connection_info(self):
        """Gets the connection_info of this ServiceInstance.  # noqa: E501


        :return: The connection_info of this ServiceInstance.  # noqa: E501
        :rtype: ConnectionInfo
        """
        return self._connection_info

    @connection_info.setter
    def connection_info(self, connection_info):
        """Sets the connection_info of this ServiceInstance.


        :param connection_info: The connection_info of this ServiceInstance.  # noqa: E501
        :type: ConnectionInfo
        """

        self._connection_info = connection_info

    @property
    def created_at(self):
        """Gets the created_at of this ServiceInstance.  # noqa: E501

        Service instance creation time  # noqa: E501

        :return: The created_at of this ServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ServiceInstance.

        Service instance creation time  # noqa: E501

        :param created_at: The created_at of this ServiceInstance.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this ServiceInstance.  # noqa: E501

        Description of the service instance  # noqa: E501

        :return: The description of this ServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceInstance.

        Description of the service instance  # noqa: E501

        :param description: The description of this ServiceInstance.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ServiceInstance.  # noqa: E501

        Display name of the service instance  # noqa: E501

        :return: The display_name of this ServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ServiceInstance.

        Display name of the service instance  # noqa: E501

        :param display_name: The display_name of this ServiceInstance.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this ServiceInstance.  # noqa: E501

        Service instance ID  # noqa: E501

        :return: The id of this ServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceInstance.

        Service instance ID  # noqa: E501

        :param id: The id of this ServiceInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def instance_identifiers(self):
        """Gets the instance_identifiers of this ServiceInstance.  # noqa: E501


        :return: The instance_identifiers of this ServiceInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._instance_identifiers

    @instance_identifiers.setter
    def instance_identifiers(self, instance_identifiers):
        """Sets the instance_identifiers of this ServiceInstance.


        :param instance_identifiers: The instance_identifiers of this ServiceInstance.  # noqa: E501
        :type: list[str]
        """

        self._instance_identifiers = instance_identifiers

    @property
    def metadata(self):
        """Gets the metadata of this ServiceInstance.  # noqa: E501

        Free-form object which includes non-mandatory fields used by service provider, these are persisted to metastore DB  # noqa: E501

        :return: The metadata of this ServiceInstance.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ServiceInstance.

        Free-form object which includes non-mandatory fields used by service provider, these are persisted to metastore DB  # noqa: E501

        :param metadata: The metadata of this ServiceInstance.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def misc_data(self):
        """Gets the misc_data of this ServiceInstance.  # noqa: E501


        :return: The misc_data of this ServiceInstance.  # noqa: E501
        :rtype: MiscellaneousData
        """
        return self._misc_data

    @misc_data.setter
    def misc_data(self, misc_data):
        """Sets the misc_data of this ServiceInstance.


        :param misc_data: The misc_data of this ServiceInstance.  # noqa: E501
        :type: MiscellaneousData
        """

        self._misc_data = misc_data

    @property
    def namespace(self):
        """Gets the namespace of this ServiceInstance.  # noqa: E501

        Kubernetes namespace of the service instance  # noqa: E501

        :return: The namespace of this ServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ServiceInstance.

        Kubernetes namespace of the service instance  # noqa: E501

        :param namespace: The namespace of this ServiceInstance.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def owner_uid(self):
        """Gets the owner_uid of this ServiceInstance.  # noqa: E501


        :return: The owner_uid of this ServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._owner_uid

    @owner_uid.setter
    def owner_uid(self, owner_uid):
        """Sets the owner_uid of this ServiceInstance.


        :param owner_uid: The owner_uid of this ServiceInstance.  # noqa: E501
        :type: str
        """

        self._owner_uid = owner_uid

    @property
    def owner_username(self):
        """Gets the owner_username of this ServiceInstance.  # noqa: E501

        this field is optional. Can be Used by services like Db2/oz  # noqa: E501

        :return: The owner_username of this ServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._owner_username

    @owner_username.setter
    def owner_username(self, owner_username):
        """Sets the owner_username of this ServiceInstance.

        this field is optional. Can be Used by services like Db2/oz  # noqa: E501

        :param owner_username: The owner_username of this ServiceInstance.  # noqa: E501
        :type: str
        """

        self._owner_username = owner_username

    @property
    def parameters(self):
        """Gets the parameters of this ServiceInstance.  # noqa: E501

        Free-form object which includes mandatory fields required to create service instance, these are persisted to metastore DB  # noqa: E501

        :return: The parameters of this ServiceInstance.  # noqa: E501
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ServiceInstance.

        Free-form object which includes mandatory fields required to create service instance, these are persisted to metastore DB  # noqa: E501

        :param parameters: The parameters of this ServiceInstance.  # noqa: E501
        :type: object
        """

        self._parameters = parameters

    @property
    def provision_status(self):
        """Gets the provision_status of this ServiceInstance.  # noqa: E501


        :return: The provision_status of this ServiceInstance.  # noqa: E501
        :rtype: ProvisionStatus
        """
        return self._provision_status

    @provision_status.setter
    def provision_status(self, provision_status):
        """Sets the provision_status of this ServiceInstance.


        :param provision_status: The provision_status of this ServiceInstance.  # noqa: E501
        :type: ProvisionStatus
        """

        self._provision_status = provision_status

    @property
    def resources(self):
        """Gets the resources of this ServiceInstance.  # noqa: E501


        :return: The resources of this ServiceInstance.  # noqa: E501
        :rtype: Resources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ServiceInstance.


        :param resources: The resources of this ServiceInstance.  # noqa: E501
        :type: Resources
        """

        self._resources = resources

    @property
    def roles(self):
        """Gets the roles of this ServiceInstance.  # noqa: E501


        :return: The roles of this ServiceInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this ServiceInstance.


        :param roles: The roles of this ServiceInstance.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def total_users(self):
        """Gets the total_users of this ServiceInstance.  # noqa: E501

        Number of users assigned to service instance  # noqa: E501

        :return: The total_users of this ServiceInstance.  # noqa: E501
        :rtype: int
        """
        return self._total_users

    @total_users.setter
    def total_users(self, total_users):
        """Sets the total_users of this ServiceInstance.

        Number of users assigned to service instance  # noqa: E501

        :param total_users: The total_users of this ServiceInstance.  # noqa: E501
        :type: int
        """

        self._total_users = total_users

    @property
    def updated_at(self):
        """Gets the updated_at of this ServiceInstance.  # noqa: E501

        Service instance last updated time  # noqa: E501

        :return: The updated_at of this ServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ServiceInstance.

        Service instance last updated time  # noqa: E501

        :param updated_at: The updated_at of this ServiceInstance.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def zen_service_instance_info(self):
        """Gets the zen_service_instance_info of this ServiceInstance.  # noqa: E501


        :return: The zen_service_instance_info of this ServiceInstance.  # noqa: E501
        :rtype: ZenServiceInstanceInfo
        """
        return self._zen_service_instance_info

    @zen_service_instance_info.setter
    def zen_service_instance_info(self, zen_service_instance_info):
        """Sets the zen_service_instance_info of this ServiceInstance.


        :param zen_service_instance_info: The zen_service_instance_info of this ServiceInstance.  # noqa: E501
        :type: ZenServiceInstanceInfo
        """

        self._zen_service_instance_info = zen_service_instance_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
