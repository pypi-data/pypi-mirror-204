# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body6(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cifs_password': 'str',
        'cifs_username': 'str',
        'description': 'str',
        'supplemental_groups': 'list[int]'
    }

    attribute_map = {
        'cifs_password': 'cifs_password',
        'cifs_username': 'cifs_username',
        'description': 'description',
        'supplemental_groups': 'supplemental_groups'
    }

    def __init__(self, cifs_password=None, cifs_username=None, description=None, supplemental_groups=None):  # noqa: E501
        """Body6 - a model defined in Swagger"""  # noqa: E501

        self._cifs_password = None
        self._cifs_username = None
        self._description = None
        self._supplemental_groups = None
        self.discriminator = None

        if cifs_password is not None:
            self.cifs_password = cifs_password
        if cifs_username is not None:
            self.cifs_username = cifs_username
        if description is not None:
            self.description = description
        if supplemental_groups is not None:
            self.supplemental_groups = supplemental_groups

    @property
    def cifs_password(self):
        """Gets the cifs_password of this Body6.  # noqa: E501


        :return: The cifs_password of this Body6.  # noqa: E501
        :rtype: str
        """
        return self._cifs_password

    @cifs_password.setter
    def cifs_password(self, cifs_password):
        """Sets the cifs_password of this Body6.


        :param cifs_password: The cifs_password of this Body6.  # noqa: E501
        :type: str
        """

        self._cifs_password = cifs_password

    @property
    def cifs_username(self):
        """Gets the cifs_username of this Body6.  # noqa: E501


        :return: The cifs_username of this Body6.  # noqa: E501
        :rtype: str
        """
        return self._cifs_username

    @cifs_username.setter
    def cifs_username(self, cifs_username):
        """Sets the cifs_username of this Body6.


        :param cifs_username: The cifs_username of this Body6.  # noqa: E501
        :type: str
        """

        self._cifs_username = cifs_username

    @property
    def description(self):
        """Gets the description of this Body6.  # noqa: E501


        :return: The description of this Body6.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Body6.


        :param description: The description of this Body6.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def supplemental_groups(self):
        """Gets the supplemental_groups of this Body6.  # noqa: E501


        :return: The supplemental_groups of this Body6.  # noqa: E501
        :rtype: list[int]
        """
        return self._supplemental_groups

    @supplemental_groups.setter
    def supplemental_groups(self, supplemental_groups):
        """Sets the supplemental_groups of this Body6.


        :param supplemental_groups: The supplemental_groups of this Body6.  # noqa: E501
        :type: list[int]
        """

        self._supplemental_groups = supplemental_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body6, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body6):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
