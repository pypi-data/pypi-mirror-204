# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConnectionObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_properties': 'str',
        'auth': 'ConnectionObjectAuth',
        'certificate': 'ConnectionObjectCertificate',
        'context': 'str',
        'credentials': 'ConnectionCredentials',
        'database_name': 'str',
        'description': 'str',
        'display_name': 'str',
        'info': 'ConnectionObjectInfo',
        'payload': 'object',
        'remote_connector': 'str',
        'shared_credentials': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'additional_properties': 'additionalProperties',
        'auth': 'auth',
        'certificate': 'certificate',
        'context': 'context',
        'credentials': 'credentials',
        'database_name': 'databaseName',
        'description': 'description',
        'display_name': 'displayName',
        'info': 'info',
        'payload': 'payload',
        'remote_connector': 'remoteConnector',
        'shared_credentials': 'sharedCredentials',
        'type': 'type'
    }

    def __init__(self, additional_properties=None, auth=None, certificate=None, context=None, credentials=None, database_name=None, description=None, display_name=None, info=None, payload=None, remote_connector=None, shared_credentials=False, type=None):  # noqa: E501
        """ConnectionObject - a model defined in Swagger"""  # noqa: E501

        self._additional_properties = None
        self._auth = None
        self._certificate = None
        self._context = None
        self._credentials = None
        self._database_name = None
        self._description = None
        self._display_name = None
        self._info = None
        self._payload = None
        self._remote_connector = None
        self._shared_credentials = None
        self._type = None
        self.discriminator = None

        if additional_properties is not None:
            self.additional_properties = additional_properties
        if auth is not None:
            self.auth = auth
        if certificate is not None:
            self.certificate = certificate
        if context is not None:
            self.context = context
        self.credentials = credentials
        if database_name is not None:
            self.database_name = database_name
        if description is not None:
            self.description = description
        self.display_name = display_name
        self.info = info
        if payload is not None:
            self.payload = payload
        if remote_connector is not None:
            self.remote_connector = remote_connector
        if shared_credentials is not None:
            self.shared_credentials = shared_credentials
        self.type = type

    @property
    def additional_properties(self):
        """Gets the additional_properties of this ConnectionObject.  # noqa: E501


        :return: The additional_properties of this ConnectionObject.  # noqa: E501
        :rtype: str
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this ConnectionObject.


        :param additional_properties: The additional_properties of this ConnectionObject.  # noqa: E501
        :type: str
        """

        self._additional_properties = additional_properties

    @property
    def auth(self):
        """Gets the auth of this ConnectionObject.  # noqa: E501


        :return: The auth of this ConnectionObject.  # noqa: E501
        :rtype: ConnectionObjectAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this ConnectionObject.


        :param auth: The auth of this ConnectionObject.  # noqa: E501
        :type: ConnectionObjectAuth
        """

        self._auth = auth

    @property
    def certificate(self):
        """Gets the certificate of this ConnectionObject.  # noqa: E501


        :return: The certificate of this ConnectionObject.  # noqa: E501
        :rtype: ConnectionObjectCertificate
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this ConnectionObject.


        :param certificate: The certificate of this ConnectionObject.  # noqa: E501
        :type: ConnectionObjectCertificate
        """

        self._certificate = certificate

    @property
    def context(self):
        """Gets the context of this ConnectionObject.  # noqa: E501


        :return: The context of this ConnectionObject.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ConnectionObject.


        :param context: The context of this ConnectionObject.  # noqa: E501
        :type: str
        """

        self._context = context

    @property
    def credentials(self):
        """Gets the credentials of this ConnectionObject.  # noqa: E501


        :return: The credentials of this ConnectionObject.  # noqa: E501
        :rtype: ConnectionCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this ConnectionObject.


        :param credentials: The credentials of this ConnectionObject.  # noqa: E501
        :type: ConnectionCredentials
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    @property
    def database_name(self):
        """Gets the database_name of this ConnectionObject.  # noqa: E501


        :return: The database_name of this ConnectionObject.  # noqa: E501
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this ConnectionObject.


        :param database_name: The database_name of this ConnectionObject.  # noqa: E501
        :type: str
        """

        self._database_name = database_name

    @property
    def description(self):
        """Gets the description of this ConnectionObject.  # noqa: E501


        :return: The description of this ConnectionObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConnectionObject.


        :param description: The description of this ConnectionObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ConnectionObject.  # noqa: E501


        :return: The display_name of this ConnectionObject.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ConnectionObject.


        :param display_name: The display_name of this ConnectionObject.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def info(self):
        """Gets the info of this ConnectionObject.  # noqa: E501


        :return: The info of this ConnectionObject.  # noqa: E501
        :rtype: ConnectionObjectInfo
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this ConnectionObject.


        :param info: The info of this ConnectionObject.  # noqa: E501
        :type: ConnectionObjectInfo
        """
        if info is None:
            raise ValueError("Invalid value for `info`, must not be `None`")  # noqa: E501

        self._info = info

    @property
    def payload(self):
        """Gets the payload of this ConnectionObject.  # noqa: E501


        :return: The payload of this ConnectionObject.  # noqa: E501
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ConnectionObject.


        :param payload: The payload of this ConnectionObject.  # noqa: E501
        :type: object
        """

        self._payload = payload

    @property
    def remote_connector(self):
        """Gets the remote_connector of this ConnectionObject.  # noqa: E501


        :return: The remote_connector of this ConnectionObject.  # noqa: E501
        :rtype: str
        """
        return self._remote_connector

    @remote_connector.setter
    def remote_connector(self, remote_connector):
        """Sets the remote_connector of this ConnectionObject.


        :param remote_connector: The remote_connector of this ConnectionObject.  # noqa: E501
        :type: str
        """

        self._remote_connector = remote_connector

    @property
    def shared_credentials(self):
        """Gets the shared_credentials of this ConnectionObject.  # noqa: E501


        :return: The shared_credentials of this ConnectionObject.  # noqa: E501
        :rtype: bool
        """
        return self._shared_credentials

    @shared_credentials.setter
    def shared_credentials(self, shared_credentials):
        """Sets the shared_credentials of this ConnectionObject.


        :param shared_credentials: The shared_credentials of this ConnectionObject.  # noqa: E501
        :type: bool
        """

        self._shared_credentials = shared_credentials

    @property
    def type(self):
        """Gets the type of this ConnectionObject.  # noqa: E501


        :return: The type of this ConnectionObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConnectionObject.


        :param type: The type of this ConnectionObject.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectionObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
