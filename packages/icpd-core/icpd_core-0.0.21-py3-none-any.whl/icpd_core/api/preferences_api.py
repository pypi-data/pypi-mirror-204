# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from icpd_core.api_client import ApiClient


class PreferencesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_preferences(self, **kwargs):  # noqa: E501
        """Delete user preferences  # noqa: E501

        Deletes user preferences based on (extension_point_id and extension_name) or (id)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_preferences(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str extension_point_id: target in the homepage where the extension should be rendered
        :param str extension_name: particular extensions' names
        :param str id: identifier of a particular extension
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_preferences_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_preferences_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_preferences_with_http_info(self, **kwargs):  # noqa: E501
        """Delete user preferences  # noqa: E501

        Deletes user preferences based on (extension_point_id and extension_name) or (id)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_preferences_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :param str extension_point_id: target in the homepage where the extension should be rendered
        :param str extension_name: particular extensions' names
        :param str id: identifier of a particular extension
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'extension_point_id', 'extension_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_preferences" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'extension_point_id' in params:
            query_params.append(('extension_point_id', params['extension_point_id']))  # noqa: E501
        if 'extension_name' in params:
            query_params.append(('extension_name', params['extension_name']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/preferences', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user_preferences(self, key, **kwargs):  # noqa: E501
        """Delete user preferences  # noqa: E501

        Query database and delete the user preferences record  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_preferences(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key that uniquely identifies the user_preferences object (required)
        :param str jwt_auth_user_payload: Supplied by proxy. Do NOT add your own value.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_preferences_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_preferences_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def delete_user_preferences_with_http_info(self, key, **kwargs):  # noqa: E501
        """Delete user preferences  # noqa: E501

        Query database and delete the user preferences record  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_preferences_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key that uniquely identifies the user_preferences object (required)
        :param str jwt_auth_user_payload: Supplied by proxy. Do NOT add your own value.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_preferences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_user_preferences`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user_preferences/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_preferences(self, **kwargs):  # noqa: E501
        """Get user preferences  # noqa: E501

        Get all user preferences OR filter based on query parameters in the request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_preferences(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy. Do NOT add your own value.
        :param str key: Query based on key of user preferences record
        :return: SuccessGetResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_preferences_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_user_preferences_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_user_preferences_with_http_info(self, **kwargs):  # noqa: E501
        """Get user preferences  # noqa: E501

        Get all user preferences OR filter based on query parameters in the request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_preferences_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt_auth_user_payload: Supplied by proxy. Do NOT add your own value.
        :param str key: Query based on key of user preferences record
        :return: SuccessGetResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt_auth_user_payload', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_preferences" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user_preferences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_preferences(self, extension_object, **kwargs):  # noqa: E501
        """Create/Update extension preferences  # noqa: E501

        This api upserts extension preferences in homepage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_preferences(extension_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExtensionObject extension_object: Extension object that needs to be added to preferences (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponseWithObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_preferences_with_http_info(extension_object, **kwargs)  # noqa: E501
        else:
            (data) = self.put_preferences_with_http_info(extension_object, **kwargs)  # noqa: E501
            return data

    def put_preferences_with_http_info(self, extension_object, **kwargs):  # noqa: E501
        """Create/Update extension preferences  # noqa: E501

        This api upserts extension preferences in homepage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_preferences_with_http_info(extension_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExtensionObject extension_object: Extension object that needs to be added to preferences (required)
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessPostResponseWithObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['extension_object', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_preferences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'extension_object' is set
        if ('extension_object' not in params or
                params['extension_object'] is None):
            raise ValueError("Missing the required parameter `extension_object` when calling `put_preferences`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt_auth_user_payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'extension_object' in params:
            body_params = params['extension_object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/preferences', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessPostResponseWithObj',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_user_preferences(self, key, body, **kwargs):  # noqa: E501
        """Create/update user preferences  # noqa: E501

        Query database and update the user preferences record if present else create it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_user_preferences(key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key that uniquely identifies the user_preferences object (required)
        :param PreferencesObject body: User preferences object (required)
        :param str jwt_auth_user_payload: Supplied by proxy. Do NOT add your own value.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_user_preferences_with_http_info(key, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_user_preferences_with_http_info(key, body, **kwargs)  # noqa: E501
            return data

    def put_user_preferences_with_http_info(self, key, body, **kwargs):  # noqa: E501
        """Create/update user preferences  # noqa: E501

        Query database and update the user preferences record if present else create it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_user_preferences_with_http_info(key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key that uniquely identifies the user_preferences object (required)
        :param PreferencesObject body: User preferences object (required)
        :param str jwt_auth_user_payload: Supplied by proxy. Do NOT add your own value.
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_user_preferences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_user_preferences`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_user_preferences`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user_preferences/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
