# coding: utf-8

"""
    IBM CLOUD PAK FOR DATA

    This is the Public API for IBM Cloud Pak for Data  # noqa: E501

    OpenAPI spec version: Beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from icpd_core.api_client import ApiClient


class ServiceInstanceManagerV3Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_service_instance_v3(self, instance_id, **kwargs):  # noqa: E501
        """Deprovision a service instance.  # noqa: E501

        Service instance details are removed from the database by uniquely identifying the service object and then doing a softdelete. The records in the database are retained for analytics purpose.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_instance_v3(instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: service instance identifier (required)
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool force: Set to true if the instance needs to be force deleted and bypass the default defensive checks pertaining to the service status
        :return: InstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_instance_v3_with_http_info(instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_instance_v3_with_http_info(instance_id, **kwargs)  # noqa: E501
            return data

    def delete_service_instance_v3_with_http_info(self, instance_id, **kwargs):  # noqa: E501
        """Deprovision a service instance.  # noqa: E501

        Service instance details are removed from the database by uniquely identifying the service object and then doing a softdelete. The records in the database are retained for analytics purpose.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_instance_v3_with_http_info(instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: service instance identifier (required)
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool force: Set to true if the instance needs to be force deleted and bypass the default defensive checks pertaining to the service status
        :return: InstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_id', 'ibm_cpd_transaction_id', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_instance_v3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `delete_service_instance_v3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_id' in params:
            path_params['instance_id'] = params['instance_id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/service_instances/{instance_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_instance_v3(self, instance_id, body, **kwargs):  # noqa: E501
        """Updates the service instance params.  # noqa: E501

        This Patch api edit the build/runtime parameters of different service instances.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_instance_v3(instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: service instance identifier (required)
        :param EditServiceInstanceRequest body: Arguments needed to edit the instance (required)
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessResponseV3
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_instance_v3_with_http_info(instance_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_instance_v3_with_http_info(instance_id, body, **kwargs)  # noqa: E501
            return data

    def edit_service_instance_v3_with_http_info(self, instance_id, body, **kwargs):  # noqa: E501
        """Updates the service instance params.  # noqa: E501

        This Patch api edit the build/runtime parameters of different service instances.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_instance_v3_with_http_info(instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: service instance identifier (required)
        :param EditServiceInstanceRequest body: Arguments needed to edit the instance (required)
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param str jwt_auth_user_payload: Supplied by proxy.  Do NOT add your own value.
        :return: SuccessResponseV3
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_id', 'body', 'ibm_cpd_transaction_id', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_instance_v3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `edit_service_instance_v3`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_service_instance_v3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_id' in params:
            path_params['instance_id'] = params['instance_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/service_instances/{instance_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseV3',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_instance_details_v3(self, instance_id, **kwargs):  # noqa: E501
        """Returns service instance details  # noqa: E501

        Returns service instance details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_instance_details_v3(instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: service instance identifier (required)
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool include_service_status: If true service status is retrieved from the provider.
        :param str accept_language: Language in which the add-on placeholder strings like short/long description will be returned
        :return: GetInstanceWithStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_instance_details_v3_with_http_info(instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_instance_details_v3_with_http_info(instance_id, **kwargs)  # noqa: E501
            return data

    def get_service_instance_details_v3_with_http_info(self, instance_id, **kwargs):  # noqa: E501
        """Returns service instance details  # noqa: E501

        Returns service instance details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_instance_details_v3_with_http_info(instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: service instance identifier (required)
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool include_service_status: If true service status is retrieved from the provider.
        :param str accept_language: Language in which the add-on placeholder strings like short/long description will be returned
        :return: GetInstanceWithStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_id', 'ibm_cpd_transaction_id', 'include_service_status', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_instance_details_v3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `get_service_instance_details_v3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_id' in params:
            path_params['instance_id'] = params['instance_id']  # noqa: E501

        query_params = []
        if 'include_service_status' in params:
            query_params.append(('include_service_status', params['include_service_status']))  # noqa: E501

        header_params = {}
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/service_instances/{instance_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetInstanceWithStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_instance_reserved_parameters_v3(self, addon_type, display_name, **kwargs):  # noqa: E501
        """Get reserved parameters for creating a new service instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_instance_reserved_parameters_v3(addon_type, display_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addon_type: Type of the add-on (required)
        :param str display_name: Display name of the instance to be created (required)
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: GetReservedParameters
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_instance_reserved_parameters_v3_with_http_info(addon_type, display_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_instance_reserved_parameters_v3_with_http_info(addon_type, display_name, **kwargs)  # noqa: E501
            return data

    def get_service_instance_reserved_parameters_v3_with_http_info(self, addon_type, display_name, **kwargs):  # noqa: E501
        """Get reserved parameters for creating a new service instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_instance_reserved_parameters_v3_with_http_info(addon_type, display_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addon_type: Type of the add-on (required)
        :param str display_name: Display name of the instance to be created (required)
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: GetReservedParameters
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addon_type', 'display_name', 'ibm_cpd_transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_instance_reserved_parameters_v3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addon_type' is set
        if ('addon_type' not in params or
                params['addon_type'] is None):
            raise ValueError("Missing the required parameter `addon_type` when calling `get_service_instance_reserved_parameters_v3`")  # noqa: E501
        # verify the required parameter 'display_name' is set
        if ('display_name' not in params or
                params['display_name'] is None):
            raise ValueError("Missing the required parameter `display_name` when calling `get_service_instance_reserved_parameters_v3`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'addon_type' in params:
            query_params.append(('addon_type', params['addon_type']))  # noqa: E501
        if 'display_name' in params:
            query_params.append(('display_name', params['display_name']))  # noqa: E501

        header_params = {}
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/service_instances/reserved/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetReservedParameters',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_instance_v3(self, **kwargs):  # noqa: E501
        """Returns service instance collection.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_instance_v3(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool fetch_all_instances: Only used by Administrator, if true returns all service instances.
        :param str addon_type: Type of the add-on
        :param bool exclude_volumes: exclude addon type volumes in the collection
        :param str addon_version: Version of the add-on, this needs to be used with addon_type
        :param str display_name: name of the instance to query
        :param str addon_category: Category of the add-on, this cannot be used with other parameters
        :param int offset: The number of service instances to skip before starting to collect the result set.
        :param int limit: The number of service instances to return.
        :return: GetAllInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_instance_v3_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_instance_v3_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_instance_v3_with_http_info(self, **kwargs):  # noqa: E501
        """Returns service instance collection.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_instance_v3_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param bool fetch_all_instances: Only used by Administrator, if true returns all service instances.
        :param str addon_type: Type of the add-on
        :param bool exclude_volumes: exclude addon type volumes in the collection
        :param str addon_version: Version of the add-on, this needs to be used with addon_type
        :param str display_name: name of the instance to query
        :param str addon_category: Category of the add-on, this cannot be used with other parameters
        :param int offset: The number of service instances to skip before starting to collect the result set.
        :param int limit: The number of service instances to return.
        :return: GetAllInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ibm_cpd_transaction_id', 'fetch_all_instances', 'addon_type', 'exclude_volumes', 'addon_version', 'display_name', 'addon_category', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_instance_v3" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fetch_all_instances' in params:
            query_params.append(('fetch_all_instances', params['fetch_all_instances']))  # noqa: E501
        if 'addon_type' in params:
            query_params.append(('addon_type', params['addon_type']))  # noqa: E501
        if 'exclude_volumes' in params:
            query_params.append(('exclude_volumes', params['exclude_volumes']))  # noqa: E501
        if 'addon_version' in params:
            query_params.append(('addon_version', params['addon_version']))  # noqa: E501
        if 'display_name' in params:
            query_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'addon_category' in params:
            query_params.append(('addon_category', params['addon_category']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/service_instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAllInstancesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def provision_service_instance_v3(self, body, **kwargs):  # noqa: E501
        """Provision a new service instance.  # noqa: E501

        Can only be initiated by a user with the \"can_provision\" permission. The service instance record includes all metadata to identify the service instance, the type of service, the \"configuration\" that included its provisioning, the user who provisioned it etc. The implementation also includes some \"operational\" aspects -such as whether the instance is ready for use etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.provision_service_instance_v3(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProvisionInstanceRequest body: ServiceInstance metadata artifact that needs to be added to the Database (required)
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: InstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.provision_service_instance_v3_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.provision_service_instance_v3_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def provision_service_instance_v3_with_http_info(self, body, **kwargs):  # noqa: E501
        """Provision a new service instance.  # noqa: E501

        Can only be initiated by a user with the \"can_provision\" permission. The service instance record includes all metadata to identify the service instance, the type of service, the \"configuration\" that included its provisioning, the user who provisioned it etc. The implementation also includes some \"operational\" aspects -such as whether the instance is ready for use etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.provision_service_instance_v3_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProvisionInstanceRequest body: ServiceInstance metadata artifact that needs to be added to the Database (required)
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :return: InstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'ibm_cpd_transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method provision_service_instance_v3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `provision_service_instance_v3`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/service_instances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_service_instance_meta_v3(self, instance_id, body, **kwargs):  # noqa: E501
        """Patch call initiated by the service provider to update the service instance metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_service_instance_meta_v3(instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: Service instance identifier (required)
        :param PatchServiceInstanceMetaV3 body: Metadata to be changed (required)
        :param str jwt_auth_user_payload: Supplied by proxy. Do not add your own value.
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param str ibm_cpd_callback_token: One time token used for updating instance provision status.
        :return: ProvisionStatusUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_service_instance_meta_v3_with_http_info(instance_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_service_instance_meta_v3_with_http_info(instance_id, body, **kwargs)  # noqa: E501
            return data

    def update_service_instance_meta_v3_with_http_info(self, instance_id, body, **kwargs):  # noqa: E501
        """Patch call initiated by the service provider to update the service instance metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_service_instance_meta_v3_with_http_info(instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: Service instance identifier (required)
        :param PatchServiceInstanceMetaV3 body: Metadata to be changed (required)
        :param str jwt_auth_user_payload: Supplied by proxy. Do not add your own value.
        :param str ibm_cpd_transaction_id: Unique ID that is used to identify each transaction.
        :param str ibm_cpd_callback_token: One time token used for updating instance provision status.
        :return: ProvisionStatusUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_id', 'body', 'jwt_auth_user_payload', 'ibm_cpd_transaction_id', 'ibm_cpd_callback_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_service_instance_meta_v3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `update_service_instance_meta_v3`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_service_instance_meta_v3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_id' in params:
            path_params['instance_id'] = params['instance_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501
        if 'ibm_cpd_transaction_id' in params:
            header_params['IBM-CPD-Transaction-ID'] = params['ibm_cpd_transaction_id']  # noqa: E501
        if 'ibm_cpd_callback_token' in params:
            header_params['IBM-CPD-Callback-Token'] = params['ibm_cpd_callback_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/service_instances/{instance_id}/meta', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProvisionStatusUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upgrade_service_instance_v3(self, s_id, body, **kwargs):  # noqa: E501
        """Upgrade a service instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upgrade_service_instance_v3(s_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str s_id: Id of the service instance (required)
        :param UpgradeServiceInstanceArgs body: ServiceInstance metadata artifact that will be used for upgrade (required)
        :param str jwt_auth_user_payload: Supplied by proxy. Do not add your own value.
        :return: SuccessGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upgrade_service_instance_v3_with_http_info(s_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.upgrade_service_instance_v3_with_http_info(s_id, body, **kwargs)  # noqa: E501
            return data

    def upgrade_service_instance_v3_with_http_info(self, s_id, body, **kwargs):  # noqa: E501
        """Upgrade a service instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upgrade_service_instance_v3_with_http_info(s_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str s_id: Id of the service instance (required)
        :param UpgradeServiceInstanceArgs body: ServiceInstance metadata artifact that will be used for upgrade (required)
        :param str jwt_auth_user_payload: Supplied by proxy. Do not add your own value.
        :return: SuccessGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['s_id', 'body', 'jwt_auth_user_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upgrade_service_instance_v3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 's_id' is set
        if ('s_id' not in params or
                params['s_id'] is None):
            raise ValueError("Missing the required parameter `s_id` when calling `upgrade_service_instance_v3`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upgrade_service_instance_v3`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 's_id' in params:
            query_params.append(('sID', params['s_id']))  # noqa: E501

        header_params = {}
        if 'jwt_auth_user_payload' in params:
            header_params['jwt-auth-user-payload'] = params['jwt_auth_user_payload']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/service_instances/upgrade', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
